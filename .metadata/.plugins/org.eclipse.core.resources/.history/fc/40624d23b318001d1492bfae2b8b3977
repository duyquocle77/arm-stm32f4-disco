#include "main.h"
#include <stdio.h>
#include <stdint.h>
#include <string.h>

void vectortable_move();
void tim_systick_init();
void sys_delay_ms(uint32_t time_milisec);
void interrupt_init();
void dma_init();
void uart_init();
void uart_send_char(uint8_t charac);
void uart_send_string(char *string);
void spi_init();
void spi_ss_enable();
void spi_ss_disable();
void spi_send_data(uint8_t data);
void spi_send_string(char* str);
uint8_t spi_receive_data();


uint8_t rx_dma_buffer[10];
uint8_t rx_int_buffer[128];
uint32_t rx_index;

uint8_t x_h, x_l, y_h, y_l, z_h, z_l;
int16_t x, y, z;

uint8_t* volatile data_buffer;

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
int
main() {
	vectortable_move();
	tim_systick_init();
	uart_init();
	spi_init();

	while (1) {
		spi_ss_enable();
		spi_send_data(0x20|0x40);
		spi_send_data(0x0F);
		//spi_send_data(0x00);
		spi_ss_disable();

		spi_ss_enable();
		spi_send_data(0x20|0x80);
		spi_receive_data();
		spi_ss_disable();

		spi_ss_enable();
		spi_send_data(0x28|0x80|0x40);
		x_l = spi_receive_data();
		x_h = spi_receive_data();
		y_l = spi_receive_data();
		y_h = spi_receive_data();
		z_l = spi_receive_data();
		z_h = spi_receive_data();
		spi_ss_disable();

		x = (x_h << 8)|x_l;
		y = (y_h << 8)|y_l;
		z = (z_h << 8)|z_l;

		sprintf(data_buffer, "x = %d       -  y = %d        - z = %d         \r\n", x, y, z);
		uart_send_string("heloo");
		uart_send_string(data_buffer);

	}

	return 0;
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
void
vectortable_move()
{
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *volatile)0x20000000;
	void *volatile flash = (void *volatile)0x08000000;
	memcpy(ram, flash, 0x198);

	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
	*VTOR = 0x20000000;
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
void
tim_systick_init()
{
	uint32_t *SYS_CSR = (uint32_t *)(0xe000e010 + 0x00);
	uint32_t *SYS_RVR = (uint32_t *)(0xe000e010 + 0x00);

	/*clock source: processor clock*/
	*SYS_CSR |= (1 << 2);	// bit CLKSOURCE

	/*set count*/
	*SYS_RVR = 160000 - 1;

	/*enable the counter*/
	*SYS_CSR |= (1 << 0);	// bit ENABLE
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
void
sys_delay_ms(uint32_t time_milisec)
{
	uint32_t *SYS_CSR = (uint32_t *)(0xe000e010 + 0x00);

	for(uint32_t i = 0; i <= time_milisec; i++)
		/*wait bit COUNTFLAG set 1*/
		while(((*SYS_CSR >> 16) & 1) == 0);
}

/*
 * \brief
 * \param[in]
 * \param[out]
 * \retval
 */
void
uart_init() {
	/*enable clock peripherals*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_USART2_CLK_ENABLE();

	uint32_t volatile *const GPIOA_MODER = (uint32_t *)(0x40020000 + 0x00);
	uint32_t volatile *const GPIOA_AFRL  = (uint32_t *)(0x40020000 + 0x20);
	uint16_t volatile *const USART2_BRR = (uint16_t *)(0x40004400 + 0x08);
	uint32_t volatile *const USART2_CR1 = (uint32_t *)(0x40004400 + 0x0c);
	uint32_t volatile *const USART2_CR2 = (uint32_t *)(0x40004400 + 0x10);

	/*set PA2 as TX, PA3 as RX*/
	/*alternate mode*/
	*GPIOA_MODER &= ~((0b11 << (2 * 3)) | (0b11 << (2 * 2)));
	*GPIOA_MODER |=   (0b10 << (2 * 3)) | (0b10 << (2 * 2));

	/*alternate function 7*/
	*GPIOA_AFRL &= ~((0b1111 << (4 * 3)) | (0b1111 << (4 * 2)));
	*GPIOA_AFRL |=   (0b0111 << (4 * 3)) | (0b0111 << (4 * 2));

	/*set data frame*/
	/*word length: 8 data bits*/
	*USART2_CR1 &= ~(1 << 12);	// bit M
	/* 1 stop bit*/
	*USART2_CR2 &= (1 << 13);
	*USART2_CR2 &= (1 << 12);
	/*disable parity bit*/
	*USART2_CR1 &= ~(1 << 10);	// bit PCE

	/*set baudrate*/
	//fuart = 16mhz, baud = 9600 -> USART2_BRR = 104.1875
	/*uint16_t DIV_Mantissa = 16000000 / (16 * baudrate);
	uint8_t  DIV_Fraction = round((16000000 % (16 * baudrate)) * 16);
	*USART2_BRR = (DIV_Mantissa << 4) | DIV_Fraction;*/
	*USART2_BRR = (104 << 4) | 3;


	/*enable Tx, Rx*/
	*USART2_CR1 |= (1 << 2) | (1 << 3);	// bit TE, RE

	/*enable UART*/
	*USART2_CR1 |= (1 << 13);	// bit UE
}

/*
 * \brief
 * \param[in]
 * \param[out]
 * \retval
 */
void
uart_send_char(uint8_t charac) {
	uint32_t volatile *const UART2_SR = (uint32_t *)(0x40004400 + 0x00);
	uint8_t  volatile *const UART2_DR = (uint8_t *)(0x40004400 + 0x04);

	/*wait data empty*/
	while (((*UART2_SR >> 7) & 1) == 0) {}

	/*transmiss data*/
	*UART2_DR = charac;

	/*wait transmission complete*/
	while(((*UART2_SR >> 6) & 1) == 0) {}

	/*clear TC bit*/
	*UART2_SR &= ~(1 << 6);
}

/*
 * \brief
 * \param[in]
 * \param[out]
 * \retval
 */
void
uart_send_string(char *string)
{
	while (*string != '\0') {
		uart_send_char(*string);
		string++;
	}
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_init() {
	/*enable peripherals clock*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_SPI1_CLK_ENABLE();


	uint32_t volatile* const GPIOA_MODER  = (uint32_t*)(0x40020000 + 0x00);
	uint32_t volatile* const GPIOA_AFLR	  = (uint32_t*)(0x40020000 + 0x20);
	uint32_t volatile* const GPIOE_MODER  = (uint32_t*)(0x40021000 + 0x00);
	uint32_t volatile* const GPIOE_OTYPER = (uint32_t*)(0x40021000 + 0x04);
	uint32_t volatile* const GPIOE_ODR	  = (uint32_t*)(0x40021000 + 0x14);
	uint32_t volatile* const SPI1_CR1	  = (uint32_t*)(0x40013000 + 0x00);

	/*PA5 PA6 PA7 as alternate function mode*/
	*GPIOA_MODER &= ~((0b10 << (2 * 5)) | (0b10 << (2 * 6)) | (0b10 << (2 * 7)));
	*GPIOA_MODER |=   (0b10 << (2 * 5)) | (0b10 << (2 * 6)) | (0b10 << (2 * 7));
	/*alternate function 5*/
	*GPIOA_AFLR  |= (5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7));

	/*PE3 as output mode*/
	*GPIOE_MODER  |= (0b01 << (2 * 3));
	*GPIOE_OTYPER &= ~(1 << 3);
	*GPIOE_ODR    |= (1 << 3);

	/*spi baudrate = Fpclk/16*/
	*SPI1_CR1 |= (0b011 << 3);

	/*clock pin mode 0*/
	*SPI1_CR1 |= (1 << 1);	//CPOL
	*SPI1_CR1 |= (1 << 0);	//CPHA

	/*spi master config*/
	*SPI1_CR1 |= (1 <<2 );

	/*data frame: 8bit*/
	*SPI1_CR1 &= ~(1 << 11);
	//*SPI1_CR1 |= (1 << 11);

	/*SS pin mode : software*/
	*SPI1_CR1 |= (1 << 8) |(1 << 9);


	//*SPI1_CR1 |= (1 << 7);

	/*enable spi*/
	*SPI1_CR1 |= (1 << 6);
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_ss_enable() {
	uint32_t volatile* const GPIOE_ODR = (uint32_t*)(0x40021000 + 0x14);
	*GPIOE_ODR &= ~(1 << 3);
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_ss_disable() {
	uint32_t volatile* const GPIOE_ODR = (uint32_t*)(0x40021000 + 0x14);
	*GPIOE_ODR |= (1 << 3);
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_send_data(uint8_t data) {
	uint32_t volatile* const SPI1_SR   = (uint32_t*)(0x40013000 + 0x08);
	uint32_t volatile* const SPI1_DR   = (uint32_t*)(0x40013000 + 0x0c);
	uint8_t tmp;


	//check TXE
	while (0 == ((*SPI1_SR >> 1) & 1));
	//send data
	*SPI1_DR = (uint32_t)data;
	//*SPI1_DR = ((uint32_t)data << 8)|0xFF;
	//check RXNE
	while (0 == ((*SPI1_SR >> 0) & 1));
	//clear trash
	tmp = (uint8_t)*SPI1_DR;
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
void spi_send_string(char* str) {
	while (*str != '\0') {
		spi_send_data(*str);
		str++;
	}
}

/*
 *\brief
 *\param[in]
 *\param[out]
 *\retval
 */
uint8_t
spi_receive_data() {
	uint32_t volatile* const SPI1_SR   = (uint32_t*)(0x40013000 + 0x08);
	uint32_t volatile* const SPI1_DR   = (uint32_t*)(0x40013000 + 0x0c);
	uint8_t data;

	//check TXE
	while (0 == ((*SPI1_SR >> 1) & 1));
	//send trash to create master clock
	*SPI1_DR = 0xFFFF;
	//check RXNE
	while (0 == ((*SPI1_SR >> 0) & 1));
	//read data from slave
	data = (uint8_t)*SPI1_DR;

	return data;
}

/*
 * \brief
 * \param[in]
 * \param[out]
 * \retval
 */
void
spi_read_sensor(uint8_t address) {
	address |= 0x80;
	spi_send_data(address);
	spi_send_data(0xFF);
}

/*
 * \brief
 * \param[in]
 * \param[out]
 * \retval
 */
void
spi_cfg_sensor(uint8_t address, uint8_t data) {
	spi_send_data(address);
	spi_send_data(data);
}

/*
 * \brief
 * \param[in]
 * \param[out]
 * \retval
 */
void
uart_receive_handler()
{
	uint32_t volatile *const USART2_SR = (uint32_t *)(0x40004400 + 0x00);
	uint32_t volatile *const UART2_DR  = (uint32_t *)(0x40004400 + 0x04);

	/*read data*/
	rx_int_buffer[rx_index] = *UART2_DR;
	rx_index++;

	if (rx_index >= 50) {
		rx_index = 0;
	}

	/*clear RXNE*/
	*USART2_SR &= ~(1 << 5);
}

/*
 * \brief
 * \param[in]
 * \param[out]
 * \retval
 */
void
dma_transfer_handler() {
	uint32_t volatile *const DMA1_HIFCR    = (uint32_t *)(0x40026000 + 0x0C);

	/*handler*/
	__asm("NOP");

	/*clear stream 7 transfer complete interrupt flag*/
	*DMA1_HIFCR |= (1 << 27);	// bit CTCIF7
}

