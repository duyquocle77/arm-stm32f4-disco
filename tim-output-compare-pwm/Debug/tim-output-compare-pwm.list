
tim-output-compare-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003dc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000574  08000574  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000574  08000574  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000574  08000574  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000574  08000574  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000574  08000574  00010574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000578  08000578  00010578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800057c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000580  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000580  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014ae  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055c  00000000  00000000  000214e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00021a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00021c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014400  00000000  00000000  00021db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000028bf  00000000  00000000  000361b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000814a4  00000000  00000000  00038a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9f1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005ec  00000000  00000000  000b9f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800055c 	.word	0x0800055c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800055c 	.word	0x0800055c

080001d8 <main>:

void sys_delay_ms(uint32_t time_milisec);


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	vectortable_move();
 80001dc:	f000 f81e 	bl	800021c <vectortable_move>

	while (1)
	{
		static uint8_t dim = 0;
		while(dim <= 100)
 80001e0:	e011      	b.n	8000206 <main+0x2e>
		{
			tim4_pwm_ch1_start(1600, 1000, dim);
 80001e2:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <main+0x40>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	461a      	mov	r2, r3
 80001e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001ec:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80001f0:	f000 f86c 	bl	80002cc <tim4_pwm_ch1_start>
			dim += 10;
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <main+0x40>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	330a      	adds	r3, #10
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <main+0x40>)
 80001fe:	701a      	strb	r2, [r3, #0]
			sys_delay_ms(100);
 8000200:	2064      	movs	r0, #100	; 0x64
 8000202:	f000 f827 	bl	8000254 <sys_delay_ms>
		while(dim <= 100)
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <main+0x40>)
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b64      	cmp	r3, #100	; 0x64
 800020c:	d9e9      	bls.n	80001e2 <main+0xa>
		}
		dim = 0;
 800020e:	4b02      	ldr	r3, [pc, #8]	; (8000218 <main+0x40>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
	{
 8000214:	e7e4      	b.n	80001e0 <main+0x8>
 8000216:	bf00      	nop
 8000218:	20000020 	.word	0x20000020

0800021c <vectortable_move>:
 * @brief	: move vector table from FLASH to RAM
 * @param	: None
 * @retval	: None
 */
void vectortable_move()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
	/*
	 * size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198
	 * */
	/* move vector table from flash to ram */
	void *volatile dst = (void *volatile)0x20000000;	// RAM_address
 8000222:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000226:	60bb      	str	r3, [r7, #8]
	void *volatile src = (void *volatile)0x08000000;	// FLASH_address
 8000228:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800022c:	607b      	str	r3, [r7, #4]
	memcpy(dst, src, 0x198);
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	6879      	ldr	r1, [r7, #4]
 8000232:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f982 	bl	8000540 <memcpy>

	/**/
	uint32_t volatile *const VTOR = (uint32_t *)(0xE000ED08);
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <vectortable_move+0x34>)
 800023e:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000246:	601a      	str	r2, [r3, #0]
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	e000ed08 	.word	0xe000ed08

08000254 <sys_delay_ms>:

void sys_delay_ms(uint32_t time_milisec)
{
 8000254:	b480      	push	{r7}
 8000256:	b087      	sub	sp, #28
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	volatile uint32_t *const SYS_CSR = (volatile uint32_t *const)(0xe000e010 + 0x00);
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <sys_delay_ms+0x6c>)
 800025e:	613b      	str	r3, [r7, #16]
	volatile uint32_t *const SYS_RVR = (volatile uint32_t *const)(0xe000e010 + 0x04);
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <sys_delay_ms+0x70>)
 8000262:	60fb      	str	r3, [r7, #12]

	/*enable clock*/
	*SYS_CSR |= (1<<2);
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f043 0204 	orr.w	r2, r3, #4
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	601a      	str	r2, [r3, #0]

	/*enable the counter*/
	*SYS_CSR |= (1<<0);
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f043 0201 	orr.w	r2, r3, #1
 8000278:	693b      	ldr	r3, [r7, #16]
 800027a:	601a      	str	r2, [r3, #0]

	/*set count*/
	*SYS_RVR = 160000 - 1;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <sys_delay_ms+0x74>)
 8000280:	601a      	str	r2, [r3, #0]
	// F = 16 Mhz -> 1 count = 16 us

	/*delay*/
	for(uint32_t i = 0; i <= time_milisec; i++)
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]
 8000286:	e00a      	b.n	800029e <sys_delay_ms+0x4a>
		while(0 == ((*SYS_CSR >> 16) & 1));		// check COUNTFLAG, every 1 ms -> COUNTFLAG = 1
 8000288:	bf00      	nop
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	0c1b      	lsrs	r3, r3, #16
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f8      	beq.n	800028a <sys_delay_ms+0x36>
	for(uint32_t i = 0; i <= time_milisec; i++)
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	3301      	adds	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
 800029e:	697a      	ldr	r2, [r7, #20]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d9f0      	bls.n	8000288 <sys_delay_ms+0x34>

	/*disable the counter*/
	*SYS_CSR &= ~(1 << 0);
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f023 0201 	bic.w	r2, r3, #1
 80002ae:	693b      	ldr	r3, [r7, #16]
 80002b0:	601a      	str	r2, [r3, #0]
}
 80002b2:	bf00      	nop
 80002b4:	371c      	adds	r7, #28
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010
 80002c4:	e000e014 	.word	0xe000e014
 80002c8:	000270ff 	.word	0x000270ff

080002cc <tim4_pwm_ch1_start>:

void tim4_pwm_ch1_start(uint16_t prescaler, uint16_t count, uint8_t duty_cycle)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b08d      	sub	sp, #52	; 0x34
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	80fb      	strh	r3, [r7, #6]
 80002d6:	460b      	mov	r3, r1
 80002d8:	80bb      	strh	r3, [r7, #4]
 80002da:	4613      	mov	r3, r2
 80002dc:	70fb      	strb	r3, [r7, #3]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	4b3e      	ldr	r3, [pc, #248]	; (80003dc <tim4_pwm_ch1_start+0x110>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	4a3d      	ldr	r2, [pc, #244]	; (80003dc <tim4_pwm_ch1_start+0x110>)
 80002e8:	f043 0308 	orr.w	r3, r3, #8
 80002ec:	6313      	str	r3, [r2, #48]	; 0x30
 80002ee:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <tim4_pwm_ch1_start+0x110>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	f003 0308 	and.w	r3, r3, #8
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM4_CLK_ENABLE();
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <tim4_pwm_ch1_start+0x110>)
 8000300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000302:	4a36      	ldr	r2, [pc, #216]	; (80003dc <tim4_pwm_ch1_start+0x110>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	6413      	str	r3, [r2, #64]	; 0x40
 800030a:	4b34      	ldr	r3, [pc, #208]	; (80003dc <tim4_pwm_ch1_start+0x110>)
 800030c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030e:	f003 0304 	and.w	r3, r3, #4
 8000312:	60bb      	str	r3, [r7, #8]
 8000314:	68bb      	ldr	r3, [r7, #8]

	volatile uint32_t *const GPIOD_MODER = (uint32_t *)(0x40020c00 + 0x00);
 8000316:	4b32      	ldr	r3, [pc, #200]	; (80003e0 <tim4_pwm_ch1_start+0x114>)
 8000318:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint32_t *const GPIOD_AFRH  = (volatile uint32_t *const)(0x40020c00 + 0x24);
 800031a:	4b32      	ldr	r3, [pc, #200]	; (80003e4 <tim4_pwm_ch1_start+0x118>)
 800031c:	62bb      	str	r3, [r7, #40]	; 0x28
	volatile uint32_t *const TIM4_CR1    = (volatile uint32_t *const)(0x40000800 + 0x00);
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <tim4_pwm_ch1_start+0x11c>)
 8000320:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t *const TIM4_CCMR1  = (volatile uint32_t *const)(0x40000800 + 0x18);
 8000322:	4b32      	ldr	r3, [pc, #200]	; (80003ec <tim4_pwm_ch1_start+0x120>)
 8000324:	623b      	str	r3, [r7, #32]
	volatile uint32_t *const TIM4_CCER   = (volatile uint32_t *const)(0x40000800 + 0x20);
 8000326:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <tim4_pwm_ch1_start+0x124>)
 8000328:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *const TIM4_PCR    = (volatile uint32_t *const)(0x40000800 + 0x28);
 800032a:	4b32      	ldr	r3, [pc, #200]	; (80003f4 <tim4_pwm_ch1_start+0x128>)
 800032c:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *const TIM4_ARR    = (volatile uint32_t *const)(0x40000800 + 0x2c);
 800032e:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <tim4_pwm_ch1_start+0x12c>)
 8000330:	617b      	str	r3, [r7, #20]
	volatile uint32_t *const TIM4_CCR1   = (volatile uint32_t *const)(0x40000800 + 0x34);
 8000332:	4b32      	ldr	r3, [pc, #200]	; (80003fc <tim4_pwm_ch1_start+0x130>)
 8000334:	613b      	str	r3, [r7, #16]

	/*alternate mode*/
	*GPIOD_MODER &= ~(0b11 << (2 * 12));
 8000336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000340:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |=  (0b10 << (2 * 12));
 8000342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800034a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800034c:	601a      	str	r2, [r3, #0]

	/*alternate function 2*/
	*GPIOD_AFRH &= ~(0b1111 << (4 * 4));
 800034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000358:	601a      	str	r2, [r3, #0]
	*GPIOD_AFRH |=  (2 << (4 * 4));
 800035a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000364:	601a      	str	r2, [r3, #0]

	*TIM4_ARR = count - 1;							/*set count*/
 8000366:	88bb      	ldrh	r3, [r7, #4]
 8000368:	3b01      	subs	r3, #1
 800036a:	461a      	mov	r2, r3
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	601a      	str	r2, [r3, #0]
	*TIM4_PCR = prescaler - 1;						/*set prescaler*/
 8000370:	88fb      	ldrh	r3, [r7, #6]
 8000372:	3b01      	subs	r3, #1
 8000374:	461a      	mov	r2, r3
 8000376:	69bb      	ldr	r3, [r7, #24]
 8000378:	601a      	str	r2, [r3, #0]

	*TIM4_CCR1 = (duty_cycle * (*TIM4_ARR + 1)) / 100;	/*set duty cycle*/
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	6812      	ldr	r2, [r2, #0]
 8000380:	3201      	adds	r2, #1
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	4a1e      	ldr	r2, [pc, #120]	; (8000400 <tim4_pwm_ch1_start+0x134>)
 8000388:	fba2 2303 	umull	r2, r3, r2, r3
 800038c:	095a      	lsrs	r2, r3, #5
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	601a      	str	r2, [r3, #0]

	/*up-counter mode*/
	*TIM4_CR1 &= ~(1 << 4);
 8000392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f023 0210 	bic.w	r2, r3, #16
 800039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800039c:	601a      	str	r2, [r3, #0]

	/*pwm mode 1: CNT < CCR1 -> active*/
	*TIM4_CCMR1 &= ~(0b111<<4);
 800039e:	6a3b      	ldr	r3, [r7, #32]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80003a6:	6a3b      	ldr	r3, [r7, #32]
 80003a8:	601a      	str	r2, [r3, #0]
	*TIM4_CCMR1 |= (0b11 << 5);
 80003aa:	6a3b      	ldr	r3, [r7, #32]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80003b2:	6a3b      	ldr	r3, [r7, #32]
 80003b4:	601a      	str	r2, [r3, #0]

	*TIM4_CCER |= (1 << 0);						/*enable OC1 chanel 1*/
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0201 	orr.w	r2, r3, #1
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	601a      	str	r2, [r3, #0]
	*TIM4_CR1  |= (1 << 0);						/*enable counter */
 80003c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 0201 	orr.w	r2, r3, #1
 80003ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003cc:	601a      	str	r2, [r3, #0]
}
 80003ce:	bf00      	nop
 80003d0:	3734      	adds	r7, #52	; 0x34
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020c00 	.word	0x40020c00
 80003e4:	40020c24 	.word	0x40020c24
 80003e8:	40000800 	.word	0x40000800
 80003ec:	40000818 	.word	0x40000818
 80003f0:	40000820 	.word	0x40000820
 80003f4:	40000828 	.word	0x40000828
 80003f8:	4000082c 	.word	0x4000082c
 80003fc:	40000834 	.word	0x40000834
 8000400:	51eb851f 	.word	0x51eb851f

08000404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <NMI_Handler+0x4>

0800040a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040e:	e7fe      	b.n	800040e <HardFault_Handler+0x4>

08000410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <MemManage_Handler+0x4>

08000416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <BusFault_Handler+0x4>

0800041c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <UsageFault_Handler+0x4>

08000422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000450:	f000 f83e 	bl	80004d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <SystemInit+0x20>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <SystemInit+0x20>)
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800047c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000480:	480d      	ldr	r0, [pc, #52]	; (80004b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000482:	490e      	ldr	r1, [pc, #56]	; (80004bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000498:	4c0b      	ldr	r4, [pc, #44]	; (80004c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004a6:	f7ff ffd7 	bl	8000458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f000 f825 	bl	80004f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ae:	f7ff fe93 	bl	80001d8 <main>
  bx  lr    
 80004b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004c0:	0800057c 	.word	0x0800057c
  ldr r2, =_sbss
 80004c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004c8:	20000028 	.word	0x20000028

080004cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_IncTick+0x20>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_IncTick+0x24>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4413      	add	r3, r2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <HAL_IncTick+0x24>)
 80004e2:	6013      	str	r3, [r2, #0]
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000024 	.word	0x20000024

080004f8 <__libc_init_array>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	4d0d      	ldr	r5, [pc, #52]	; (8000530 <__libc_init_array+0x38>)
 80004fc:	4c0d      	ldr	r4, [pc, #52]	; (8000534 <__libc_init_array+0x3c>)
 80004fe:	1b64      	subs	r4, r4, r5
 8000500:	10a4      	asrs	r4, r4, #2
 8000502:	2600      	movs	r6, #0
 8000504:	42a6      	cmp	r6, r4
 8000506:	d109      	bne.n	800051c <__libc_init_array+0x24>
 8000508:	4d0b      	ldr	r5, [pc, #44]	; (8000538 <__libc_init_array+0x40>)
 800050a:	4c0c      	ldr	r4, [pc, #48]	; (800053c <__libc_init_array+0x44>)
 800050c:	f000 f826 	bl	800055c <_init>
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	10a4      	asrs	r4, r4, #2
 8000514:	2600      	movs	r6, #0
 8000516:	42a6      	cmp	r6, r4
 8000518:	d105      	bne.n	8000526 <__libc_init_array+0x2e>
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000520:	4798      	blx	r3
 8000522:	3601      	adds	r6, #1
 8000524:	e7ee      	b.n	8000504 <__libc_init_array+0xc>
 8000526:	f855 3b04 	ldr.w	r3, [r5], #4
 800052a:	4798      	blx	r3
 800052c:	3601      	adds	r6, #1
 800052e:	e7f2      	b.n	8000516 <__libc_init_array+0x1e>
 8000530:	08000574 	.word	0x08000574
 8000534:	08000574 	.word	0x08000574
 8000538:	08000574 	.word	0x08000574
 800053c:	08000578 	.word	0x08000578

08000540 <memcpy>:
 8000540:	440a      	add	r2, r1
 8000542:	4291      	cmp	r1, r2
 8000544:	f100 33ff 	add.w	r3, r0, #4294967295
 8000548:	d100      	bne.n	800054c <memcpy+0xc>
 800054a:	4770      	bx	lr
 800054c:	b510      	push	{r4, lr}
 800054e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000556:	4291      	cmp	r1, r2
 8000558:	d1f9      	bne.n	800054e <memcpy+0xe>
 800055a:	bd10      	pop	{r4, pc}

0800055c <_init>:
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055e:	bf00      	nop
 8000560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000562:	bc08      	pop	{r3}
 8000564:	469e      	mov	lr, r3
 8000566:	4770      	bx	lr

08000568 <_fini>:
 8000568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056a:	bf00      	nop
 800056c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056e:	bc08      	pop	{r3}
 8000570:	469e      	mov	lr, r3
 8000572:	4770      	bx	lr
