
spi-i3g4250d-8bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000548  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006e8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  080006ec  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080006ec  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017e4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000632  00000000  00000000  00021818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00021e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  00022088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014400  00000000  00000000  00022278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b66  00000000  00000000  00036678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008159b  00000000  00000000  000391de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000798  00000000  00000000  000ba7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006c8 	.word	0x080006c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080006c8 	.word	0x080006c8

080001d8 <main>:
 *\param[in]
 *\param[out]
 *\retval
 */
int
main() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	vectortable_move();
 80001dc:	f000 f876 	bl	80002cc <vectortable_move>
	tim_systick_init();
 80001e0:	f000 f890 	bl	8000304 <tim_systick_init>
	spi_init();
 80001e4:	f000 f8ae 	bl	8000344 <spi_init>
	//dma_init();
	//interrupt_init();

	while (1) {
		spi_ss_enable();
 80001e8:	f000 f94a 	bl	8000480 <spi_ss_enable>
		spi_send_data(0x20|0x40);
 80001ec:	2060      	movs	r0, #96	; 0x60
 80001ee:	f000 f96f 	bl	80004d0 <spi_send_data>
		spi_send_data(0x0F);
 80001f2:	200f      	movs	r0, #15
 80001f4:	f000 f96c 	bl	80004d0 <spi_send_data>
		//spi_send_data(0x00);
		spi_ss_disable();
 80001f8:	f000 f956 	bl	80004a8 <spi_ss_disable>

		spi_ss_enable();
 80001fc:	f000 f940 	bl	8000480 <spi_ss_enable>
		spi_send_data(0x20|0x80);
 8000200:	20a0      	movs	r0, #160	; 0xa0
 8000202:	f000 f965 	bl	80004d0 <spi_send_data>
		spi_receive_data();
 8000206:	f000 f98b 	bl	8000520 <spi_receive_data>
		spi_ss_disable();
 800020a:	f000 f94d 	bl	80004a8 <spi_ss_disable>

		spi_ss_enable();
 800020e:	f000 f937 	bl	8000480 <spi_ss_enable>
		spi_send_data(0x28|0x80|0x40);
 8000212:	20e8      	movs	r0, #232	; 0xe8
 8000214:	f000 f95c 	bl	80004d0 <spi_send_data>
		x_l = spi_receive_data();
 8000218:	f000 f982 	bl	8000520 <spi_receive_data>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <main+0xd0>)
 8000222:	701a      	strb	r2, [r3, #0]
		x_h = spi_receive_data();
 8000224:	f000 f97c 	bl	8000520 <spi_receive_data>
 8000228:	4603      	mov	r3, r0
 800022a:	461a      	mov	r2, r3
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <main+0xd4>)
 800022e:	701a      	strb	r2, [r3, #0]
		y_l = spi_receive_data();
 8000230:	f000 f976 	bl	8000520 <spi_receive_data>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <main+0xd8>)
 800023a:	701a      	strb	r2, [r3, #0]
		y_h = spi_receive_data();
 800023c:	f000 f970 	bl	8000520 <spi_receive_data>
 8000240:	4603      	mov	r3, r0
 8000242:	461a      	mov	r2, r3
 8000244:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <main+0xdc>)
 8000246:	701a      	strb	r2, [r3, #0]
		z_l = spi_receive_data();
 8000248:	f000 f96a 	bl	8000520 <spi_receive_data>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0xe0>)
 8000252:	701a      	strb	r2, [r3, #0]
		z_h = spi_receive_data();
 8000254:	f000 f964 	bl	8000520 <spi_receive_data>
 8000258:	4603      	mov	r3, r0
 800025a:	461a      	mov	r2, r3
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <main+0xe4>)
 800025e:	701a      	strb	r2, [r3, #0]
		spi_ss_disable();
 8000260:	f000 f922 	bl	80004a8 <spi_ss_disable>

		x = (x_h << 8)|x_l;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <main+0xd4>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	021b      	lsls	r3, r3, #8
 800026a:	b21a      	sxth	r2, r3
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <main+0xd0>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b21b      	sxth	r3, r3
 8000272:	4313      	orrs	r3, r2
 8000274:	b21a      	sxth	r2, r3
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <main+0xe8>)
 8000278:	801a      	strh	r2, [r3, #0]
		y = (y_h << 8)|y_l;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <main+0xdc>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	021b      	lsls	r3, r3, #8
 8000280:	b21a      	sxth	r2, r3
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <main+0xd8>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	b21b      	sxth	r3, r3
 8000288:	4313      	orrs	r3, r2
 800028a:	b21a      	sxth	r2, r3
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <main+0xec>)
 800028e:	801a      	strh	r2, [r3, #0]
		z = (z_h << 8)|z_l;
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <main+0xe4>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	021b      	lsls	r3, r3, #8
 8000296:	b21a      	sxth	r2, r3
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <main+0xe0>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	b21b      	sxth	r3, r3
 800029e:	4313      	orrs	r3, r2
 80002a0:	b21a      	sxth	r2, r3
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <main+0xf0>)
 80002a4:	801a      	strh	r2, [r3, #0]
		spi_ss_enable();
 80002a6:	e79f      	b.n	80001e8 <main+0x10>
 80002a8:	20000021 	.word	0x20000021
 80002ac:	20000020 	.word	0x20000020
 80002b0:	20000023 	.word	0x20000023
 80002b4:	20000022 	.word	0x20000022
 80002b8:	20000025 	.word	0x20000025
 80002bc:	20000024 	.word	0x20000024
 80002c0:	20000026 	.word	0x20000026
 80002c4:	20000028 	.word	0x20000028
 80002c8:	2000002a 	.word	0x2000002a

080002cc <vectortable_move>:
 *\param[out]
 *\retval
 */
void
vectortable_move()
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *volatile)0x20000000;
 80002d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002d6:	60bb      	str	r3, [r7, #8]
	void *volatile flash = (void *volatile)0x08000000;
 80002d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002dc:	607b      	str	r3, [r7, #4]
	memcpy(ram, flash, 0x198);
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f9e0 	bl	80006ac <memcpy>

	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <vectortable_move+0x34>)
 80002ee:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	e000ed08 	.word	0xe000ed08

08000304 <tim_systick_init>:
 *\param[out]
 *\retval
 */
void
tim_systick_init()
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
	uint32_t *SYS_CSR = (uint32_t *)(0xe000e010 + 0x00);
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <tim_systick_init+0x38>)
 800030c:	607b      	str	r3, [r7, #4]
	uint32_t *SYS_RVR = (uint32_t *)(0xe000e010 + 0x00);
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <tim_systick_init+0x38>)
 8000310:	603b      	str	r3, [r7, #0]

	/*clock source: processor clock*/
	*SYS_CSR |= (1 << 2);	// bit CLKSOURCE
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f043 0204 	orr.w	r2, r3, #4
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]

	/*set count*/
	*SYS_RVR = 160000 - 1;
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <tim_systick_init+0x3c>)
 8000322:	601a      	str	r2, [r3, #0]

	/*enable the counter*/
	*SYS_CSR |= (1 << 0);	// bit ENABLE
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f043 0201 	orr.w	r2, r3, #1
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000e010 	.word	0xe000e010
 8000340:	000270ff 	.word	0x000270ff

08000344 <spi_init>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_init() {
 8000344:	b480      	push	{r7}
 8000346:	b08b      	sub	sp, #44	; 0x2c
 8000348:	af00      	add	r7, sp, #0
	/*enable peripherals clock*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	4b45      	ldr	r3, [pc, #276]	; (8000464 <spi_init+0x120>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a44      	ldr	r2, [pc, #272]	; (8000464 <spi_init+0x120>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
 800035a:	4b42      	ldr	r3, [pc, #264]	; (8000464 <spi_init+0x120>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	4b3e      	ldr	r3, [pc, #248]	; (8000464 <spi_init+0x120>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a3d      	ldr	r2, [pc, #244]	; (8000464 <spi_init+0x120>)
 8000370:	f043 0310 	orr.w	r3, r3, #16
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
 8000376:	4b3b      	ldr	r3, [pc, #236]	; (8000464 <spi_init+0x120>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	f003 0310 	and.w	r3, r3, #16
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	4b37      	ldr	r3, [pc, #220]	; (8000464 <spi_init+0x120>)
 8000388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800038a:	4a36      	ldr	r2, [pc, #216]	; (8000464 <spi_init+0x120>)
 800038c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000390:	6453      	str	r3, [r2, #68]	; 0x44
 8000392:	4b34      	ldr	r3, [pc, #208]	; (8000464 <spi_init+0x120>)
 8000394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]


	uint32_t volatile* const GPIOA_MODER  = (uint32_t*)(0x40020000 + 0x00);
 800039e:	4b32      	ldr	r3, [pc, #200]	; (8000468 <spi_init+0x124>)
 80003a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t volatile* const GPIOA_AFLR	  = (uint32_t*)(0x40020000 + 0x20);
 80003a2:	4b32      	ldr	r3, [pc, #200]	; (800046c <spi_init+0x128>)
 80003a4:	623b      	str	r3, [r7, #32]
	uint32_t volatile* const GPIOE_MODER  = (uint32_t*)(0x40021000 + 0x00);
 80003a6:	4b32      	ldr	r3, [pc, #200]	; (8000470 <spi_init+0x12c>)
 80003a8:	61fb      	str	r3, [r7, #28]
	uint32_t volatile* const GPIOE_OTYPER = (uint32_t*)(0x40021000 + 0x04);
 80003aa:	4b32      	ldr	r3, [pc, #200]	; (8000474 <spi_init+0x130>)
 80003ac:	61bb      	str	r3, [r7, #24]
	uint32_t volatile* const GPIOE_ODR	  = (uint32_t*)(0x40021000 + 0x14);
 80003ae:	4b32      	ldr	r3, [pc, #200]	; (8000478 <spi_init+0x134>)
 80003b0:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const SPI1_CR1	  = (uint32_t*)(0x40013000 + 0x00);
 80003b2:	4b32      	ldr	r3, [pc, #200]	; (800047c <spi_init+0x138>)
 80003b4:	613b      	str	r3, [r7, #16]

	/*PA5 PA6 PA7 as alternate function mode*/
	*GPIOA_MODER &= ~((0b10 << (2 * 5)) | (0b10 << (2 * 6)) | (0b10 << (2 * 7)));
 80003b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f423 4228 	bic.w	r2, r3, #43008	; 0xa800
 80003be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c0:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |=   (0b10 << (2 * 5)) | (0b10 << (2 * 6)) | (0b10 << (2 * 7));
 80003c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f443 4228 	orr.w	r2, r3, #43008	; 0xa800
 80003ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003cc:	601a      	str	r2, [r3, #0]
	/*alternate function 5*/
	*GPIOA_AFLR  |= (5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7));
 80003ce:	6a3b      	ldr	r3, [r7, #32]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80003d6:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003da:	6a3a      	ldr	r2, [r7, #32]
 80003dc:	6013      	str	r3, [r2, #0]

	/*PE3 as output mode*/
	*GPIOE_MODER  |= (0b01 << (2 * 3));
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	601a      	str	r2, [r3, #0]
	*GPIOE_OTYPER &= ~(1 << 3);
 80003ea:	69bb      	ldr	r3, [r7, #24]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f023 0208 	bic.w	r2, r3, #8
 80003f2:	69bb      	ldr	r3, [r7, #24]
 80003f4:	601a      	str	r2, [r3, #0]
	*GPIOE_ODR    |= (1 << 3);
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f043 0208 	orr.w	r2, r3, #8
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	601a      	str	r2, [r3, #0]

	/*spi baudrate = Fpclk/16*/
	*SPI1_CR1 |= (0b011 << 3);
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f043 0218 	orr.w	r2, r3, #24
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	601a      	str	r2, [r3, #0]

	/*clock pin mode 0*/
	*SPI1_CR1 |= (1 << 1);	//CPOL
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f043 0202 	orr.w	r2, r3, #2
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	601a      	str	r2, [r3, #0]
	*SPI1_CR1 |= (1 << 0);	//CPHA
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f043 0201 	orr.w	r2, r3, #1
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	601a      	str	r2, [r3, #0]

	/*spi master config*/
	*SPI1_CR1 |= (1 <<2 );
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f043 0204 	orr.w	r2, r3, #4
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	601a      	str	r2, [r3, #0]

	/*data frame: 8bit*/
	*SPI1_CR1 &= ~(1 << 11);
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	601a      	str	r2, [r3, #0]
	//*SPI1_CR1 |= (1 << 11);

	/*SS pin mode : software*/
	*SPI1_CR1 |= (1 << 8) |(1 << 9);
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000446:	693b      	ldr	r3, [r7, #16]
 8000448:	601a      	str	r2, [r3, #0]


	//*SPI1_CR1 |= (1 << 7);

	/*enable spi*/
	*SPI1_CR1 |= (1 << 6);
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	372c      	adds	r7, #44	; 0x2c
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40023800 	.word	0x40023800
 8000468:	40020000 	.word	0x40020000
 800046c:	40020020 	.word	0x40020020
 8000470:	40021000 	.word	0x40021000
 8000474:	40021004 	.word	0x40021004
 8000478:	40021014 	.word	0x40021014
 800047c:	40013000 	.word	0x40013000

08000480 <spi_ss_enable>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_ss_enable() {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
	uint32_t volatile* const GPIOE_ODR = (uint32_t*)(0x40021000 + 0x14);
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <spi_ss_enable+0x24>)
 8000488:	607b      	str	r3, [r7, #4]
	*GPIOE_ODR &= ~(1 << 3);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f023 0208 	bic.w	r2, r3, #8
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40021014 	.word	0x40021014

080004a8 <spi_ss_disable>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_ss_disable() {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
	uint32_t volatile* const GPIOE_ODR = (uint32_t*)(0x40021000 + 0x14);
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <spi_ss_disable+0x24>)
 80004b0:	607b      	str	r3, [r7, #4]
	*GPIOE_ODR |= (1 << 3);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f043 0208 	orr.w	r2, r3, #8
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	601a      	str	r2, [r3, #0]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40021014 	.word	0x40021014

080004d0 <spi_send_data>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_send_data(uint8_t data) {
 80004d0:	b480      	push	{r7}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	uint32_t volatile* const SPI1_SR   = (uint32_t*)(0x40013000 + 0x08);
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <spi_send_data+0x48>)
 80004dc:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const SPI1_DR   = (uint32_t*)(0x40013000 + 0x0c);
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <spi_send_data+0x4c>)
 80004e0:	613b      	str	r3, [r7, #16]
	uint8_t tmp;


	//check TXE
	while (0 == ((*SPI1_SR >> 1) & 1));
 80004e2:	bf00      	nop
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	085b      	lsrs	r3, r3, #1
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f8      	beq.n	80004e4 <spi_send_data+0x14>
	//send data
	*SPI1_DR = (uint32_t)data;
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	601a      	str	r2, [r3, #0]
	//*SPI1_DR = ((uint32_t)data << 8)|0xFF;
	//check RXNE
	while (0 == ((*SPI1_SR >> 0) & 1));
 80004f8:	bf00      	nop
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <spi_send_data+0x2a>
	//clear trash
	tmp = (uint8_t)*SPI1_DR;
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	73fb      	strb	r3, [r7, #15]
}
 800050c:	bf00      	nop
 800050e:	371c      	adds	r7, #28
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40013008 	.word	0x40013008
 800051c:	4001300c 	.word	0x4001300c

08000520 <spi_receive_data>:
 *\param[in]
 *\param[out]
 *\retval
 */
uint8_t
spi_receive_data() {
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
	uint32_t volatile* const SPI1_SR   = (uint32_t*)(0x40013000 + 0x08);
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <spi_receive_data+0x48>)
 8000528:	60fb      	str	r3, [r7, #12]
	uint32_t volatile* const SPI1_DR   = (uint32_t*)(0x40013000 + 0x0c);
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <spi_receive_data+0x4c>)
 800052c:	60bb      	str	r3, [r7, #8]
	uint8_t data;

	//check TXE
	while (0 == ((*SPI1_SR >> 1) & 1));
 800052e:	bf00      	nop
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	085b      	lsrs	r3, r3, #1
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f8      	beq.n	8000530 <spi_receive_data+0x10>
	//send trash to create master clock
	*SPI1_DR = 0xFFFF;
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000544:	601a      	str	r2, [r3, #0]
	//check RXNE
	while (0 == ((*SPI1_SR >> 0) & 1));
 8000546:	bf00      	nop
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f9      	beq.n	8000548 <spi_receive_data+0x28>
	//read data from slave
	data = (uint8_t)*SPI1_DR;
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	71fb      	strb	r3, [r7, #7]

	return data;
 800055a:	79fb      	ldrb	r3, [r7, #7]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40013008 	.word	0x40013008
 800056c:	4001300c 	.word	0x4001300c

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f83e 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <SystemInit+0x20>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <SystemInit+0x20>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000612:	f7ff ffd7 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f000 f825 	bl	8000664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f7ff fddd 	bl	80001d8 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800062c:	080006e8 	.word	0x080006e8
  ldr r2, =_sbss
 8000630:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000634:	20000030 	.word	0x20000030

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x20>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_IncTick+0x24>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <HAL_IncTick+0x24>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000
 8000660:	2000002c 	.word	0x2000002c

08000664 <__libc_init_array>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	4d0d      	ldr	r5, [pc, #52]	; (800069c <__libc_init_array+0x38>)
 8000668:	4c0d      	ldr	r4, [pc, #52]	; (80006a0 <__libc_init_array+0x3c>)
 800066a:	1b64      	subs	r4, r4, r5
 800066c:	10a4      	asrs	r4, r4, #2
 800066e:	2600      	movs	r6, #0
 8000670:	42a6      	cmp	r6, r4
 8000672:	d109      	bne.n	8000688 <__libc_init_array+0x24>
 8000674:	4d0b      	ldr	r5, [pc, #44]	; (80006a4 <__libc_init_array+0x40>)
 8000676:	4c0c      	ldr	r4, [pc, #48]	; (80006a8 <__libc_init_array+0x44>)
 8000678:	f000 f826 	bl	80006c8 <_init>
 800067c:	1b64      	subs	r4, r4, r5
 800067e:	10a4      	asrs	r4, r4, #2
 8000680:	2600      	movs	r6, #0
 8000682:	42a6      	cmp	r6, r4
 8000684:	d105      	bne.n	8000692 <__libc_init_array+0x2e>
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f855 3b04 	ldr.w	r3, [r5], #4
 800068c:	4798      	blx	r3
 800068e:	3601      	adds	r6, #1
 8000690:	e7ee      	b.n	8000670 <__libc_init_array+0xc>
 8000692:	f855 3b04 	ldr.w	r3, [r5], #4
 8000696:	4798      	blx	r3
 8000698:	3601      	adds	r6, #1
 800069a:	e7f2      	b.n	8000682 <__libc_init_array+0x1e>
 800069c:	080006e0 	.word	0x080006e0
 80006a0:	080006e0 	.word	0x080006e0
 80006a4:	080006e0 	.word	0x080006e0
 80006a8:	080006e4 	.word	0x080006e4

080006ac <memcpy>:
 80006ac:	440a      	add	r2, r1
 80006ae:	4291      	cmp	r1, r2
 80006b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b4:	d100      	bne.n	80006b8 <memcpy+0xc>
 80006b6:	4770      	bx	lr
 80006b8:	b510      	push	{r4, lr}
 80006ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80006be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80006c2:	4291      	cmp	r1, r2
 80006c4:	d1f9      	bne.n	80006ba <memcpy+0xe>
 80006c6:	bd10      	pop	{r4, pc}

080006c8 <_init>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr

080006d4 <_fini>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr
