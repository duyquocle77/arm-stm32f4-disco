
tim-input-capture-pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f88  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002120  08002120  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002120  08002120  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002120  08002120  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002120  08002120  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002128  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000004  0800212c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  0800212c  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ebe  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ee  00000000  00000000  00027ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  000293e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  00029a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001616d  00000000  00000000  0002a008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dea  00000000  00000000  00040175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad8d  00000000  00000000  00048f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3cec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d0  00000000  00000000  000d3d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002108 	.word	0x08002108

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08002108 	.word	0x08002108

080001d8 <main>:
uint32_t time;
uint32_t cnt;
uint32_t duty;

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	vectortable_move();
 80001de:	f000 f82d 	bl	800023c <vectortable_move>

	tim4_pwm_ch1_start(1000, 1600, 30);
 80001e2:	221e      	movs	r2, #30
 80001e4:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80001e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ec:	f000 f842 	bl	8000274 <tim4_pwm_ch1_start>
	tim1_ic_ch1_init();
 80001f0:	f000 f8dc 	bl	80003ac <tim1_ic_ch1_init>

	volatile uint32_t *const TIM1_CCR1   = (uint32_t *)(0x40010000 + 0x34);
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <main+0x50>)
 80001f6:	607b      	str	r3, [r7, #4]
	volatile uint32_t *const TIM1_CCR2   = (uint32_t *)(0x40010000 + 0x38);
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <main+0x54>)
 80001fa:	603b      	str	r3, [r7, #0]

	while (1)
	{
		time  = *TIM1_CCR1 + 1;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	3301      	adds	r3, #1
 8000202:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <main+0x58>)
 8000204:	6013      	str	r3, [r2, #0]
		cnt   = *TIM1_CCR2 + 1;
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	3301      	adds	r3, #1
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <main+0x5c>)
 800020e:	6013      	str	r3, [r2, #0]
		duty = cnt * 100 / time;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <main+0x5c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2264      	movs	r2, #100	; 0x64
 8000216:	fb03 f202 	mul.w	r2, r3, r2
 800021a:	4b05      	ldr	r3, [pc, #20]	; (8000230 <main+0x58>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4a05      	ldr	r2, [pc, #20]	; (8000238 <main+0x60>)
 8000224:	6013      	str	r3, [r2, #0]
		time  = *TIM1_CCR1 + 1;
 8000226:	e7e9      	b.n	80001fc <main+0x24>
 8000228:	40010034 	.word	0x40010034
 800022c:	40010038 	.word	0x40010038
 8000230:	20000020 	.word	0x20000020
 8000234:	20000024 	.word	0x20000024
 8000238:	20000028 	.word	0x20000028

0800023c <vectortable_move>:
 * @brief	: move vector table from FLASH to RAM
 * @param	: None
 * @retval	: None
 */
void vectortable_move()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	/*
	 * size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198
	 * */
	/* move vector table from flash to ram */
	void *volatile dst = (void *)0x20000000;	// RAM_address
 8000242:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000246:	60bb      	str	r3, [r7, #8]
	void *volatile src = (void *)0x08000000;	// FLASH_address
 8000248:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800024c:	607b      	str	r3, [r7, #4]
	memcpy(dst, src, 0x198);
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000256:	4618      	mov	r0, r3
 8000258:	f001 ff48 	bl	80020ec <memcpy>

	/**/
	uint32_t volatile *const VTOR = (uint32_t *)(0xE000ED08);
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <vectortable_move+0x34>)
 800025e:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000266:	601a      	str	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	e000ed08 	.word	0xe000ed08

08000274 <tim4_pwm_ch1_start>:
	/*disable the counter*/
	*SYS_CSR &= ~(1 << 0);
}

void tim4_pwm_ch1_start(uint16_t prescaler, uint16_t count, uint8_t duty_cycle)
{
 8000274:	b480      	push	{r7}
 8000276:	b08d      	sub	sp, #52	; 0x34
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	80fb      	strh	r3, [r7, #6]
 800027e:	460b      	mov	r3, r1
 8000280:	80bb      	strh	r3, [r7, #4]
 8000282:	4613      	mov	r3, r2
 8000284:	70fb      	strb	r3, [r7, #3]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	4b3e      	ldr	r3, [pc, #248]	; (8000384 <tim4_pwm_ch1_start+0x110>)
 800028c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028e:	4a3d      	ldr	r2, [pc, #244]	; (8000384 <tim4_pwm_ch1_start+0x110>)
 8000290:	f043 0308 	orr.w	r3, r3, #8
 8000294:	6313      	str	r3, [r2, #48]	; 0x30
 8000296:	4b3b      	ldr	r3, [pc, #236]	; (8000384 <tim4_pwm_ch1_start+0x110>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	f003 0308 	and.w	r3, r3, #8
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM4_CLK_ENABLE();
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	4b37      	ldr	r3, [pc, #220]	; (8000384 <tim4_pwm_ch1_start+0x110>)
 80002a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002aa:	4a36      	ldr	r2, [pc, #216]	; (8000384 <tim4_pwm_ch1_start+0x110>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6413      	str	r3, [r2, #64]	; 0x40
 80002b2:	4b34      	ldr	r3, [pc, #208]	; (8000384 <tim4_pwm_ch1_start+0x110>)
 80002b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]

	volatile uint32_t *const GPIOD_MODER = (uint32_t *)(0x40020c00 + 0x00);
 80002be:	4b32      	ldr	r3, [pc, #200]	; (8000388 <tim4_pwm_ch1_start+0x114>)
 80002c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint32_t *const GPIOD_AFRH  = (uint32_t *)(0x40020c00 + 0x24);
 80002c2:	4b32      	ldr	r3, [pc, #200]	; (800038c <tim4_pwm_ch1_start+0x118>)
 80002c4:	62bb      	str	r3, [r7, #40]	; 0x28
	volatile uint32_t *const TIM4_CR1    = (uint32_t *)(0x40000800 + 0x00);
 80002c6:	4b32      	ldr	r3, [pc, #200]	; (8000390 <tim4_pwm_ch1_start+0x11c>)
 80002c8:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t *const TIM4_CCMR1  = (uint32_t *)(0x40000800 + 0x18);
 80002ca:	4b32      	ldr	r3, [pc, #200]	; (8000394 <tim4_pwm_ch1_start+0x120>)
 80002cc:	623b      	str	r3, [r7, #32]
	volatile uint32_t *const TIM4_CCER   = (uint32_t *)(0x40000800 + 0x20);
 80002ce:	4b32      	ldr	r3, [pc, #200]	; (8000398 <tim4_pwm_ch1_start+0x124>)
 80002d0:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *const TIM4_PCR    = (uint32_t *)(0x40000800 + 0x28);
 80002d2:	4b32      	ldr	r3, [pc, #200]	; (800039c <tim4_pwm_ch1_start+0x128>)
 80002d4:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *const TIM4_ARR    = (uint32_t *)(0x40000800 + 0x2c);
 80002d6:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <tim4_pwm_ch1_start+0x12c>)
 80002d8:	617b      	str	r3, [r7, #20]
	volatile uint32_t *const TIM4_CCR1   = (uint32_t *)(0x40000800 + 0x34);
 80002da:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <tim4_pwm_ch1_start+0x130>)
 80002dc:	613b      	str	r3, [r7, #16]

	/*alternate mode*/
	*GPIOD_MODER &= ~(0b11 << (2 * 12));
 80002de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80002e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e8:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |=  (0b10 << (2 * 12));
 80002ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80002f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002f4:	601a      	str	r2, [r3, #0]

	/*alternate function 2*/
	*GPIOD_AFRH &= ~(0b1111 << (4 * 4));
 80002f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80002fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000300:	601a      	str	r2, [r3, #0]
	*GPIOD_AFRH |=  (2 << (4 * 4));
 8000302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800030a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800030c:	601a      	str	r2, [r3, #0]

	*TIM4_ARR = count - 1;							/*set count*/
 800030e:	88bb      	ldrh	r3, [r7, #4]
 8000310:	3b01      	subs	r3, #1
 8000312:	461a      	mov	r2, r3
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	601a      	str	r2, [r3, #0]
	*TIM4_PCR = prescaler - 1;						/*set prescaler*/
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	3b01      	subs	r3, #1
 800031c:	461a      	mov	r2, r3
 800031e:	69bb      	ldr	r3, [r7, #24]
 8000320:	601a      	str	r2, [r3, #0]

	*TIM4_CCR1 = (duty_cycle * (*TIM4_ARR + 1)) / 100;	/*set duty cycle*/
 8000322:	78fb      	ldrb	r3, [r7, #3]
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	6812      	ldr	r2, [r2, #0]
 8000328:	3201      	adds	r2, #1
 800032a:	fb02 f303 	mul.w	r3, r2, r3
 800032e:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <tim4_pwm_ch1_start+0x134>)
 8000330:	fba2 2303 	umull	r2, r3, r2, r3
 8000334:	095a      	lsrs	r2, r3, #5
 8000336:	693b      	ldr	r3, [r7, #16]
 8000338:	601a      	str	r2, [r3, #0]

	/*up-counter mode*/
	*TIM4_CR1 &= ~(1 << 4);
 800033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f023 0210 	bic.w	r2, r3, #16
 8000342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000344:	601a      	str	r2, [r3, #0]

	/*pwm mode 1: CNT < CCR1 -> active*/
	*TIM4_CCMR1 &= ~(0b111<<4);
 8000346:	6a3b      	ldr	r3, [r7, #32]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800034e:	6a3b      	ldr	r3, [r7, #32]
 8000350:	601a      	str	r2, [r3, #0]
	*TIM4_CCMR1 |= (0b11 << 5);
 8000352:	6a3b      	ldr	r3, [r7, #32]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800035a:	6a3b      	ldr	r3, [r7, #32]
 800035c:	601a      	str	r2, [r3, #0]

	*TIM4_CCER |= (1 << 0);						/*enable OC1 chanel 1*/
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f043 0201 	orr.w	r2, r3, #1
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	601a      	str	r2, [r3, #0]
	*TIM4_CR1  |= (1 << 0);						/*enable counter */
 800036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f043 0201 	orr.w	r2, r3, #1
 8000372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	3734      	adds	r7, #52	; 0x34
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40023800 	.word	0x40023800
 8000388:	40020c00 	.word	0x40020c00
 800038c:	40020c24 	.word	0x40020c24
 8000390:	40000800 	.word	0x40000800
 8000394:	40000818 	.word	0x40000818
 8000398:	40000820 	.word	0x40000820
 800039c:	40000828 	.word	0x40000828
 80003a0:	4000082c 	.word	0x4000082c
 80003a4:	40000834 	.word	0x40000834
 80003a8:	51eb851f 	.word	0x51eb851f

080003ac <tim1_ic_ch1_init>:

	__HAL_RCC_TIM4_CLK_DISABLE();
}

void tim1_ic_ch1_init()
{
 80003ac:	b480      	push	{r7}
 80003ae:	b08b      	sub	sp, #44	; 0x2c
 80003b0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	4b51      	ldr	r3, [pc, #324]	; (80004fc <tim1_ic_ch1_init+0x150>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a50      	ldr	r2, [pc, #320]	; (80004fc <tim1_ic_ch1_init+0x150>)
 80003bc:	f043 0310 	orr.w	r3, r3, #16
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
 80003c2:	4b4e      	ldr	r3, [pc, #312]	; (80004fc <tim1_ic_ch1_init+0x150>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	f003 0310 	and.w	r3, r3, #16
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM1_CLK_ENABLE();
 80003ce:	2300      	movs	r3, #0
 80003d0:	603b      	str	r3, [r7, #0]
 80003d2:	4b4a      	ldr	r3, [pc, #296]	; (80004fc <tim1_ic_ch1_init+0x150>)
 80003d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d6:	4a49      	ldr	r2, [pc, #292]	; (80004fc <tim1_ic_ch1_init+0x150>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6453      	str	r3, [r2, #68]	; 0x44
 80003de:	4b47      	ldr	r3, [pc, #284]	; (80004fc <tim1_ic_ch1_init+0x150>)
 80003e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]

	volatile uint32_t *const GPIOE_MODER = (uint32_t *)(0x40021000 + 0x00);
 80003ea:	4b45      	ldr	r3, [pc, #276]	; (8000500 <tim1_ic_ch1_init+0x154>)
 80003ec:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t *const GPIOE_AFRH  = (uint32_t *)(0x40021000 + 0x24);
 80003ee:	4b45      	ldr	r3, [pc, #276]	; (8000504 <tim1_ic_ch1_init+0x158>)
 80003f0:	623b      	str	r3, [r7, #32]
	volatile uint32_t *const TIM1_CR1    = (uint32_t *)(0x40010000 + 0x00);
 80003f2:	4b45      	ldr	r3, [pc, #276]	; (8000508 <tim1_ic_ch1_init+0x15c>)
 80003f4:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *const TIM1_SMCR   = (uint32_t *)(0x40010000 + 0x08);
 80003f6:	4b45      	ldr	r3, [pc, #276]	; (800050c <tim1_ic_ch1_init+0x160>)
 80003f8:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *const TIM1_CCMR1  = (uint32_t *)(0x40010000 + 0x18);
 80003fa:	4b45      	ldr	r3, [pc, #276]	; (8000510 <tim1_ic_ch1_init+0x164>)
 80003fc:	617b      	str	r3, [r7, #20]
	volatile uint32_t *const TIM1_CCER   = (uint32_t *)(0x40010000 + 0x20);
 80003fe:	4b45      	ldr	r3, [pc, #276]	; (8000514 <tim1_ic_ch1_init+0x168>)
 8000400:	613b      	str	r3, [r7, #16]
	volatile uint32_t *const TIM1_ARR    = (uint32_t *)(0x40010000 + 0x2c);
 8000402:	4b45      	ldr	r3, [pc, #276]	; (8000518 <tim1_ic_ch1_init+0x16c>)
 8000404:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *const TIM1_PCR    = (uint32_t *)(0x40010000 + 0x28);
 8000406:	4b45      	ldr	r3, [pc, #276]	; (800051c <tim1_ic_ch1_init+0x170>)
 8000408:	60bb      	str	r3, [r7, #8]


	/*alternate mode*/
	*GPIOE_MODER &= ~((0b11 << (2 * 9)) | (0b11 << (2 * 11)));
 800040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f423 024c 	bic.w	r2, r3, #13369344	; 0xcc0000
 8000412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000414:	601a      	str	r2, [r3, #0]
	*GPIOE_MODER |=   (0b10 << (2 * 9)) | (0b11 << (2 * 11));
 8000416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f443 0248 	orr.w	r2, r3, #13107200	; 0xc80000
 800041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000420:	601a      	str	r2, [r3, #0]

	/*alternate function 1*/
	*GPIOE_AFRH &= ~((0b1111 << (4 * (9 - 8))) | (0b1111 << (4 * (11 - 8))));
 8000422:	6a3b      	ldr	r3, [r7, #32]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800042a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800042e:	6a3a      	ldr	r2, [r7, #32]
 8000430:	6013      	str	r3, [r2, #0]
	*GPIOE_AFRH |=   (1 << (4 * (9 - 8))) | (1 << (4 * (11 - 8)));
 8000432:	6a3b      	ldr	r3, [r7, #32]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6a3a      	ldr	r2, [r7, #32]
 8000440:	6013      	str	r3, [r2, #0]

	*TIM1_ARR = 0xFFFF;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000448:	601a      	str	r2, [r3, #0]
	*TIM1_PCR = 16000 - 1;
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000450:	601a      	str	r2, [r3, #0]

	/*select TRGI as TI1*/
	*TIM1_SMCR &= ~(0b111<<4);
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800045a:	69bb      	ldr	r3, [r7, #24]
 800045c:	601a      	str	r2, [r3, #0]
	*TIM1_SMCR |=  (0b101<<4);
 800045e:	69bb      	ldr	r3, [r7, #24]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	601a      	str	r2, [r3, #0]

	/*slave mode as Reset mode*/
	*TIM1_SMCR &= ~(0b111<<0);
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f023 0207 	bic.w	r2, r3, #7
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	601a      	str	r2, [r3, #0]
	*TIM1_SMCR |=  (0b100<<0);
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f043 0204 	orr.w	r2, r3, #4
 800047e:	69bb      	ldr	r3, [r7, #24]
 8000480:	601a      	str	r2, [r3, #0]

	/*IC1 mapped on TI1*/
	*TIM1_CCMR1 &= ~(0b11<<0);
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f023 0203 	bic.w	r2, r3, #3
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	601a      	str	r2, [r3, #0]
	*TIM1_CCMR1 |=  (0b01<<0);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f043 0201 	orr.w	r2, r3, #1
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	601a      	str	r2, [r3, #0]

	/*capture rising-edge*/
	*TIM1_CCER &= ~((1 << 1) | (1 << 3));
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f023 020a 	bic.w	r2, r3, #10
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	601a      	str	r2, [r3, #0]

	/*IC2 mapped on TI1*/
	*TIM1_CCMR1 &= ~(0b11<<8);
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	601a      	str	r2, [r3, #0]
	*TIM1_CCMR1 |=  (0b10<<8);
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	601a      	str	r2, [r3, #0]

	/*capture falling-edge*/
	*TIM1_CCER &= ~(1<<7);
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	601a      	str	r2, [r3, #0]
	*TIM1_CCER |=  (1<<5);
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f043 0220 	orr.w	r2, r3, #32
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	601a      	str	r2, [r3, #0]

	/*enable CC1 chanel 1*/
	*TIM1_CCER |= (1 << 0) | (1 << 4);
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f043 0211 	orr.w	r2, r3, #17
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	601a      	str	r2, [r3, #0]

	/*start count*/
	*TIM1_CR1 |= (1 << 0);
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f043 0201 	orr.w	r2, r3, #1
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	601a      	str	r2, [r3, #0]
}
 80004ee:	bf00      	nop
 80004f0:	372c      	adds	r7, #44	; 0x2c
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800
 8000500:	40021000 	.word	0x40021000
 8000504:	40021024 	.word	0x40021024
 8000508:	40010000 	.word	0x40010000
 800050c:	40010008 	.word	0x40010008
 8000510:	40010018 	.word	0x40010018
 8000514:	40010020 	.word	0x40010020
 8000518:	4001002c 	.word	0x4001002c
 800051c:	40010028 	.word	0x40010028

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <NMI_Handler+0x4>

08000526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <HardFault_Handler+0x4>

0800052c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <MemManage_Handler+0x4>

08000532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <UsageFault_Handler+0x4>

0800053e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056c:	f000 f848 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <OTG_FS_IRQHandler+0x10>)
 800057a:	f000 f855 	bl	8000628 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000030 	.word	0x20000030

08000588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <SystemInit+0x20>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <SystemInit+0x20>)
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005b2:	490e      	ldr	r1, [pc, #56]	; (80005ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005c8:	4c0b      	ldr	r4, [pc, #44]	; (80005f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005d6:	f7ff ffd7 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005da:	f001 fd63 	bl	80020a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005de:	f7ff fdfb 	bl	80001d8 <main>
  bx  lr    
 80005e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005f0:	08002128 	.word	0x08002128
  ldr r2, =_sbss
 80005f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005f8:	20000334 	.word	0x20000334

080005fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC_IRQHandler>
	...

08000600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_IncTick+0x20>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x24>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_IncTick+0x24>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000000 	.word	0x20000000
 8000624:	2000002c 	.word	0x2000002c

08000628 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fa0f 	bl	8001a62 <USB_GetMode>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	f040 80f6 	bne.w	8000838 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f001 f9f3 	bl	8001a3c <USB_ReadInterrupts>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	f000 80ec 	beq.w	8000836 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f001 f9ea 	bl	8001a3c <USB_ReadInterrupts>
 8000668:	4603      	mov	r3, r0
 800066a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000672:	d104      	bne.n	800067e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800067c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f001 f9da 	bl	8001a3c <USB_ReadInterrupts>
 8000688:	4603      	mov	r3, r0
 800068a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800068e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000692:	d104      	bne.n	800069e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800069c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f9ca 	bl	8001a3c <USB_ReadInterrupts>
 80006a8:	4603      	mov	r3, r0
 80006aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006b2:	d104      	bne.n	80006be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80006bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f9ba 	bl	8001a3c <USB_ReadInterrupts>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d103      	bne.n	80006da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2202      	movs	r2, #2
 80006d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f9ac 	bl	8001a3c <USB_ReadInterrupts>
 80006e4:	4603      	mov	r3, r0
 80006e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ee:	d11c      	bne.n	800072a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80006f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10f      	bne.n	800072a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800070a:	2110      	movs	r1, #16
 800070c:	6938      	ldr	r0, [r7, #16]
 800070e:	f001 f8d9 	bl	80018c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000712:	6938      	ldr	r0, [r7, #16]
 8000714:	f001 f90a 	bl	800192c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f9ad 	bl	8001a7e <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f001 fc3e 	bl	8001fa6 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f984 	bl	8001a3c <USB_ReadInterrupts>
 8000734:	4603      	mov	r3, r0
 8000736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800073a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800073e:	d102      	bne.n	8000746 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f001 f829 	bl	8001798 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f976 	bl	8001a3c <USB_ReadInterrupts>
 8000750:	4603      	mov	r3, r0
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	2b08      	cmp	r3, #8
 8000758:	d106      	bne.n	8000768 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f001 fc07 	bl	8001f6e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2208      	movs	r2, #8
 8000766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f965 	bl	8001a3c <USB_ReadInterrupts>
 8000772:	4603      	mov	r3, r0
 8000774:	f003 0310 	and.w	r3, r3, #16
 8000778:	2b10      	cmp	r3, #16
 800077a:	d101      	bne.n	8000780 <HAL_HCD_IRQHandler+0x158>
 800077c:	2301      	movs	r3, #1
 800077e:	e000      	b.n	8000782 <HAL_HCD_IRQHandler+0x15a>
 8000780:	2300      	movs	r3, #0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d012      	beq.n	80007ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f022 0210 	bic.w	r2, r2, #16
 8000794:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 ff2c 	bl	80015f4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	699a      	ldr	r2, [r3, #24]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f042 0210 	orr.w	r2, r2, #16
 80007aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f943 	bl	8001a3c <USB_ReadInterrupts>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007c0:	d13a      	bne.n	8000838 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 f993 	bl	8001af2 <USB_HC_ReadInterrupt>
 80007cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	e025      	b.n	8000820 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	fa22 f303 	lsr.w	r3, r2, r3
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d018      	beq.n	800081a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	015a      	lsls	r2, r3, #5
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007fe:	d106      	bne.n	800080e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 f836 	bl	8000878 <HCD_HC_IN_IRQHandler>
 800080c:	e005      	b.n	800081a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 fb84 	bl	8000f22 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	429a      	cmp	r2, r3
 8000828:	d3d4      	bcc.n	80007d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	e000      	b.n	8000838 <HAL_HCD_IRQHandler+0x210>
      return;
 8000836:	bf00      	nop
    }
  }
}
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800084c:	2b01      	cmp	r3, #1
 800084e:	d101      	bne.n	8000854 <HAL_HCD_Stop+0x16>
 8000850:	2302      	movs	r3, #2
 8000852:	e00d      	b.n	8000870 <HAL_HCD_Stop+0x32>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2201      	movs	r2, #1
 8000858:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fa53 	bl	8001d0c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	015a      	lsls	r2, r3, #5
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	4413      	add	r3, r2
 800089a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d11a      	bne.n	80008de <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	4413      	add	r3, r2
 80008b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008b4:	461a      	mov	r2, r3
 80008b6:	2304      	movs	r3, #4
 80008b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	212c      	movs	r1, #44	; 0x2c
 80008c0:	fb01 f303 	mul.w	r3, r1, r3
 80008c4:	4413      	add	r3, r2
 80008c6:	3361      	adds	r3, #97	; 0x61
 80008c8:	2206      	movs	r2, #6
 80008ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 f91c 	bl	8001b14 <USB_HC_Halt>
 80008dc:	e0af      	b.n	8000a3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	015a      	lsls	r2, r3, #5
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	4413      	add	r3, r2
 80008e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f4:	d11b      	bne.n	800092e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	015a      	lsls	r2, r3, #5
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	4413      	add	r3, r2
 80008fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000902:	461a      	mov	r2, r3
 8000904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000908:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	212c      	movs	r1, #44	; 0x2c
 8000910:	fb01 f303 	mul.w	r3, r1, r3
 8000914:	4413      	add	r3, r2
 8000916:	3361      	adds	r3, #97	; 0x61
 8000918:	2207      	movs	r2, #7
 800091a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f001 f8f4 	bl	8001b14 <USB_HC_Halt>
 800092c:	e087      	b.n	8000a3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	015a      	lsls	r2, r3, #5
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4413      	add	r3, r2
 8000936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f003 0320 	and.w	r3, r3, #32
 8000940:	2b20      	cmp	r3, #32
 8000942:	d109      	bne.n	8000958 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	015a      	lsls	r2, r3, #5
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	4413      	add	r3, r2
 800094c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000950:	461a      	mov	r2, r3
 8000952:	2320      	movs	r3, #32
 8000954:	6093      	str	r3, [r2, #8]
 8000956:	e072      	b.n	8000a3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	015a      	lsls	r2, r3, #5
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	4413      	add	r3, r2
 8000960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	2b08      	cmp	r3, #8
 800096c:	d11a      	bne.n	80009a4 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	015a      	lsls	r2, r3, #5
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	4413      	add	r3, r2
 8000976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800097a:	461a      	mov	r2, r3
 800097c:	2308      	movs	r3, #8
 800097e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	212c      	movs	r1, #44	; 0x2c
 8000986:	fb01 f303 	mul.w	r3, r1, r3
 800098a:	4413      	add	r3, r2
 800098c:	3361      	adds	r3, #97	; 0x61
 800098e:	2205      	movs	r2, #5
 8000990:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f001 f8b9 	bl	8001b14 <USB_HC_Halt>
 80009a2:	e04c      	b.n	8000a3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	015a      	lsls	r2, r3, #5
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4413      	add	r3, r2
 80009ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009ba:	d11b      	bne.n	80009f4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	015a      	lsls	r2, r3, #5
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4413      	add	r3, r2
 80009c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80009c8:	461a      	mov	r2, r3
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	212c      	movs	r1, #44	; 0x2c
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	4413      	add	r3, r2
 80009dc:	3361      	adds	r3, #97	; 0x61
 80009de:	2208      	movs	r2, #8
 80009e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 f891 	bl	8001b14 <USB_HC_Halt>
 80009f2:	e024      	b.n	8000a3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	015a      	lsls	r2, r3, #5
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4413      	add	r3, r2
 80009fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	2b80      	cmp	r3, #128	; 0x80
 8000a08:	d119      	bne.n	8000a3e <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	015a      	lsls	r2, r3, #5
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	4413      	add	r3, r2
 8000a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a16:	461a      	mov	r2, r3
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	212c      	movs	r1, #44	; 0x2c
 8000a22:	fb01 f303 	mul.w	r3, r1, r3
 8000a26:	4413      	add	r3, r2
 8000a28:	3361      	adds	r3, #97	; 0x61
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 f86b 	bl	8001b14 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	015a      	lsls	r2, r3, #5
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4413      	add	r3, r2
 8000a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a54:	d112      	bne.n	8000a7c <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f857 	bl	8001b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	015a      	lsls	r2, r3, #5
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a72:	461a      	mov	r2, r3
 8000a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a78:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000a7a:	e24e      	b.n	8000f1a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	015a      	lsls	r2, r3, #5
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4413      	add	r3, r2
 8000a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	f040 80df 	bne.w	8000c52 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d019      	beq.n	8000ad0 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	212c      	movs	r1, #44	; 0x2c
 8000aa2:	fb01 f303 	mul.w	r3, r1, r3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3348      	adds	r3, #72	; 0x48
 8000aaa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	0159      	lsls	r1, r3, #5
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000abe:	1ad2      	subs	r2, r2, r3
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	202c      	movs	r0, #44	; 0x2c
 8000ac6:	fb00 f303 	mul.w	r3, r0, r3
 8000aca:	440b      	add	r3, r1
 8000acc:	3350      	adds	r3, #80	; 0x50
 8000ace:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	212c      	movs	r1, #44	; 0x2c
 8000ad6:	fb01 f303 	mul.w	r3, r1, r3
 8000ada:	4413      	add	r3, r2
 8000adc:	3361      	adds	r3, #97	; 0x61
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	212c      	movs	r1, #44	; 0x2c
 8000ae8:	fb01 f303 	mul.w	r3, r1, r3
 8000aec:	4413      	add	r3, r2
 8000aee:	335c      	adds	r3, #92	; 0x5c
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	015a      	lsls	r2, r3, #5
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4413      	add	r3, r2
 8000afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b00:	461a      	mov	r2, r3
 8000b02:	2301      	movs	r3, #1
 8000b04:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	212c      	movs	r1, #44	; 0x2c
 8000b0c:	fb01 f303 	mul.w	r3, r1, r3
 8000b10:	4413      	add	r3, r2
 8000b12:	333f      	adds	r3, #63	; 0x3f
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d009      	beq.n	8000b2e <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	212c      	movs	r1, #44	; 0x2c
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	4413      	add	r3, r2
 8000b26:	333f      	adds	r3, #63	; 0x3f
 8000b28:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d111      	bne.n	8000b52 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 ffeb 	bl	8001b14 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	015a      	lsls	r2, r3, #5
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4413      	add	r3, r2
 8000b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	6093      	str	r3, [r2, #8]
 8000b50:	e03a      	b.n	8000bc8 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	212c      	movs	r1, #44	; 0x2c
 8000b58:	fb01 f303 	mul.w	r3, r1, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	333f      	adds	r3, #63	; 0x3f
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d009      	beq.n	8000b7a <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	212c      	movs	r1, #44	; 0x2c
 8000b6c:	fb01 f303 	mul.w	r3, r1, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	333f      	adds	r3, #63	; 0x3f
 8000b74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d126      	bne.n	8000bc8 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	015a      	lsls	r2, r3, #5
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4413      	add	r3, r2
 8000b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	0151      	lsls	r1, r2, #5
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	440a      	add	r2, r1
 8000b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b98:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	212c      	movs	r1, #44	; 0x2c
 8000ba0:	fb01 f303 	mul.w	r3, r1, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3360      	adds	r3, #96	; 0x60
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	b2d9      	uxtb	r1, r3
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	202c      	movs	r0, #44	; 0x2c
 8000bb6:	fb00 f303 	mul.w	r3, r0, r3
 8000bba:	4413      	add	r3, r2
 8000bbc:	3360      	adds	r3, #96	; 0x60
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f001 f9fd 	bl	8001fc2 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d12b      	bne.n	8000c28 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	212c      	movs	r1, #44	; 0x2c
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	3348      	adds	r3, #72	; 0x48
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	202c      	movs	r0, #44	; 0x2c
 8000be6:	fb00 f202 	mul.w	r2, r0, r2
 8000bea:	440a      	add	r2, r1
 8000bec:	3240      	adds	r2, #64	; 0x40
 8000bee:	8812      	ldrh	r2, [r2, #0]
 8000bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 818e 	beq.w	8000f1a <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	212c      	movs	r1, #44	; 0x2c
 8000c04:	fb01 f303 	mul.w	r3, r1, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	3354      	adds	r3, #84	; 0x54
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f083 0301 	eor.w	r3, r3, #1
 8000c12:	b2d8      	uxtb	r0, r3
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	212c      	movs	r1, #44	; 0x2c
 8000c1a:	fb01 f303 	mul.w	r3, r1, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	3354      	adds	r3, #84	; 0x54
 8000c22:	4602      	mov	r2, r0
 8000c24:	701a      	strb	r2, [r3, #0]
}
 8000c26:	e178      	b.n	8000f1a <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	212c      	movs	r1, #44	; 0x2c
 8000c2e:	fb01 f303 	mul.w	r3, r1, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	3354      	adds	r3, #84	; 0x54
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	f083 0301 	eor.w	r3, r3, #1
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	212c      	movs	r1, #44	; 0x2c
 8000c44:	fb01 f303 	mul.w	r3, r1, r3
 8000c48:	4413      	add	r3, r2
 8000c4a:	3354      	adds	r3, #84	; 0x54
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	701a      	strb	r2, [r3, #0]
}
 8000c50:	e163      	b.n	8000f1a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	015a      	lsls	r2, r3, #5
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4413      	add	r3, r2
 8000c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	f040 80f6 	bne.w	8000e56 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	212c      	movs	r1, #44	; 0x2c
 8000c70:	fb01 f303 	mul.w	r3, r1, r3
 8000c74:	4413      	add	r3, r2
 8000c76:	3361      	adds	r3, #97	; 0x61
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d109      	bne.n	8000c92 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	212c      	movs	r1, #44	; 0x2c
 8000c84:	fb01 f303 	mul.w	r3, r1, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	3360      	adds	r3, #96	; 0x60
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e0c9      	b.n	8000e26 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	212c      	movs	r1, #44	; 0x2c
 8000c98:	fb01 f303 	mul.w	r3, r1, r3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	3361      	adds	r3, #97	; 0x61
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	d109      	bne.n	8000cba <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	212c      	movs	r1, #44	; 0x2c
 8000cac:	fb01 f303 	mul.w	r3, r1, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3360      	adds	r3, #96	; 0x60
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	e0b5      	b.n	8000e26 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	212c      	movs	r1, #44	; 0x2c
 8000cc0:	fb01 f303 	mul.w	r3, r1, r3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3361      	adds	r3, #97	; 0x61
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d009      	beq.n	8000ce2 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	212c      	movs	r1, #44	; 0x2c
 8000cd4:	fb01 f303 	mul.w	r3, r1, r3
 8000cd8:	4413      	add	r3, r2
 8000cda:	3361      	adds	r3, #97	; 0x61
 8000cdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d150      	bne.n	8000d84 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	212c      	movs	r1, #44	; 0x2c
 8000ce8:	fb01 f303 	mul.w	r3, r1, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	335c      	adds	r3, #92	; 0x5c
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	202c      	movs	r0, #44	; 0x2c
 8000cfa:	fb00 f303 	mul.w	r3, r0, r3
 8000cfe:	440b      	add	r3, r1
 8000d00:	335c      	adds	r3, #92	; 0x5c
 8000d02:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	212c      	movs	r1, #44	; 0x2c
 8000d0a:	fb01 f303 	mul.w	r3, r1, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	335c      	adds	r3, #92	; 0x5c
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d912      	bls.n	8000d3e <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	212c      	movs	r1, #44	; 0x2c
 8000d1e:	fb01 f303 	mul.w	r3, r1, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	335c      	adds	r3, #92	; 0x5c
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	212c      	movs	r1, #44	; 0x2c
 8000d30:	fb01 f303 	mul.w	r3, r1, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	3360      	adds	r3, #96	; 0x60
 8000d38:	2204      	movs	r2, #4
 8000d3a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000d3c:	e073      	b.n	8000e26 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	212c      	movs	r1, #44	; 0x2c
 8000d44:	fb01 f303 	mul.w	r3, r1, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	3360      	adds	r3, #96	; 0x60
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4413      	add	r3, r2
 8000d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000d66:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d6e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	015a      	lsls	r2, r3, #5
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4413      	add	r3, r2
 8000d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8000d82:	e050      	b.n	8000e26 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	212c      	movs	r1, #44	; 0x2c
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	3361      	adds	r3, #97	; 0x61
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d122      	bne.n	8000dde <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	212c      	movs	r1, #44	; 0x2c
 8000d9e:	fb01 f303 	mul.w	r3, r1, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	3360      	adds	r3, #96	; 0x60
 8000da6:	2202      	movs	r2, #2
 8000da8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	015a      	lsls	r2, r3, #5
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4413      	add	r3, r2
 8000db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000dc0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dc8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	015a      	lsls	r2, r3, #5
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e023      	b.n	8000e26 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	212c      	movs	r1, #44	; 0x2c
 8000de4:	fb01 f303 	mul.w	r3, r1, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	3361      	adds	r3, #97	; 0x61
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b07      	cmp	r3, #7
 8000df0:	d119      	bne.n	8000e26 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	212c      	movs	r1, #44	; 0x2c
 8000df8:	fb01 f303 	mul.w	r3, r1, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	335c      	adds	r3, #92	; 0x5c
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	202c      	movs	r0, #44	; 0x2c
 8000e0a:	fb00 f303 	mul.w	r3, r0, r3
 8000e0e:	440b      	add	r3, r1
 8000e10:	335c      	adds	r3, #92	; 0x5c
 8000e12:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	212c      	movs	r1, #44	; 0x2c
 8000e1a:	fb01 f303 	mul.w	r3, r1, r3
 8000e1e:	4413      	add	r3, r2
 8000e20:	3360      	adds	r3, #96	; 0x60
 8000e22:	2204      	movs	r2, #4
 8000e24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	015a      	lsls	r2, r3, #5
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e32:	461a      	mov	r2, r3
 8000e34:	2302      	movs	r3, #2
 8000e36:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	b2d9      	uxtb	r1, r3
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	202c      	movs	r0, #44	; 0x2c
 8000e42:	fb00 f303 	mul.w	r3, r0, r3
 8000e46:	4413      	add	r3, r2
 8000e48:	3360      	adds	r3, #96	; 0x60
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f001 f8b7 	bl	8001fc2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8000e54:	e061      	b.n	8000f1a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	015a      	lsls	r2, r3, #5
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	2b10      	cmp	r3, #16
 8000e6a:	d156      	bne.n	8000f1a <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	212c      	movs	r1, #44	; 0x2c
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	4413      	add	r3, r2
 8000e78:	333f      	adds	r3, #63	; 0x3f
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d111      	bne.n	8000ea4 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	212c      	movs	r1, #44	; 0x2c
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	335c      	adds	r3, #92	; 0x5c
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fe39 	bl	8001b14 <USB_HC_Halt>
 8000ea2:	e031      	b.n	8000f08 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	212c      	movs	r1, #44	; 0x2c
 8000eaa:	fb01 f303 	mul.w	r3, r1, r3
 8000eae:	4413      	add	r3, r2
 8000eb0:	333f      	adds	r3, #63	; 0x3f
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d009      	beq.n	8000ecc <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	212c      	movs	r1, #44	; 0x2c
 8000ebe:	fb01 f303 	mul.w	r3, r1, r3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	333f      	adds	r3, #63	; 0x3f
 8000ec6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d11d      	bne.n	8000f08 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	212c      	movs	r1, #44	; 0x2c
 8000ed2:	fb01 f303 	mul.w	r3, r1, r3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	335c      	adds	r3, #92	; 0x5c
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d110      	bne.n	8000f08 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	212c      	movs	r1, #44	; 0x2c
 8000eec:	fb01 f303 	mul.w	r3, r1, r3
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3361      	adds	r3, #97	; 0x61
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fe06 	bl	8001b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	015a      	lsls	r2, r3, #5
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4413      	add	r3, r2
 8000f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f14:	461a      	mov	r2, r3
 8000f16:	2310      	movs	r3, #16
 8000f18:	6093      	str	r3, [r2, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b088      	sub	sp, #32
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	015a      	lsls	r2, r3, #5
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	4413      	add	r3, r2
 8000f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d11a      	bne.n	8000f88 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	015a      	lsls	r2, r3, #5
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4413      	add	r3, r2
 8000f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2304      	movs	r3, #4
 8000f62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	212c      	movs	r1, #44	; 0x2c
 8000f6a:	fb01 f303 	mul.w	r3, r1, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	3361      	adds	r3, #97	; 0x61
 8000f72:	2206      	movs	r2, #6
 8000f74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fdc7 	bl	8001b14 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8000f86:	e331      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	015a      	lsls	r2, r3, #5
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	4413      	add	r3, r2
 8000f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	d12e      	bne.n	8000ffc <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	015a      	lsls	r2, r3, #5
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000faa:	461a      	mov	r2, r3
 8000fac:	2320      	movs	r3, #32
 8000fae:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	212c      	movs	r1, #44	; 0x2c
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	333d      	adds	r3, #61	; 0x3d
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	f040 8313 	bne.w	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	212c      	movs	r1, #44	; 0x2c
 8000fcc:	fb01 f303 	mul.w	r3, r1, r3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	333d      	adds	r3, #61	; 0x3d
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	212c      	movs	r1, #44	; 0x2c
 8000fde:	fb01 f303 	mul.w	r3, r1, r3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3360      	adds	r3, #96	; 0x60
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fd8d 	bl	8001b14 <USB_HC_Halt>
}
 8000ffa:	e2f7      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	015a      	lsls	r2, r3, #5
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	4413      	add	r3, r2
 8001004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001012:	d112      	bne.n	800103a <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	015a      	lsls	r2, r3, #5
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	4413      	add	r3, r2
 800101c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001020:	461a      	mov	r2, r3
 8001022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001026:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fd6e 	bl	8001b14 <USB_HC_Halt>
}
 8001038:	e2d8      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	015a      	lsls	r2, r3, #5
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	4413      	add	r3, r2
 8001042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b01      	cmp	r3, #1
 800104e:	d140      	bne.n	80010d2 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	212c      	movs	r1, #44	; 0x2c
 8001056:	fb01 f303 	mul.w	r3, r1, r3
 800105a:	4413      	add	r3, r2
 800105c:	335c      	adds	r3, #92	; 0x5c
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	015a      	lsls	r2, r3, #5
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	4413      	add	r3, r2
 800106a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001074:	2b40      	cmp	r3, #64	; 0x40
 8001076:	d111      	bne.n	800109c <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	212c      	movs	r1, #44	; 0x2c
 800107e:	fb01 f303 	mul.w	r3, r1, r3
 8001082:	4413      	add	r3, r2
 8001084:	333d      	adds	r3, #61	; 0x3d
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	015a      	lsls	r2, r3, #5
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4413      	add	r3, r2
 8001092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001096:	461a      	mov	r2, r3
 8001098:	2340      	movs	r3, #64	; 0x40
 800109a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	015a      	lsls	r2, r3, #5
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010a8:	461a      	mov	r2, r3
 80010aa:	2301      	movs	r3, #1
 80010ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	212c      	movs	r1, #44	; 0x2c
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	3361      	adds	r3, #97	; 0x61
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd22 	bl	8001b14 <USB_HC_Halt>
}
 80010d0:	e28c      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	015a      	lsls	r2, r3, #5
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4413      	add	r3, r2
 80010da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e4:	2b40      	cmp	r3, #64	; 0x40
 80010e6:	d12c      	bne.n	8001142 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	212c      	movs	r1, #44	; 0x2c
 80010ee:	fb01 f303 	mul.w	r3, r1, r3
 80010f2:	4413      	add	r3, r2
 80010f4:	3361      	adds	r3, #97	; 0x61
 80010f6:	2204      	movs	r2, #4
 80010f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	212c      	movs	r1, #44	; 0x2c
 8001100:	fb01 f303 	mul.w	r3, r1, r3
 8001104:	4413      	add	r3, r2
 8001106:	333d      	adds	r3, #61	; 0x3d
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	212c      	movs	r1, #44	; 0x2c
 8001112:	fb01 f303 	mul.w	r3, r1, r3
 8001116:	4413      	add	r3, r2
 8001118:	335c      	adds	r3, #92	; 0x5c
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fcf3 	bl	8001b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	015a      	lsls	r2, r3, #5
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4413      	add	r3, r2
 8001136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800113a:	461a      	mov	r2, r3
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	6093      	str	r3, [r2, #8]
}
 8001140:	e254      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	015a      	lsls	r2, r3, #5
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4413      	add	r3, r2
 800114a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b08      	cmp	r3, #8
 8001156:	d11a      	bne.n	800118e <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	015a      	lsls	r2, r3, #5
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4413      	add	r3, r2
 8001160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001164:	461a      	mov	r2, r3
 8001166:	2308      	movs	r3, #8
 8001168:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	212c      	movs	r1, #44	; 0x2c
 8001170:	fb01 f303 	mul.w	r3, r1, r3
 8001174:	4413      	add	r3, r2
 8001176:	3361      	adds	r3, #97	; 0x61
 8001178:	2205      	movs	r2, #5
 800117a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fcc4 	bl	8001b14 <USB_HC_Halt>
}
 800118c:	e22e      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	015a      	lsls	r2, r3, #5
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	4413      	add	r3, r2
 8001196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	2b10      	cmp	r3, #16
 80011a2:	d140      	bne.n	8001226 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	212c      	movs	r1, #44	; 0x2c
 80011aa:	fb01 f303 	mul.w	r3, r1, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	335c      	adds	r3, #92	; 0x5c
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	212c      	movs	r1, #44	; 0x2c
 80011bc:	fb01 f303 	mul.w	r3, r1, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	3361      	adds	r3, #97	; 0x61
 80011c4:	2203      	movs	r2, #3
 80011c6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	212c      	movs	r1, #44	; 0x2c
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	333d      	adds	r3, #61	; 0x3d
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d112      	bne.n	8001202 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	212c      	movs	r1, #44	; 0x2c
 80011e2:	fb01 f303 	mul.w	r3, r1, r3
 80011e6:	4413      	add	r3, r2
 80011e8:	333c      	adds	r3, #60	; 0x3c
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d108      	bne.n	8001202 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	212c      	movs	r1, #44	; 0x2c
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	333d      	adds	r3, #61	; 0x3d
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fc81 	bl	8001b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	015a      	lsls	r2, r3, #5
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4413      	add	r3, r2
 800121a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800121e:	461a      	mov	r2, r3
 8001220:	2310      	movs	r3, #16
 8001222:	6093      	str	r3, [r2, #8]
}
 8001224:	e1e2      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	015a      	lsls	r2, r3, #5
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4413      	add	r3, r2
 800122e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001238:	2b80      	cmp	r3, #128	; 0x80
 800123a:	d164      	bne.n	8001306 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d111      	bne.n	8001268 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	212c      	movs	r1, #44	; 0x2c
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	4413      	add	r3, r2
 8001250:	3361      	adds	r3, #97	; 0x61
 8001252:	2206      	movs	r2, #6
 8001254:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fc57 	bl	8001b14 <USB_HC_Halt>
 8001266:	e044      	b.n	80012f2 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	212c      	movs	r1, #44	; 0x2c
 800126e:	fb01 f303 	mul.w	r3, r1, r3
 8001272:	4413      	add	r3, r2
 8001274:	335c      	adds	r3, #92	; 0x5c
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	202c      	movs	r0, #44	; 0x2c
 8001280:	fb00 f303 	mul.w	r3, r0, r3
 8001284:	440b      	add	r3, r1
 8001286:	335c      	adds	r3, #92	; 0x5c
 8001288:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	212c      	movs	r1, #44	; 0x2c
 8001290:	fb01 f303 	mul.w	r3, r1, r3
 8001294:	4413      	add	r3, r2
 8001296:	335c      	adds	r3, #92	; 0x5c
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d920      	bls.n	80012e0 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	212c      	movs	r1, #44	; 0x2c
 80012a4:	fb01 f303 	mul.w	r3, r1, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	335c      	adds	r3, #92	; 0x5c
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	212c      	movs	r1, #44	; 0x2c
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	3360      	adds	r3, #96	; 0x60
 80012be:	2204      	movs	r2, #4
 80012c0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	b2d9      	uxtb	r1, r3
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	202c      	movs	r0, #44	; 0x2c
 80012cc:	fb00 f303 	mul.w	r3, r0, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	3360      	adds	r3, #96	; 0x60
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 fe72 	bl	8001fc2 <HAL_HCD_HC_NotifyURBChange_Callback>
 80012de:	e008      	b.n	80012f2 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	212c      	movs	r1, #44	; 0x2c
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	3360      	adds	r3, #96	; 0x60
 80012ee:	2202      	movs	r2, #2
 80012f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012fe:	461a      	mov	r2, r3
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	6093      	str	r3, [r2, #8]
}
 8001304:	e172      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	015a      	lsls	r2, r3, #5
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4413      	add	r3, r2
 800130e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131c:	d11b      	bne.n	8001356 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	212c      	movs	r1, #44	; 0x2c
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	3361      	adds	r3, #97	; 0x61
 800132c:	2208      	movs	r2, #8
 800132e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fbea 	bl	8001b14 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	015a      	lsls	r2, r3, #5
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	4413      	add	r3, r2
 8001348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800134c:	461a      	mov	r2, r3
 800134e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001352:	6093      	str	r3, [r2, #8]
}
 8001354:	e14a      	b.n	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	015a      	lsls	r2, r3, #5
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4413      	add	r3, r2
 800135e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b02      	cmp	r3, #2
 800136a:	f040 813f 	bne.w	80015ec <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	212c      	movs	r1, #44	; 0x2c
 8001374:	fb01 f303 	mul.w	r3, r1, r3
 8001378:	4413      	add	r3, r2
 800137a:	3361      	adds	r3, #97	; 0x61
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d17d      	bne.n	800147e <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	212c      	movs	r1, #44	; 0x2c
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
 800138e:	3360      	adds	r3, #96	; 0x60
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	212c      	movs	r1, #44	; 0x2c
 800139a:	fb01 f303 	mul.w	r3, r1, r3
 800139e:	4413      	add	r3, r2
 80013a0:	333f      	adds	r3, #63	; 0x3f
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d00a      	beq.n	80013be <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	212c      	movs	r1, #44	; 0x2c
 80013ae:	fb01 f303 	mul.w	r3, r1, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	333f      	adds	r3, #63	; 0x3f
 80013b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	f040 8100 	bne.w	80015be <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d113      	bne.n	80013ee <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	212c      	movs	r1, #44	; 0x2c
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3355      	adds	r3, #85	; 0x55
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f083 0301 	eor.w	r3, r3, #1
 80013da:	b2d8      	uxtb	r0, r3
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	212c      	movs	r1, #44	; 0x2c
 80013e2:	fb01 f303 	mul.w	r3, r1, r3
 80013e6:	4413      	add	r3, r2
 80013e8:	3355      	adds	r3, #85	; 0x55
 80013ea:	4602      	mov	r2, r0
 80013ec:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	f040 80e3 	bne.w	80015be <HCD_HC_OUT_IRQHandler+0x69c>
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	212c      	movs	r1, #44	; 0x2c
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	334c      	adds	r3, #76	; 0x4c
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80d8 	beq.w	80015be <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	212c      	movs	r1, #44	; 0x2c
 8001414:	fb01 f303 	mul.w	r3, r1, r3
 8001418:	4413      	add	r3, r2
 800141a:	334c      	adds	r3, #76	; 0x4c
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	202c      	movs	r0, #44	; 0x2c
 8001424:	fb00 f202 	mul.w	r2, r0, r2
 8001428:	440a      	add	r2, r1
 800142a:	3240      	adds	r2, #64	; 0x40
 800142c:	8812      	ldrh	r2, [r2, #0]
 800142e:	4413      	add	r3, r2
 8001430:	3b01      	subs	r3, #1
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	202c      	movs	r0, #44	; 0x2c
 8001438:	fb00 f202 	mul.w	r2, r0, r2
 800143c:	440a      	add	r2, r1
 800143e:	3240      	adds	r2, #64	; 0x40
 8001440:	8812      	ldrh	r2, [r2, #0]
 8001442:	fbb3 f3f2 	udiv	r3, r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80b5 	beq.w	80015be <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	212c      	movs	r1, #44	; 0x2c
 800145a:	fb01 f303 	mul.w	r3, r1, r3
 800145e:	4413      	add	r3, r2
 8001460:	3355      	adds	r3, #85	; 0x55
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f083 0301 	eor.w	r3, r3, #1
 8001468:	b2d8      	uxtb	r0, r3
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	212c      	movs	r1, #44	; 0x2c
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	4413      	add	r3, r2
 8001476:	3355      	adds	r3, #85	; 0x55
 8001478:	4602      	mov	r2, r0
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e09f      	b.n	80015be <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	212c      	movs	r1, #44	; 0x2c
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4413      	add	r3, r2
 800148a:	3361      	adds	r3, #97	; 0x61
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d109      	bne.n	80014a6 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	212c      	movs	r1, #44	; 0x2c
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	3360      	adds	r3, #96	; 0x60
 80014a0:	2202      	movs	r2, #2
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	e08b      	b.n	80015be <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	212c      	movs	r1, #44	; 0x2c
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	3361      	adds	r3, #97	; 0x61
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d109      	bne.n	80014ce <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	212c      	movs	r1, #44	; 0x2c
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	3360      	adds	r3, #96	; 0x60
 80014c8:	2202      	movs	r2, #2
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e077      	b.n	80015be <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	212c      	movs	r1, #44	; 0x2c
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	3361      	adds	r3, #97	; 0x61
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d109      	bne.n	80014f6 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	212c      	movs	r1, #44	; 0x2c
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	3360      	adds	r3, #96	; 0x60
 80014f0:	2205      	movs	r2, #5
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e063      	b.n	80015be <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	3361      	adds	r3, #97	; 0x61
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b06      	cmp	r3, #6
 8001508:	d009      	beq.n	800151e <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	3361      	adds	r3, #97	; 0x61
 8001518:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800151a:	2b08      	cmp	r3, #8
 800151c:	d14f      	bne.n	80015be <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	212c      	movs	r1, #44	; 0x2c
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	335c      	adds	r3, #92	; 0x5c
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	202c      	movs	r0, #44	; 0x2c
 8001536:	fb00 f303 	mul.w	r3, r0, r3
 800153a:	440b      	add	r3, r1
 800153c:	335c      	adds	r3, #92	; 0x5c
 800153e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	212c      	movs	r1, #44	; 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	335c      	adds	r3, #92	; 0x5c
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d912      	bls.n	800157a <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	212c      	movs	r1, #44	; 0x2c
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	4413      	add	r3, r2
 8001560:	335c      	adds	r3, #92	; 0x5c
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	212c      	movs	r1, #44	; 0x2c
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	3360      	adds	r3, #96	; 0x60
 8001574:	2204      	movs	r2, #4
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e021      	b.n	80015be <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	212c      	movs	r1, #44	; 0x2c
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	4413      	add	r3, r2
 8001586:	3360      	adds	r3, #96	; 0x60
 8001588:	2202      	movs	r2, #2
 800158a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	4413      	add	r3, r2
 8001594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015a2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015aa:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b8:	461a      	mov	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ca:	461a      	mov	r2, r3
 80015cc:	2302      	movs	r3, #2
 80015ce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	b2d9      	uxtb	r1, r3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	202c      	movs	r0, #44	; 0x2c
 80015da:	fb00 f303 	mul.w	r3, r0, r3
 80015de:	4413      	add	r3, r2
 80015e0:	3360      	adds	r3, #96	; 0x60
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fceb 	bl	8001fc2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	0c5b      	lsrs	r3, r3, #17
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001628:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d004      	beq.n	800163a <HCD_RXQLVL_IRQHandler+0x46>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b05      	cmp	r3, #5
 8001634:	f000 80a9 	beq.w	800178a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001638:	e0aa      	b.n	8001790 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a6 	beq.w	800178e <HCD_RXQLVL_IRQHandler+0x19a>
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	212c      	movs	r1, #44	; 0x2c
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
 800164e:	3344      	adds	r3, #68	; 0x44
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 809b 	beq.w	800178e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	212c      	movs	r1, #44	; 0x2c
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	3350      	adds	r3, #80	; 0x50
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	441a      	add	r2, r3
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	202c      	movs	r0, #44	; 0x2c
 8001672:	fb00 f303 	mul.w	r3, r0, r3
 8001676:	440b      	add	r3, r1
 8001678:	334c      	adds	r3, #76	; 0x4c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d87a      	bhi.n	8001776 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	212c      	movs	r1, #44	; 0x2c
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	4413      	add	r3, r2
 8001690:	3344      	adds	r3, #68	; 0x44
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	b292      	uxth	r2, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f000 f977 	bl	800198c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	212c      	movs	r1, #44	; 0x2c
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	3344      	adds	r3, #68	; 0x44
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	441a      	add	r2, r3
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	202c      	movs	r0, #44	; 0x2c
 80016b8:	fb00 f303 	mul.w	r3, r0, r3
 80016bc:	440b      	add	r3, r1
 80016be:	3344      	adds	r3, #68	; 0x44
 80016c0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	3350      	adds	r3, #80	; 0x50
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	441a      	add	r2, r3
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	202c      	movs	r0, #44	; 0x2c
 80016dc:	fb00 f303 	mul.w	r3, r0, r3
 80016e0:	440b      	add	r3, r1
 80016e2:	3350      	adds	r3, #80	; 0x50
 80016e4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	0cdb      	lsrs	r3, r3, #19
 80016f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016fa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3340      	adds	r3, #64	; 0x40
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4293      	cmp	r3, r2
 8001712:	d13c      	bne.n	800178e <HCD_RXQLVL_IRQHandler+0x19a>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d039      	beq.n	800178e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	4413      	add	r3, r2
 8001722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001730:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001738:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	4413      	add	r3, r2
 8001742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001746:	461a      	mov	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	3354      	adds	r3, #84	; 0x54
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	f083 0301 	eor.w	r3, r3, #1
 8001760:	b2d8      	uxtb	r0, r3
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	3354      	adds	r3, #84	; 0x54
 8001770:	4602      	mov	r2, r0
 8001772:	701a      	strb	r2, [r3, #0]
      break;
 8001774:	e00b      	b.n	800178e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	3360      	adds	r3, #96	; 0x60
 8001784:	2204      	movs	r2, #4
 8001786:	701a      	strb	r2, [r3, #0]
      break;
 8001788:	e001      	b.n	800178e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800178a:	bf00      	nop
 800178c:	e000      	b.n	8001790 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800178e:	bf00      	nop
  }
}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80017c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d10b      	bne.n	80017e8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fbd5 	bl	8001f8a <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d132      	bne.n	8001858 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b04      	cmp	r3, #4
 8001802:	d126      	bne.n	8001852 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d113      	bne.n	8001834 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001816:	d106      	bne.n	8001826 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2102      	movs	r1, #2
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f92d 	bl	8001a7e <USB_InitFSLSPClkSel>
 8001824:	e011      	b.n	800184a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f926 	bl	8001a7e <USB_InitFSLSPClkSel>
 8001832:	e00a      	b.n	800184a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d106      	bne.n	800184a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001842:	461a      	mov	r2, r3
 8001844:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001848:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fbc7 	bl	8001fde <HAL_HCD_PortEnabled_Callback>
 8001850:	e002      	b.n	8001858 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fbd1 	bl	8001ffa <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	2b20      	cmp	r3, #32
 8001860:	d103      	bne.n	800186a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f043 0320 	orr.w	r3, r3, #32
 8001868:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001870:	461a      	mov	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 0201 	bic.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <USB_FlushTxFifo+0x64>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d901      	bls.n	80018e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e01b      	b.n	800191c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	daf2      	bge.n	80018d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	019b      	lsls	r3, r3, #6
 80018f4:	f043 0220 	orr.w	r2, r3, #32
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3301      	adds	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4a08      	ldr	r2, [pc, #32]	; (8001928 <USB_FlushTxFifo+0x64>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e006      	b.n	800191c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b20      	cmp	r3, #32
 8001918:	d0f0      	beq.n	80018fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	00030d40 	.word	0x00030d40

0800192c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <USB_FlushRxFifo+0x5c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e018      	b.n	800197c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	2b00      	cmp	r3, #0
 8001950:	daf2      	bge.n	8001938 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2210      	movs	r2, #16
 800195a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a08      	ldr	r2, [pc, #32]	; (8001988 <USB_FlushRxFifo+0x5c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e006      	b.n	800197c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b10      	cmp	r3, #16
 8001978:	d0f0      	beq.n	800195c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	00030d40 	.word	0x00030d40

0800198c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800198c:	b480      	push	{r7}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	4613      	mov	r3, r2
 8001998:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	e014      	b.n	80019e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	3301      	adds	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	3301      	adds	r3, #1
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	3301      	adds	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	3301      	adds	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d3e6      	bcc.n	80019b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80019ea:	8bfb      	ldrh	r3, [r7, #30]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01e      	beq.n	8001a2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fa:	461a      	mov	r2, r3
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	701a      	strb	r2, [r3, #0]
      i++;
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	3301      	adds	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8001a22:	8bfb      	ldrh	r3, [r7, #30]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8001a28:	8bfb      	ldrh	r3, [r7, #30]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ea      	bne.n	8001a04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	372c      	adds	r7, #44	; 0x2c
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8001a54:	68fb      	ldr	r3, [r7, #12]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a9c:	f023 0303 	bic.w	r3, r3, #3
 8001aa0:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001acc:	6053      	str	r3, [r2, #4]
 8001ace:	e009      	b.n	8001ae4 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d106      	bne.n	8001ae4 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001adc:	461a      	mov	r2, r3
 8001ade:	f241 7370 	movw	r3, #6000	; 0x1770
 8001ae2:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	b29b      	uxth	r3, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0fdb      	lsrs	r3, r3, #31
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d104      	bne.n	8001b6e <USB_HC_Halt+0x5a>
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e0c8      	b.n	8001d00 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <USB_HC_Halt+0x66>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d163      	bne.n	8001c42 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	015a      	lsls	r2, r3, #5
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	4413      	add	r3, r2
 8001b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	0151      	lsls	r1, r2, #5
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	440a      	add	r2, r1
 8001b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b98:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 80ab 	bne.w	8001cfe <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d133      	bne.n	8001c1c <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	0151      	lsls	r1, r2, #5
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	440a      	add	r2, r1
 8001bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	0151      	lsls	r1, r2, #5
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	440a      	add	r2, r1
 8001bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bf2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c00:	d81d      	bhi.n	8001c3e <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c18:	d0ec      	beq.n	8001bf4 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001c1a:	e070      	b.n	8001cfe <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	0151      	lsls	r1, r2, #5
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	440a      	add	r2, r1
 8001c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c3a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001c3c:	e05f      	b.n	8001cfe <USB_HC_Halt+0x1ea>
            break;
 8001c3e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8001c40:	e05d      	b.n	8001cfe <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	0151      	lsls	r1, r2, #5
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	440a      	add	r2, r1
 8001c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c60:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d133      	bne.n	8001cda <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	0151      	lsls	r1, r2, #5
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	440a      	add	r2, r1
 8001c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c90:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	0151      	lsls	r1, r2, #5
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	440a      	add	r2, r1
 8001ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cb0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cbe:	d81d      	bhi.n	8001cfc <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cd6:	d0ec      	beq.n	8001cb2 <USB_HC_Halt+0x19e>
 8001cd8:	e011      	b.n	8001cfe <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	0151      	lsls	r1, r2, #5
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	440a      	add	r2, r1
 8001cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e000      	b.n	8001cfe <USB_HC_Halt+0x1ea>
          break;
 8001cfc:	bf00      	nop
    }
  }

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3724      	adds	r7, #36	; 0x24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fdbd 	bl	80018a0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001d26:	2110      	movs	r1, #16
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fdcb 	bl	80018c4 <USB_FlushTxFifo>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fdf7 	bl	800192c <USB_FlushRxFifo>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	e01f      	b.n	8001d8e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d74:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d9dc      	bls.n	8001d4e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	e034      	b.n	8001e04 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001db0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001db8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001dc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	461a      	mov	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de0:	d80c      	bhi.n	8001dfc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001df8:	d0ec      	beq.n	8001dd4 <USB_StopHost+0xc8>
 8001dfa:	e000      	b.n	8001dfe <USB_StopHost+0xf2>
        break;
 8001dfc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	d9c7      	bls.n	8001d9a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e10:	461a      	mov	r2, r3
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fd2c 	bl	800187e <USB_EnableGlobalInt>

  return ret;
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f804 	bl	8001e54 <USBH_HandleSof>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b0b      	cmp	r3, #11
 8001e64:	d10a      	bne.n	8001e7c <USBH_HandleSof+0x28>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8001e94:	bf00      	nop
}
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8001eb0:	bf00      	nop
}
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f883 	bl	8002016 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	791b      	ldrb	r3, [r3, #4]
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f80b 	bl	8001f32 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	795b      	ldrb	r3, [r3, #5]
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f805 	bl	8001f32 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80d      	bhi.n	8001f60 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	33e0      	adds	r3, #224	; 0xe0
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	33e0      	adds	r3, #224	; 0xe0
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff57 	bl	8001e30 <USBH_LL_IncTimer>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff8f 	bl	8001ebc <USBH_LL_Connect>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff98 	bl	8001eea <USBH_LL_Disconnect>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff49 	bl	8001e84 <USBH_LL_PortEnabled>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff49 	bl	8001ea0 <USBH_LL_PortDisabled>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fc06 	bl	800083e <HAL_HCD_Stop>
 8002032:	4603      	mov	r3, r0
 8002034:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f807 	bl	800204c <USBH_Get_USB_Status>
 800203e:	4603      	mov	r3, r0
 8002040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002042:	7bbb      	ldrb	r3, [r7, #14]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d817      	bhi.n	8002090 <USBH_Get_USB_Status+0x44>
 8002060:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <USBH_Get_USB_Status+0x1c>)
 8002062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002066:	bf00      	nop
 8002068:	08002079 	.word	0x08002079
 800206c:	0800207f 	.word	0x0800207f
 8002070:	08002085 	.word	0x08002085
 8002074:	0800208b 	.word	0x0800208b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
    break;
 800207c:	e00b      	b.n	8002096 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800207e:	2302      	movs	r3, #2
 8002080:	73fb      	strb	r3, [r7, #15]
    break;
 8002082:	e008      	b.n	8002096 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
    break;
 8002088:	e005      	b.n	8002096 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800208a:	2302      	movs	r3, #2
 800208c:	73fb      	strb	r3, [r7, #15]
    break;
 800208e:	e002      	b.n	8002096 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002090:	2302      	movs	r3, #2
 8002092:	73fb      	strb	r3, [r7, #15]
    break;
 8002094:	bf00      	nop
  }
  return usb_status;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <__libc_init_array>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4d0d      	ldr	r5, [pc, #52]	; (80020dc <__libc_init_array+0x38>)
 80020a8:	4c0d      	ldr	r4, [pc, #52]	; (80020e0 <__libc_init_array+0x3c>)
 80020aa:	1b64      	subs	r4, r4, r5
 80020ac:	10a4      	asrs	r4, r4, #2
 80020ae:	2600      	movs	r6, #0
 80020b0:	42a6      	cmp	r6, r4
 80020b2:	d109      	bne.n	80020c8 <__libc_init_array+0x24>
 80020b4:	4d0b      	ldr	r5, [pc, #44]	; (80020e4 <__libc_init_array+0x40>)
 80020b6:	4c0c      	ldr	r4, [pc, #48]	; (80020e8 <__libc_init_array+0x44>)
 80020b8:	f000 f826 	bl	8002108 <_init>
 80020bc:	1b64      	subs	r4, r4, r5
 80020be:	10a4      	asrs	r4, r4, #2
 80020c0:	2600      	movs	r6, #0
 80020c2:	42a6      	cmp	r6, r4
 80020c4:	d105      	bne.n	80020d2 <__libc_init_array+0x2e>
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
 80020c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020cc:	4798      	blx	r3
 80020ce:	3601      	adds	r6, #1
 80020d0:	e7ee      	b.n	80020b0 <__libc_init_array+0xc>
 80020d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d6:	4798      	blx	r3
 80020d8:	3601      	adds	r6, #1
 80020da:	e7f2      	b.n	80020c2 <__libc_init_array+0x1e>
 80020dc:	08002120 	.word	0x08002120
 80020e0:	08002120 	.word	0x08002120
 80020e4:	08002120 	.word	0x08002120
 80020e8:	08002124 	.word	0x08002124

080020ec <memcpy>:
 80020ec:	440a      	add	r2, r1
 80020ee:	4291      	cmp	r1, r2
 80020f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80020f4:	d100      	bne.n	80020f8 <memcpy+0xc>
 80020f6:	4770      	bx	lr
 80020f8:	b510      	push	{r4, lr}
 80020fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002102:	4291      	cmp	r1, r2
 8002104:	d1f9      	bne.n	80020fa <memcpy+0xe>
 8002106:	bd10      	pop	{r4, pc}

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
