
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000640  08000640  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000640  08000640  00020404  2**0
                  CONTENTS
  4 .ARM          00000000  08000640  08000640  00020404  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000640  08000640  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000640  08000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000644  08000644  00010644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000400  08000648  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000404  0800064c  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800064c  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001698  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005d2  00000000  00000000  00021acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  000220a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  000222b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145ae  00000000  00000000  00022488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a47  00000000  00000000  00036a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d89  00000000  00000000  0003947d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000700  00000000  00000000  000bb258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000404 	.word	0x20000404
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000628 	.word	0x08000628

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000408 	.word	0x20000408
 80001d4:	08000628 	.word	0x08000628

080001d8 <main>:
uint8_t data;
uint8_t rx_dma_buffer[10];
uint8_t rx_int_buffer[128];
uint8_t rx_index;

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	vectortable_move();
 80001dc:	f000 f808 	bl	80001f0 <vectortable_move>

	uart_init();
 80001e0:	f000 f8c6 	bl	8000370 <uart_init>
	dma_init();
 80001e4:	f000 f86a 	bl	80002bc <dma_init>
	interrupt_init();
 80001e8:	f000 f81e 	bl	8000228 <interrupt_init>

	while (1) {
 80001ec:	e7fe      	b.n	80001ec <main+0x14>
	...

080001f0 <vectortable_move>:
 * @brief	: move vector table from FLASH to RAM
 * @param	: None
 * @retval	: None
 */
void
vectortable_move() {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *)0x20000000;
 80001f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80001fa:	60bb      	str	r3, [r7, #8]
	void *volatile flash = (void *)0x08000000;
 80001fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000200:	607b      	str	r3, [r7, #4]
	memcpy(ram, flash, 0x198);
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	6879      	ldr	r1, [r7, #4]
 8000206:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f9fe 	bl	800060c <memcpy>

	uint32_t volatile *const VTOR = (uint32_t *)(0xE000ED08);
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <vectortable_move+0x34>)
 8000212:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	e000ed08 	.word	0xe000ed08

08000228 <interrupt_init>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
interrupt_init() {
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
	/*-----------------------UART Receive complete Interrupt-----------------------*/
	uint32_t volatile *const USART2_CR1 = (uint32_t *)(0x40004400 + 0x0c);
 800022e:	4b1b      	ldr	r3, [pc, #108]	; (800029c <interrupt_init+0x74>)
 8000230:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const NVIC_ISER1 = (uint32_t *)(0xe000e100 + 0x04);
 8000232:	4b1b      	ldr	r3, [pc, #108]	; (80002a0 <interrupt_init+0x78>)
 8000234:	60bb      	str	r3, [r7, #8]
	//enable vector interrupt position 38
	*NVIC_ISER1 |= (1 << (38 - 32));
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	601a      	str	r2, [r3, #0]
	/*change uart-interrupt handler*/
	*((volatile uint32_t *const)(0x20000000 + 0xD8)) = ((uint32_t)uart_receive_handler | 1);
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <interrupt_init+0x7c>)
 8000244:	4a18      	ldr	r2, [pc, #96]	; (80002a8 <interrupt_init+0x80>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6013      	str	r3, [r2, #0]
	/*enable interrupt Rx*/
	*USART2_CR1 |= (1 << 5);	// bit RXNEIE
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f043 0220 	orr.w	r2, r3, #32
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	601a      	str	r2, [r3, #0]


	/*-----------------------DMA Transfer complete Interrupt-----------------------*/
	uint32_t volatile *const DMA_HIFCR    = (uint32_t *)(0x40026000 + 0x0C);
 8000258:	4b14      	ldr	r3, [pc, #80]	; (80002ac <interrupt_init+0x84>)
 800025a:	607b      	str	r3, [r7, #4]
	uint32_t volatile *const DMA1_S7CR    = (uint32_t *)(0x40026000 + 0x10 + (0x18 * 7));
 800025c:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <interrupt_init+0x88>)
 800025e:	603b      	str	r3, [r7, #0]
	/*clear stream 7 transfer complete interrupt flag*/
	*DMA_HIFCR |= (1 << 27);	// bit CTCIF7
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	601a      	str	r2, [r3, #0]
	/*enable vector interrupt position 47*/
	*NVIC_ISER1 |= (1 << (47 - 32));
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
	/*change dma-interrupt handler*/
	*((volatile uint32_t *const)(0x20000000 + 0xFC)) = ((uint32_t)dma_transfer_handler | 1);
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <interrupt_init+0x8c>)
 800027a:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <interrupt_init+0x90>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]
	/*enable transfer complete enable*/
	*DMA1_S7CR |= (1 << 4);		// bit TCIE
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 0210 	orr.w	r2, r3, #16
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	4000440c 	.word	0x4000440c
 80002a0:	e000e104 	.word	0xe000e104
 80002a4:	08000449 	.word	0x08000449
 80002a8:	200000d8 	.word	0x200000d8
 80002ac:	4002600c 	.word	0x4002600c
 80002b0:	400260b8 	.word	0x400260b8
 80002b4:	080004a9 	.word	0x080004a9
 80002b8:	200000fc 	.word	0x200000fc

080002bc <dma_init>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
dma_init() {
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	4b22      	ldr	r3, [pc, #136]	; (8000350 <dma_init+0x94>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	4a21      	ldr	r2, [pc, #132]	; (8000350 <dma_init+0x94>)
 80002cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002d0:	6313      	str	r3, [r2, #48]	; 0x30
 80002d2:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <dma_init+0x94>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]

	/*-----------------------Rx DMA-----------------------*/
	uint32_t volatile *const USART2_DR   = (uint32_t *)(0x40004400 + 0x04);
 80002de:	4b1d      	ldr	r3, [pc, #116]	; (8000354 <dma_init+0x98>)
 80002e0:	61fb      	str	r3, [r7, #28]
	uint32_t volatile *const USART2_CR3  = (uint32_t *)(0x40004400 + 0x14);
 80002e2:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <dma_init+0x9c>)
 80002e4:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const DMA1_S7CR    = (uint32_t *)(0x40026000 + 0x10 + (0x18 * 7));
 80002e6:	4b1d      	ldr	r3, [pc, #116]	; (800035c <dma_init+0xa0>)
 80002e8:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const DMA1_S7NDTR  = (uint32_t *)(0x40026000 + 0x14 + (0x18 * 7));
 80002ea:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <dma_init+0xa4>)
 80002ec:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const DMA1_S7PAR   = (uint32_t *)(0x40026000 + 0x18 + (0x18 * 7));
 80002ee:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <dma_init+0xa8>)
 80002f0:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const DMA1_S7M0AR  = (uint32_t *)(0x40026000 + 0x1c + (0x18 * 7));
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <dma_init+0xac>)
 80002f4:	60bb      	str	r3, [r7, #8]
	/*Rx DMA enable*/
	*USART2_CR3 |= (1 << 6);
 80002f6:	69bb      	ldr	r3, [r7, #24]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	601a      	str	r2, [r3, #0]
	/*channel 6*/
	*DMA1_S7CR |= (6 << 25);
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f043 6240 	orr.w	r2, r3, #201326592	; 0xc000000
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	601a      	str	r2, [r3, #0]
	/*number of data*/
	*DMA1_S7NDTR = sizeof(rx_dma_buffer);
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	220a      	movs	r2, #10
 8000312:	601a      	str	r2, [r3, #0]
	/*peripheral address*/
	*DMA1_S7PAR = (uint32_t)USART2_DR;
 8000314:	69fa      	ldr	r2, [r7, #28]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	601a      	str	r2, [r3, #0]
	/*memory address*/
	*DMA1_S7M0AR = (uint32_t)rx_dma_buffer;
 800031a:	4a14      	ldr	r2, [pc, #80]	; (800036c <dma_init+0xb0>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	601a      	str	r2, [r3, #0]
	/*circular mode*/
	*DMA1_S7CR |= (1 << 8);
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	601a      	str	r2, [r3, #0]
	/*memory increment mode*/
	*DMA1_S7CR |= (1 << 10);
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	601a      	str	r2, [r3, #0]
	/*DMA stream enable*/
	*DMA1_S7CR |= (1 << 0);
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f043 0201 	orr.w	r2, r3, #1
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	bf00      	nop
 8000346:	3724      	adds	r7, #36	; 0x24
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40023800 	.word	0x40023800
 8000354:	40004404 	.word	0x40004404
 8000358:	40004414 	.word	0x40004414
 800035c:	400260b8 	.word	0x400260b8
 8000360:	400260bc 	.word	0x400260bc
 8000364:	400260c0 	.word	0x400260c0
 8000368:	400260c4 	.word	0x400260c4
 800036c:	20000420 	.word	0x20000420

08000370 <uart_init>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
uart_init() {
 8000370:	b480      	push	{r7}
 8000372:	b087      	sub	sp, #28
 8000374:	af00      	add	r7, sp, #0
	/*enable clock peripherals*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <uart_init+0xc4>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a2d      	ldr	r2, [pc, #180]	; (8000434 <uart_init+0xc4>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
 8000386:	4b2b      	ldr	r3, [pc, #172]	; (8000434 <uart_init+0xc4>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000392:	2300      	movs	r3, #0
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	4b27      	ldr	r3, [pc, #156]	; (8000434 <uart_init+0xc4>)
 8000398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039a:	4a26      	ldr	r2, [pc, #152]	; (8000434 <uart_init+0xc4>)
 800039c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a0:	6413      	str	r3, [r2, #64]	; 0x40
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <uart_init+0xc4>)
 80003a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]

	uint32_t volatile *const GPIOA_MODER = (uint32_t *)(0x40020000 + 0x00);
 80003ae:	4b22      	ldr	r3, [pc, #136]	; (8000438 <uart_init+0xc8>)
 80003b0:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const GPIOA_AFRL  = (uint32_t *)(0x40020000 + 0x20);
 80003b2:	4b22      	ldr	r3, [pc, #136]	; (800043c <uart_init+0xcc>)
 80003b4:	613b      	str	r3, [r7, #16]
	uint16_t volatile *const USART2_BRR = (uint16_t *)(0x40004400 + 0x08);
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <uart_init+0xd0>)
 80003b8:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const USART2_CR1 = (uint32_t *)(0x40004400 + 0x0c);
 80003ba:	4b22      	ldr	r3, [pc, #136]	; (8000444 <uart_init+0xd4>)
 80003bc:	60bb      	str	r3, [r7, #8]

	/*set PA2 as TX, PA3 as RX*/
	/*alternate mode*/
	*GPIOA_MODER &= ~((0b11 << (2 * 3)) | (0b11 << (2 * 2)));
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |=   (0b10 << (2 * 3)) | (0b10 << (2 * 2));
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	601a      	str	r2, [r3, #0]

	/*alternate function 7*/
	*GPIOA_AFRL &= ~((0b1111 << (4 * 3)) | (0b1111 << (4 * 2)));
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL |=   (0b0111 << (4 * 3)) | (0b0111 << (4 * 2));
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f443 42ee 	orr.w	r2, r3, #30464	; 0x7700
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	601a      	str	r2, [r3, #0]
	/*set baudrate*/
	//fuart = 16mhz, baud = 9600 -> USART2_BRR = 104.1875
	/*uint16_t DIV_Mantissa = 16000000 / (16 * baudrate);
	uint8_t  DIV_Fraction = round((16000000 % (16 * baudrate)) * 16);
	*USART2_BRR = (DIV_Mantissa << 4) | DIV_Fraction;*/
	*USART2_BRR = (104 << 4) | 3;
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	f240 6283 	movw	r2, #1667	; 0x683
 80003f4:	801a      	strh	r2, [r3, #0]

	/*set data frame*/
	/*8-bits*/
	*USART2_CR1 &= ~(1 << 12);	// bit M
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	601a      	str	r2, [r3, #0]
	/*disable parity*/
	*USART2_CR1 &= ~(1 << 10);	// bit PCE
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	601a      	str	r2, [r3, #0]

	/*enable Tx, Rx*/
	*USART2_CR1 |= (1 << 2) | (1 << 3);	// bit TE, RE
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f043 020c 	orr.w	r2, r3, #12
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	601a      	str	r2, [r3, #0]

	/*enable UART*/
	*USART2_CR1 |= (1 << 13);	// bit UE
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	601a      	str	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	371c      	adds	r7, #28
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40023800 	.word	0x40023800
 8000438:	40020000 	.word	0x40020000
 800043c:	40020020 	.word	0x40020020
 8000440:	40004408 	.word	0x40004408
 8000444:	4000440c 	.word	0x4000440c

08000448 <uart_receive_handler>:
 * \param[out]
 * \retval
 */
void
uart_receive_handler()
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
	uint32_t volatile *const USART2_SR = (uint32_t *)(0x40004400 + 0x00);
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <uart_receive_handler+0x50>)
 8000450:	607b      	str	r3, [r7, #4]
	uint32_t volatile *const UART2_DR  = (uint32_t *)(0x40004400 + 0x04);
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <uart_receive_handler+0x54>)
 8000454:	603b      	str	r3, [r7, #0]

	/*read data*/
	rx_int_buffer[rx_index] = *UART2_DR;
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	6819      	ldr	r1, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <uart_receive_handler+0x58>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	461a      	mov	r2, r3
 8000460:	b2c9      	uxtb	r1, r1
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <uart_receive_handler+0x5c>)
 8000464:	5499      	strb	r1, [r3, r2]
	rx_index++;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <uart_receive_handler+0x58>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <uart_receive_handler+0x58>)
 8000470:	701a      	strb	r2, [r3, #0]

	if (rx_index >= 50) {
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <uart_receive_handler+0x58>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b31      	cmp	r3, #49	; 0x31
 8000478:	d902      	bls.n	8000480 <uart_receive_handler+0x38>
		rx_index = 0;
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <uart_receive_handler+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
	}

	/*clear RXNE*/
	*USART2_SR &= ~(1 << 5);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f023 0220 	bic.w	r2, r3, #32
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	601a      	str	r2, [r3, #0]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40004400 	.word	0x40004400
 800049c:	40004404 	.word	0x40004404
 80004a0:	200004ac 	.word	0x200004ac
 80004a4:	2000042c 	.word	0x2000042c

080004a8 <dma_transfer_handler>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
dma_transfer_handler() {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
	uint32_t volatile *const DMA1_HIFCR    = (uint32_t *)(0x40026000 + 0x0C);
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <dma_transfer_handler+0x24>)
 80004b0:	607b      	str	r3, [r7, #4]

	/*handler*/
	__asm("NOP");
 80004b2:	bf00      	nop

	/*clear stream 7 transfer complete interrupt flag*/
	*DMA1_HIFCR |= (1 << 27);	// bit CTCIF7
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	601a      	str	r2, [r3, #0]
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	4002600c 	.word	0x4002600c

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <NMI_Handler+0x4>

080004d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <MemManage_Handler+0x4>

080004e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler+0x4>

080004ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051c:	f000 f83e 	bl	800059c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <SystemInit+0x20>)
 800052a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <SystemInit+0x20>)
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800054c:	480d      	ldr	r0, [pc, #52]	; (8000584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800054e:	490e      	ldr	r1, [pc, #56]	; (8000588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000564:	4c0b      	ldr	r4, [pc, #44]	; (8000594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000572:	f7ff ffd7 	bl	8000524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000576:	f000 f825 	bl	80005c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800057a:	f7ff fe2d 	bl	80001d8 <main>
  bx  lr    
 800057e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000584:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8000588:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 800058c:	08000648 	.word	0x08000648
  ldr r2, =_sbss
 8000590:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8000594:	200004b4 	.word	0x200004b4

08000598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC_IRQHandler>
	...

0800059c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_IncTick+0x20>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x24>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_IncTick+0x24>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000400 	.word	0x20000400
 80005c0:	200004b0 	.word	0x200004b0

080005c4 <__libc_init_array>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	4d0d      	ldr	r5, [pc, #52]	; (80005fc <__libc_init_array+0x38>)
 80005c8:	4c0d      	ldr	r4, [pc, #52]	; (8000600 <__libc_init_array+0x3c>)
 80005ca:	1b64      	subs	r4, r4, r5
 80005cc:	10a4      	asrs	r4, r4, #2
 80005ce:	2600      	movs	r6, #0
 80005d0:	42a6      	cmp	r6, r4
 80005d2:	d109      	bne.n	80005e8 <__libc_init_array+0x24>
 80005d4:	4d0b      	ldr	r5, [pc, #44]	; (8000604 <__libc_init_array+0x40>)
 80005d6:	4c0c      	ldr	r4, [pc, #48]	; (8000608 <__libc_init_array+0x44>)
 80005d8:	f000 f826 	bl	8000628 <_init>
 80005dc:	1b64      	subs	r4, r4, r5
 80005de:	10a4      	asrs	r4, r4, #2
 80005e0:	2600      	movs	r6, #0
 80005e2:	42a6      	cmp	r6, r4
 80005e4:	d105      	bne.n	80005f2 <__libc_init_array+0x2e>
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ec:	4798      	blx	r3
 80005ee:	3601      	adds	r6, #1
 80005f0:	e7ee      	b.n	80005d0 <__libc_init_array+0xc>
 80005f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f6:	4798      	blx	r3
 80005f8:	3601      	adds	r6, #1
 80005fa:	e7f2      	b.n	80005e2 <__libc_init_array+0x1e>
 80005fc:	08000640 	.word	0x08000640
 8000600:	08000640 	.word	0x08000640
 8000604:	08000640 	.word	0x08000640
 8000608:	08000644 	.word	0x08000644

0800060c <memcpy>:
 800060c:	440a      	add	r2, r1
 800060e:	4291      	cmp	r1, r2
 8000610:	f100 33ff 	add.w	r3, r0, #4294967295
 8000614:	d100      	bne.n	8000618 <memcpy+0xc>
 8000616:	4770      	bx	lr
 8000618:	b510      	push	{r4, lr}
 800061a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800061e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000622:	4291      	cmp	r1, r2
 8000624:	d1f9      	bne.n	800061a <memcpy+0xe>
 8000626:	bd10      	pop	{r4, pc}

08000628 <_init>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr

08000634 <_fini>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	bf00      	nop
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr
