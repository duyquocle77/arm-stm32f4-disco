
update-firmware-via-uart-using-registers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000458  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005f0  080005f0  000205e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005f0  080005f0  000205e0  2**0
                  CONTENTS
  4 .ARM          00000000  080005f0  080005f0  000205e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005f0  080005f0  000205e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005f0  080005f0  000105f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005f4  080005f4  000105f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000400  080005f8  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000016e0  200005e0  080007d8  000205e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc0  080007d8  00021cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000167f  00000000  00000000  00020610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062b  00000000  00000000  00021c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  000222c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  000224d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148a8  00000000  00000000  000226a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002aa7  00000000  00000000  00036f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082659  00000000  00000000  000399f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bc050  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f0  00000000  00000000  000bc0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005e0 	.word	0x200005e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005d0 	.word	0x080005d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005e4 	.word	0x200005e4
 80001d4:	080005d0 	.word	0x080005d0

080001d8 <main>:
 *\param[in]
 *\param[out]
 *\retval
 */
int
main() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	vectortable_move();
 80001dc:	f000 f810 	bl	8000200 <vectortable_move>
	uart_init();
 80001e0:	f000 f8b6 	bl	8000350 <uart_init>
	dma_init();
 80001e4:	f000 f858 	bl	8000298 <dma_init>
	interrupt_init();
 80001e8:	f000 f826 	bl	8000238 <interrupt_init>

	while(!receive_done);
 80001ec:	bf00      	nop
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <main+0x24>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0fb      	beq.n	80001ee <main+0x16>
	update_firmware();
 80001f6:	f000 f9f7 	bl	80005e8 <__update_firmware_veneer>

	while (1) {
 80001fa:	e7fe      	b.n	80001fa <main+0x22>
 80001fc:	200005fc 	.word	0x200005fc

08000200 <vectortable_move>:
 *\param[out]
 *\retval
 */
void
vectortable_move()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *volatile)0x20000000;
 8000206:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800020a:	60bb      	str	r3, [r7, #8]
	void *volatile flash = (void *volatile)0x08000000;
 800020c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000210:	607b      	str	r3, [r7, #4]
	memcpy(ram, flash, 0x198);
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	6879      	ldr	r1, [r7, #4]
 8000216:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f9ca 	bl	80005b4 <memcpy>

	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <vectortable_move+0x34>)
 8000222:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	e000ed08 	.word	0xe000ed08

08000238 <interrupt_init>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
interrupt_init() {
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
	/*-----------------------DMA Transfer complete Interrupt-----------------------*/
	uint32_t volatile *const DMA_HIFCR    = (uint32_t *)(0x40026000 + 0x0C);
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <interrupt_init+0x4c>)
 8000240:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const DMA1_S7CR    = (uint32_t *)(0x40026000 + 0x10 + (0x18 * 7));
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <interrupt_init+0x50>)
 8000244:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const NVIC_ISER1 = (uint32_t *)(0xe000e100 + 0x04);
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <interrupt_init+0x54>)
 8000248:	607b      	str	r3, [r7, #4]
	/*clear stream 7 transfer complete interrupt flag*/
	*DMA_HIFCR |= (1 << 27);	// bit CTCIF7
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]
	/*enable vector interrupt position 47*/
	*NVIC_ISER1 |= (1 << (47 - 32));
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	/*change dma-interrupt handler*/
	*((volatile uint32_t *const)(0x20000000 + 0xFC)) = ((uint32_t)dma_transfer_handler | 1);
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <interrupt_init+0x58>)
 8000264:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <interrupt_init+0x5c>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6013      	str	r3, [r2, #0]
	/*enable transfer complete enable*/
	*DMA1_S7CR |= (1 << 4);		// bit TCIE
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f043 0210 	orr.w	r2, r3, #16
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	4002600c 	.word	0x4002600c
 8000288:	400260b8 	.word	0x400260b8
 800028c:	e000e104 	.word	0xe000e104
 8000290:	08000449 	.word	0x08000449
 8000294:	200000fc 	.word	0x200000fc

08000298 <dma_init>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
dma_init() {
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	; 0x24
 800029c:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	4b23      	ldr	r3, [pc, #140]	; (8000330 <dma_init+0x98>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a22      	ldr	r2, [pc, #136]	; (8000330 <dma_init+0x98>)
 80002a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
 80002ae:	4b20      	ldr	r3, [pc, #128]	; (8000330 <dma_init+0x98>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]

	/*-----------------------Rx DMA-----------------------*/
	uint32_t volatile *const USART2_DR   = (uint32_t *)(0x40004400 + 0x04);
 80002ba:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <dma_init+0x9c>)
 80002bc:	61fb      	str	r3, [r7, #28]
	uint32_t volatile *const USART2_CR3  = (uint32_t *)(0x40004400 + 0x14);
 80002be:	4b1e      	ldr	r3, [pc, #120]	; (8000338 <dma_init+0xa0>)
 80002c0:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const DMA1_S7CR    = (uint32_t *)(0x40026000 + 0x10 + (0x18 * 7));
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <dma_init+0xa4>)
 80002c4:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const DMA1_S7NDTR  = (uint32_t *)(0x40026000 + 0x14 + (0x18 * 7));
 80002c6:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <dma_init+0xa8>)
 80002c8:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const DMA1_S7PAR   = (uint32_t *)(0x40026000 + 0x18 + (0x18 * 7));
 80002ca:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <dma_init+0xac>)
 80002cc:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const DMA1_S7M0AR  = (uint32_t *)(0x40026000 + 0x1c + (0x18 * 7));
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <dma_init+0xb0>)
 80002d0:	60bb      	str	r3, [r7, #8]
	/*Rx DMA enable*/
	*USART2_CR3 |= (1 << 6);
 80002d2:	69bb      	ldr	r3, [r7, #24]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	601a      	str	r2, [r3, #0]
	/*channel 6*/
	*DMA1_S7CR |= (6 << 25);
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f043 6240 	orr.w	r2, r3, #201326592	; 0xc000000
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	601a      	str	r2, [r3, #0]
	/*number of data*/
	*DMA1_S7NDTR = sizeof(rx_dma_buffer);
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	f241 62bc 	movw	r2, #5820	; 0x16bc
 80002f0:	601a      	str	r2, [r3, #0]
	/*peripheral address*/
	*DMA1_S7PAR = (uint32_t)USART2_DR;
 80002f2:	69fa      	ldr	r2, [r7, #28]
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	601a      	str	r2, [r3, #0]
	/*memory address*/
	*DMA1_S7M0AR = (uint32_t)rx_dma_buffer;
 80002f8:	4a14      	ldr	r2, [pc, #80]	; (800034c <dma_init+0xb4>)
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	601a      	str	r2, [r3, #0]
	/*circular mode*/
	*DMA1_S7CR |= (1 << 8);
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	601a      	str	r2, [r3, #0]
	/*memory increment mode*/
	*DMA1_S7CR |= (1 << 10);
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	601a      	str	r2, [r3, #0]
	/*DMA stream enable*/
	*DMA1_S7CR |= (1 << 0);
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f043 0201 	orr.w	r2, r3, #1
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	601a      	str	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3724      	adds	r7, #36	; 0x24
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40004404 	.word	0x40004404
 8000338:	40004414 	.word	0x40004414
 800033c:	400260b8 	.word	0x400260b8
 8000340:	400260bc 	.word	0x400260bc
 8000344:	400260c0 	.word	0x400260c0
 8000348:	400260c4 	.word	0x400260c4
 800034c:	20000600 	.word	0x20000600

08000350 <uart_init>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
uart_init() {
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
	/*enable clock peripherals*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	2300      	movs	r3, #0
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	4b35      	ldr	r3, [pc, #212]	; (8000430 <uart_init+0xe0>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a34      	ldr	r2, [pc, #208]	; (8000430 <uart_init+0xe0>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
 8000366:	4b32      	ldr	r3, [pc, #200]	; (8000430 <uart_init+0xe0>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <uart_init+0xe0>)
 8000378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037a:	4a2d      	ldr	r2, [pc, #180]	; (8000430 <uart_init+0xe0>)
 800037c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000380:	6413      	str	r3, [r2, #64]	; 0x40
 8000382:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <uart_init+0xe0>)
 8000384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

	uint32_t volatile *const GPIOA_MODER = (uint32_t *)(0x40020000 + 0x00);
 800038e:	4b29      	ldr	r3, [pc, #164]	; (8000434 <uart_init+0xe4>)
 8000390:	61fb      	str	r3, [r7, #28]
	uint32_t volatile *const GPIOA_AFRL  = (uint32_t *)(0x40020000 + 0x20);
 8000392:	4b29      	ldr	r3, [pc, #164]	; (8000438 <uart_init+0xe8>)
 8000394:	61bb      	str	r3, [r7, #24]
	uint16_t volatile *const USART2_BRR = (uint16_t *)(0x40004400 + 0x08);
 8000396:	4b29      	ldr	r3, [pc, #164]	; (800043c <uart_init+0xec>)
 8000398:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const USART2_CR1 = (uint32_t *)(0x40004400 + 0x0c);
 800039a:	4b29      	ldr	r3, [pc, #164]	; (8000440 <uart_init+0xf0>)
 800039c:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const USART2_CR2 = (uint32_t *)(0x40004400 + 0x10);
 800039e:	4b29      	ldr	r3, [pc, #164]	; (8000444 <uart_init+0xf4>)
 80003a0:	60fb      	str	r3, [r7, #12]

	/*set PA2 as TX, PA3 as RX*/
	/*alternate mode*/
	*GPIOA_MODER &= ~((0b11 << (2 * 3)) | (0b11 << (2 * 2)));
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |=   (0b10 << (2 * 3)) | (0b10 << (2 * 2));
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	601a      	str	r2, [r3, #0]

	/*alternate function 7*/
	*GPIOA_AFRL &= ~((0b1111 << (4 * 3)) | (0b1111 << (4 * 2)));
 80003ba:	69bb      	ldr	r3, [r7, #24]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80003c2:	69bb      	ldr	r3, [r7, #24]
 80003c4:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRL |=   (0b0111 << (4 * 3)) | (0b0111 << (4 * 2));
 80003c6:	69bb      	ldr	r3, [r7, #24]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f443 42ee 	orr.w	r2, r3, #30464	; 0x7700
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	601a      	str	r2, [r3, #0]

	/*set data frame*/
	/*word length: 8 data bits*/
	*USART2_CR1 &= ~(1 << 12);	// bit M
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	601a      	str	r2, [r3, #0]
	/* 1 stop bit*/
	*USART2_CR2 &= (1 << 13);
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	601a      	str	r2, [r3, #0]
	*USART2_CR2 &= (1 << 12);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	601a      	str	r2, [r3, #0]
	/*disable parity bit*/
	*USART2_CR1 &= ~(1 << 10);	// bit PCE
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	601a      	str	r2, [r3, #0]
	/*set baudrate*/
	//fuart = 16mhz, baud = 9600 -> USART2_BRR = 104.1875
	/*uint16_t DIV_Mantissa = 16000000 / (16 * baudrate);
	uint8_t  DIV_Fraction = round((16000000 % (16 * baudrate)) * 16);
	*USART2_BRR = (DIV_Mantissa << 4) | DIV_Fraction;*/
	*USART2_BRR = (104 << 4) | 3;
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	f240 6283 	movw	r2, #1667	; 0x683
 8000408:	801a      	strh	r2, [r3, #0]


	/*enable Tx, Rx*/
	*USART2_CR1 |= (1 << 2) | (1 << 3);	// bit TE, RE
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 020c 	orr.w	r2, r3, #12
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	601a      	str	r2, [r3, #0]

	/*enable UART*/
	*USART2_CR1 |= (1 << 13);	// bit UE
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	3724      	adds	r7, #36	; 0x24
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40023800 	.word	0x40023800
 8000434:	40020000 	.word	0x40020000
 8000438:	40020020 	.word	0x40020020
 800043c:	40004408 	.word	0x40004408
 8000440:	4000440c 	.word	0x4000440c
 8000444:	40004410 	.word	0x40004410

08000448 <dma_transfer_handler>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
dma_transfer_handler() {
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
	uint32_t volatile *const DMA1_HIFCR    = (uint32_t *)(0x40026000 + 0x0C);
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <dma_transfer_handler+0x28>)
 8000450:	607b      	str	r3, [r7, #4]

	/*handler*/
	receive_done = 1;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <dma_transfer_handler+0x2c>)
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]

	/*clear stream 7 transfer complete interrupt flag*/
	*DMA1_HIFCR |= (1 << 27);	// bit CTCIF7
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	601a      	str	r2, [r3, #0]
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	4002600c 	.word	0x4002600c
 8000474:	200005fc 	.word	0x200005fc

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800047c:	e7fe      	b.n	800047c <NMI_Handler+0x4>

0800047e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <HardFault_Handler+0x4>

08000484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <MemManage_Handler+0x4>

0800048a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <BusFault_Handler+0x4>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <UsageFault_Handler+0x4>

08000496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f83e 	bl	8000544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <SystemInit+0x20>)
 80004d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004d6:	4a05      	ldr	r2, [pc, #20]	; (80004ec <SystemInit+0x20>)
 80004d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004f6:	490e      	ldr	r1, [pc, #56]	; (8000530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800050c:	4c0b      	ldr	r4, [pc, #44]	; (800053c <LoopFillZerobss+0x26>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800051a:	f7ff ffd7 	bl	80004cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051e:	f000 f825 	bl	800056c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000522:	f7ff fe59 	bl	80001d8 <main>
  bx  lr    
 8000526:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800052c:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8000530:	200005e0 	.word	0x200005e0
  ldr r2, =_sidata
 8000534:	080005f8 	.word	0x080005f8
  ldr r2, =_sbss
 8000538:	200005e0 	.word	0x200005e0
  ldr r4, =_ebss
 800053c:	20001cc0 	.word	0x20001cc0

08000540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC_IRQHandler>
	...

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000400 	.word	0x20000400
 8000568:	20001cbc 	.word	0x20001cbc

0800056c <__libc_init_array>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	4d0d      	ldr	r5, [pc, #52]	; (80005a4 <__libc_init_array+0x38>)
 8000570:	4c0d      	ldr	r4, [pc, #52]	; (80005a8 <__libc_init_array+0x3c>)
 8000572:	1b64      	subs	r4, r4, r5
 8000574:	10a4      	asrs	r4, r4, #2
 8000576:	2600      	movs	r6, #0
 8000578:	42a6      	cmp	r6, r4
 800057a:	d109      	bne.n	8000590 <__libc_init_array+0x24>
 800057c:	4d0b      	ldr	r5, [pc, #44]	; (80005ac <__libc_init_array+0x40>)
 800057e:	4c0c      	ldr	r4, [pc, #48]	; (80005b0 <__libc_init_array+0x44>)
 8000580:	f000 f826 	bl	80005d0 <_init>
 8000584:	1b64      	subs	r4, r4, r5
 8000586:	10a4      	asrs	r4, r4, #2
 8000588:	2600      	movs	r6, #0
 800058a:	42a6      	cmp	r6, r4
 800058c:	d105      	bne.n	800059a <__libc_init_array+0x2e>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f855 3b04 	ldr.w	r3, [r5], #4
 8000594:	4798      	blx	r3
 8000596:	3601      	adds	r6, #1
 8000598:	e7ee      	b.n	8000578 <__libc_init_array+0xc>
 800059a:	f855 3b04 	ldr.w	r3, [r5], #4
 800059e:	4798      	blx	r3
 80005a0:	3601      	adds	r6, #1
 80005a2:	e7f2      	b.n	800058a <__libc_init_array+0x1e>
 80005a4:	080005f0 	.word	0x080005f0
 80005a8:	080005f0 	.word	0x080005f0
 80005ac:	080005f0 	.word	0x080005f0
 80005b0:	080005f4 	.word	0x080005f4

080005b4 <memcpy>:
 80005b4:	440a      	add	r2, r1
 80005b6:	4291      	cmp	r1, r2
 80005b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80005bc:	d100      	bne.n	80005c0 <memcpy+0xc>
 80005be:	4770      	bx	lr
 80005c0:	b510      	push	{r4, lr}
 80005c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80005c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d1f9      	bne.n	80005c2 <memcpy+0xe>
 80005ce:	bd10      	pop	{r4, pc}

080005d0 <_init>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr

080005dc <_fini>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	bf00      	nop
 80005e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e2:	bc08      	pop	{r3}
 80005e4:	469e      	mov	lr, r3
 80005e6:	4770      	bx	lr

080005e8 <__update_firmware_veneer>:
 80005e8:	f85f f000 	ldr.w	pc, [pc]	; 80005ec <__update_firmware_veneer+0x4>
 80005ec:	200005bd 	.word	0x200005bd

Disassembly of section .data:

20000400 <uwTickFreq>:
20000400:	00000001                                ....

20000404 <flash_lock>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
flash_lock() {
20000404:	b480      	push	{r7}
20000406:	b083      	sub	sp, #12
20000408:	af00      	add	r7, sp, #0
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
2000040a:	4b0a      	ldr	r3, [pc, #40]	; (20000434 <flash_lock+0x30>)
2000040c:	607b      	str	r3, [r7, #4]

	/*check LOCK bit*/
	if (((*FLASH_CR >> 31) & 1) == 0) {
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	681b      	ldr	r3, [r3, #0]
20000412:	0fdb      	lsrs	r3, r3, #31
20000414:	f003 0301 	and.w	r3, r3, #1
20000418:	2b00      	cmp	r3, #0
2000041a:	d105      	bne.n	20000428 <flash_lock+0x24>
		*FLASH_CR |= (1 << 31);
2000041c:	687b      	ldr	r3, [r7, #4]
2000041e:	681b      	ldr	r3, [r3, #0]
20000420:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
20000424:	687b      	ldr	r3, [r7, #4]
20000426:	601a      	str	r2, [r3, #0]
	}
}
20000428:	bf00      	nop
2000042a:	370c      	adds	r7, #12
2000042c:	46bd      	mov	sp, r7
2000042e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000432:	4770      	bx	lr
20000434:	40023c10 	.word	0x40023c10

20000438 <flash_unlock>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
flash_unlock() {
20000438:	b480      	push	{r7}
2000043a:	b083      	sub	sp, #12
2000043c:	af00      	add	r7, sp, #0
	uint32_t volatile* const FLASH_KEYR = (uint32_t*)(0x40023c00 + 0x04);
2000043e:	4b0b      	ldr	r3, [pc, #44]	; (2000046c <flash_unlock+0x34>)
20000440:	607b      	str	r3, [r7, #4]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
20000442:	4b0b      	ldr	r3, [pc, #44]	; (20000470 <flash_unlock+0x38>)
20000444:	603b      	str	r3, [r7, #0]

	/*check LOCK bit*/
	if (((*FLASH_CR >> 31) & 1) == 1) {
20000446:	683b      	ldr	r3, [r7, #0]
20000448:	681b      	ldr	r3, [r3, #0]
2000044a:	0fdb      	lsrs	r3, r3, #31
2000044c:	f003 0301 	and.w	r3, r3, #1
20000450:	2b01      	cmp	r3, #1
20000452:	d105      	bne.n	20000460 <flash_unlock+0x28>
		*FLASH_KEYR = 0x45670123;
20000454:	687b      	ldr	r3, [r7, #4]
20000456:	4a07      	ldr	r2, [pc, #28]	; (20000474 <flash_unlock+0x3c>)
20000458:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
2000045a:	687b      	ldr	r3, [r7, #4]
2000045c:	4a06      	ldr	r2, [pc, #24]	; (20000478 <flash_unlock+0x40>)
2000045e:	601a      	str	r2, [r3, #0]
	}
}
20000460:	bf00      	nop
20000462:	370c      	adds	r7, #12
20000464:	46bd      	mov	sp, r7
20000466:	f85d 7b04 	ldr.w	r7, [sp], #4
2000046a:	4770      	bx	lr
2000046c:	40023c04 	.word	0x40023c04
20000470:	40023c10 	.word	0x40023c10
20000474:	45670123 	.word	0x45670123
20000478:	cdef89ab 	.word	0xcdef89ab

2000047c <flash_erase_sector>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
flash_erase_sector(eSERTOR_t sector) {
2000047c:	b580      	push	{r7, lr}
2000047e:	b084      	sub	sp, #16
20000480:	af00      	add	r7, sp, #0
20000482:	4603      	mov	r3, r0
20000484:	71fb      	strb	r3, [r7, #7]
	uint32_t volatile* const FLASH_SR   = (uint32_t*)(0x40023c00 + 0x0C);
20000486:	4b1a      	ldr	r3, [pc, #104]	; (200004f0 <flash_erase_sector+0x74>)
20000488:	60fb      	str	r3, [r7, #12]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
2000048a:	4b1a      	ldr	r3, [pc, #104]	; (200004f4 <flash_erase_sector+0x78>)
2000048c:	60bb      	str	r3, [r7, #8]

	flash_unlock();
2000048e:	f7ff ffd3 	bl	20000438 <flash_unlock>

	/*check BUSY bit*/
	while (((*FLASH_SR >> 16) & 1) == 1) {}
20000492:	bf00      	nop
20000494:	68fb      	ldr	r3, [r7, #12]
20000496:	681b      	ldr	r3, [r3, #0]
20000498:	0c1b      	lsrs	r3, r3, #16
2000049a:	f003 0301 	and.w	r3, r3, #1
2000049e:	2b01      	cmp	r3, #1
200004a0:	d0f8      	beq.n	20000494 <flash_erase_sector+0x18>
	/*SET erase sector mode*/
	*FLASH_CR |= (1 << 1);
200004a2:	68bb      	ldr	r3, [r7, #8]
200004a4:	681b      	ldr	r3, [r3, #0]
200004a6:	f043 0202 	orr.w	r2, r3, #2
200004aa:	68bb      	ldr	r3, [r7, #8]
200004ac:	601a      	str	r2, [r3, #0]
	/*select sector*/
	*FLASH_CR |= (sector << 3);
200004ae:	68bb      	ldr	r3, [r7, #8]
200004b0:	681b      	ldr	r3, [r3, #0]
200004b2:	79fa      	ldrb	r2, [r7, #7]
200004b4:	00d2      	lsls	r2, r2, #3
200004b6:	431a      	orrs	r2, r3
200004b8:	68bb      	ldr	r3, [r7, #8]
200004ba:	601a      	str	r2, [r3, #0]
	/*start erase*/
	*FLASH_CR |= (1 << 16);
200004bc:	68bb      	ldr	r3, [r7, #8]
200004be:	681b      	ldr	r3, [r3, #0]
200004c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
200004c4:	68bb      	ldr	r3, [r7, #8]
200004c6:	601a      	str	r2, [r3, #0]
	/*check BUSY bit*/
	while (((*FLASH_SR >> 16) & 1) == 1) {}
200004c8:	bf00      	nop
200004ca:	68fb      	ldr	r3, [r7, #12]
200004cc:	681b      	ldr	r3, [r3, #0]
200004ce:	0c1b      	lsrs	r3, r3, #16
200004d0:	f003 0301 	and.w	r3, r3, #1
200004d4:	2b01      	cmp	r3, #1
200004d6:	d0f8      	beq.n	200004ca <flash_erase_sector+0x4e>
	/*CLEAR erase sector mode*/
	*FLASH_CR &= ~(1 << 1);
200004d8:	68bb      	ldr	r3, [r7, #8]
200004da:	681b      	ldr	r3, [r3, #0]
200004dc:	f023 0202 	bic.w	r2, r3, #2
200004e0:	68bb      	ldr	r3, [r7, #8]
200004e2:	601a      	str	r2, [r3, #0]

	flash_lock();
200004e4:	f7ff ff8e 	bl	20000404 <flash_lock>
}
200004e8:	bf00      	nop
200004ea:	3710      	adds	r7, #16
200004ec:	46bd      	mov	sp, r7
200004ee:	bd80      	pop	{r7, pc}
200004f0:	40023c0c 	.word	0x40023c0c
200004f4:	40023c10 	.word	0x40023c10

200004f8 <flash_program_byte>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
flash_program_byte(void* address, uint8_t* buffer, uint8_t size) {
200004f8:	b580      	push	{r7, lr}
200004fa:	b088      	sub	sp, #32
200004fc:	af00      	add	r7, sp, #0
200004fe:	60f8      	str	r0, [r7, #12]
20000500:	60b9      	str	r1, [r7, #8]
20000502:	4613      	mov	r3, r2
20000504:	71fb      	strb	r3, [r7, #7]
	uint32_t volatile* const FLASH_SR   = (uint32_t*)(0x40023c00 + 0x0C);
20000506:	4b1d      	ldr	r3, [pc, #116]	; (2000057c <flash_program_byte+0x84>)
20000508:	61bb      	str	r3, [r7, #24]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
2000050a:	4b1d      	ldr	r3, [pc, #116]	; (20000580 <flash_program_byte+0x88>)
2000050c:	617b      	str	r3, [r7, #20]

	flash_unlock();
2000050e:	f7ff ff93 	bl	20000438 <flash_unlock>

	/*check BUSY bit*/
	while (((*FLASH_SR >> 16) & 1) == 1) {}
20000512:	bf00      	nop
20000514:	69bb      	ldr	r3, [r7, #24]
20000516:	681b      	ldr	r3, [r3, #0]
20000518:	0c1b      	lsrs	r3, r3, #16
2000051a:	f003 0301 	and.w	r3, r3, #1
2000051e:	2b01      	cmp	r3, #1
20000520:	d0f8      	beq.n	20000514 <flash_program_byte+0x1c>
	/*SET programming mode*/
	*FLASH_CR |= (1 << 0);
20000522:	697b      	ldr	r3, [r7, #20]
20000524:	681b      	ldr	r3, [r3, #0]
20000526:	f043 0201 	orr.w	r2, r3, #1
2000052a:	697b      	ldr	r3, [r7, #20]
2000052c:	601a      	str	r2, [r3, #0]
	/*write data*/
	for (uint8_t i = 0; i < size; i++) {
2000052e:	2300      	movs	r3, #0
20000530:	77fb      	strb	r3, [r7, #31]
20000532:	e00a      	b.n	2000054a <flash_program_byte+0x52>
		*((uint8_t*)(address)++) = buffer[i];
20000534:	7ffb      	ldrb	r3, [r7, #31]
20000536:	68ba      	ldr	r2, [r7, #8]
20000538:	441a      	add	r2, r3
2000053a:	68fb      	ldr	r3, [r7, #12]
2000053c:	1c59      	adds	r1, r3, #1
2000053e:	60f9      	str	r1, [r7, #12]
20000540:	7812      	ldrb	r2, [r2, #0]
20000542:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
20000544:	7ffb      	ldrb	r3, [r7, #31]
20000546:	3301      	adds	r3, #1
20000548:	77fb      	strb	r3, [r7, #31]
2000054a:	7ffa      	ldrb	r2, [r7, #31]
2000054c:	79fb      	ldrb	r3, [r7, #7]
2000054e:	429a      	cmp	r2, r3
20000550:	d3f0      	bcc.n	20000534 <flash_program_byte+0x3c>
	}
	/*CLEAR programming mode*/
	*FLASH_CR &= ~(1 << 0);
20000552:	697b      	ldr	r3, [r7, #20]
20000554:	681b      	ldr	r3, [r3, #0]
20000556:	f023 0201 	bic.w	r2, r3, #1
2000055a:	697b      	ldr	r3, [r7, #20]
2000055c:	601a      	str	r2, [r3, #0]
	/*check BUSY bit*/
	while (((*FLASH_SR >> 16) & 1) == 1) {}
2000055e:	bf00      	nop
20000560:	69bb      	ldr	r3, [r7, #24]
20000562:	681b      	ldr	r3, [r3, #0]
20000564:	0c1b      	lsrs	r3, r3, #16
20000566:	f003 0301 	and.w	r3, r3, #1
2000056a:	2b01      	cmp	r3, #1
2000056c:	d0f8      	beq.n	20000560 <flash_program_byte+0x68>

	flash_lock();
2000056e:	f7ff ff49 	bl	20000404 <flash_lock>
}
20000572:	bf00      	nop
20000574:	3720      	adds	r7, #32
20000576:	46bd      	mov	sp, r7
20000578:	bd80      	pop	{r7, pc}
2000057a:	bf00      	nop
2000057c:	40023c0c 	.word	0x40023c0c
20000580:	40023c10 	.word	0x40023c10

20000584 <reset_system>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
reset_system() {
20000584:	b480      	push	{r7}
20000586:	b083      	sub	sp, #12
20000588:	af00      	add	r7, sp, #0
	uint32_t volatile* const AIRCR   = (uint32_t*)0xE000ED0C;
2000058a:	4b0b      	ldr	r3, [pc, #44]	; (200005b8 <reset_system+0x34>)
2000058c:	607b      	str	r3, [r7, #4]
	*AIRCR |= (0x5FA << 16);		// register key
2000058e:	687b      	ldr	r3, [r7, #4]
20000590:	681b      	ldr	r3, [r3, #0]
20000592:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20000596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000059a:	687a      	ldr	r2, [r7, #4]
2000059c:	6013      	str	r3, [r2, #0]
	*AIRCR |= (1 << 2);				// request a reset
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	681b      	ldr	r3, [r3, #0]
200005a2:	f043 0204 	orr.w	r2, r3, #4
200005a6:	687b      	ldr	r3, [r7, #4]
200005a8:	601a      	str	r2, [r3, #0]
}
200005aa:	bf00      	nop
200005ac:	370c      	adds	r7, #12
200005ae:	46bd      	mov	sp, r7
200005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200005b4:	4770      	bx	lr
200005b6:	bf00      	nop
200005b8:	e000ed0c 	.word	0xe000ed0c

200005bc <update_firmware>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
update_firmware() {
200005bc:	b580      	push	{r7, lr}
200005be:	af00      	add	r7, sp, #0
	flash_erase_sector(SECTOR_0);
200005c0:	2000      	movs	r0, #0
200005c2:	f7ff ff5b 	bl	2000047c <flash_erase_sector>
	flash_program_byte((void*)SECTOR_0_BASE_ADDR, rx_dma_buffer, sizeof(rx_dma_buffer));
200005c6:	22bc      	movs	r2, #188	; 0xbc
200005c8:	4904      	ldr	r1, [pc, #16]	; (200005dc <update_firmware+0x20>)
200005ca:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
200005ce:	f7ff ff93 	bl	200004f8 <flash_program_byte>
	reset_system();
200005d2:	f7ff ffd7 	bl	20000584 <reset_system>
}
200005d6:	bf00      	nop
200005d8:	bd80      	pop	{r7, pc}
200005da:	bf00      	nop
200005dc:	20000600 	.word	0x20000600
