
rcc-timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000560  08000560  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000560  08000560  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000560  08000560  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000560  08000560  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000564  08000564  00010564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000568  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800056c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800056c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014e0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055c  00000000  00000000  00021514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00021a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00021c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014400  00000000  00000000  00021de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000028fd  00000000  00000000  000361e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000814b3  00000000  00000000  00038ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9f98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005ec  00000000  00000000  000b9fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000548 	.word	0x08000548

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000548 	.word	0x08000548

080001d8 <main>:

void sys_delay_ms(uint32_t time_milisec);


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	vectortable_move();
 80001dc:	f000 f808 	bl	80001f0 <vectortable_move>

	while (1)
	{
		tim4_pwm_ch1_start(1600, 1000, 50);
 80001e0:	2232      	movs	r2, #50	; 0x32
 80001e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001e6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80001ea:	f000 f81d 	bl	8000228 <tim4_pwm_ch1_start>
 80001ee:	e7f7      	b.n	80001e0 <main+0x8>

080001f0 <vectortable_move>:
 * @brief	: move vector table from FLASH to RAM
 * @param	: None
 * @retval	: None
 */
void vectortable_move()
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
	/*
	 * size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198
	 * */
	/* move vector table from flash to ram */
	void *volatile dst = (void *volatile)0x20000000;	// RAM_address
 80001f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80001fa:	60bb      	str	r3, [r7, #8]
	void *volatile src = (void *volatile)0x08000000;	// FLASH_address
 80001fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000200:	607b      	str	r3, [r7, #4]
	memcpy(dst, src, 0x198);
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	6879      	ldr	r1, [r7, #4]
 8000206:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f98e 	bl	800052c <memcpy>

	/**/
	uint32_t volatile *const VTOR = (uint32_t *)(0xE000ED08);
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <vectortable_move+0x34>)
 8000212:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	e000ed08 	.word	0xe000ed08

08000228 <tim4_pwm_ch1_start>:
	/*disable the counter*/
	*SYS_CSR &= ~(1 << 0);
}

void tim4_pwm_ch1_start(uint16_t prescaler, uint16_t count, uint8_t duty_cycle)
{
 8000228:	b480      	push	{r7}
 800022a:	b093      	sub	sp, #76	; 0x4c
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	80fb      	strh	r3, [r7, #6]
 8000232:	460b      	mov	r3, r1
 8000234:	80bb      	strh	r3, [r7, #4]
 8000236:	4613      	mov	r3, r2
 8000238:	70fb      	strb	r3, [r7, #3]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
 800023e:	4b5e      	ldr	r3, [pc, #376]	; (80003b8 <tim4_pwm_ch1_start+0x190>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a5d      	ldr	r2, [pc, #372]	; (80003b8 <tim4_pwm_ch1_start+0x190>)
 8000244:	f043 0308 	orr.w	r3, r3, #8
 8000248:	6313      	str	r3, [r2, #48]	; 0x30
 800024a:	4b5b      	ldr	r3, [pc, #364]	; (80003b8 <tim4_pwm_ch1_start+0x190>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	f003 0308 	and.w	r3, r3, #8
 8000252:	613b      	str	r3, [r7, #16]
 8000254:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM4_CLK_ENABLE();
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	4b57      	ldr	r3, [pc, #348]	; (80003b8 <tim4_pwm_ch1_start+0x190>)
 800025c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800025e:	4a56      	ldr	r2, [pc, #344]	; (80003b8 <tim4_pwm_ch1_start+0x190>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6413      	str	r3, [r2, #64]	; 0x40
 8000266:	4b54      	ldr	r3, [pc, #336]	; (80003b8 <tim4_pwm_ch1_start+0x190>)
 8000268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800026a:	f003 0304 	and.w	r3, r3, #4
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	68fb      	ldr	r3, [r7, #12]

	volatile uint32_t *const RCC_CR 	 = (uint32_t *)(0x40023800 + 0x00);
 8000272:	4b51      	ldr	r3, [pc, #324]	; (80003b8 <tim4_pwm_ch1_start+0x190>)
 8000274:	647b      	str	r3, [r7, #68]	; 0x44
	volatile uint32_t *const RCC_PLLCFGR = (uint32_t *)(0x40023800 + 0x04);
 8000276:	4b51      	ldr	r3, [pc, #324]	; (80003bc <tim4_pwm_ch1_start+0x194>)
 8000278:	643b      	str	r3, [r7, #64]	; 0x40
	volatile uint32_t *const RCC_CFGR	 = (uint32_t *)(0x40023800 + 0x08);
 800027a:	4b51      	ldr	r3, [pc, #324]	; (80003c0 <tim4_pwm_ch1_start+0x198>)
 800027c:	63fb      	str	r3, [r7, #60]	; 0x3c
	volatile uint32_t *const RCC_AHB1LPENR = (uint32_t *)(0x40023800 + 0x30);
 800027e:	4b51      	ldr	r3, [pc, #324]	; (80003c4 <tim4_pwm_ch1_start+0x19c>)
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
	volatile uint32_t *const RCC_APB1LPENR = (uint32_t *)(0x40023800 + 0x40);
 8000282:	4b51      	ldr	r3, [pc, #324]	; (80003c8 <tim4_pwm_ch1_start+0x1a0>)
 8000284:	637b      	str	r3, [r7, #52]	; 0x34

	*RCC_CR |= (1 << 16) | (1 << 24);
 8000286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000294:	6013      	str	r3, [r2, #0]
	while(((*RCC_CR >> 17) & 1) == 0);
 8000296:	bf00      	nop
 8000298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	0c5b      	lsrs	r3, r3, #17
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f8      	beq.n	8000298 <tim4_pwm_ch1_start+0x70>
	while(((*RCC_CR >> 25) & 1) == 0);
 80002a6:	bf00      	nop
 80002a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	0e5b      	lsrs	r3, r3, #25
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f8      	beq.n	80002a8 <tim4_pwm_ch1_start+0x80>
	*RCC_PLLCFGR |= (1 << 22);
 80002b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80002be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002c0:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= (9 << 0);
 80002c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0209 	orr.w	r2, r3, #9
 80002ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002cc:	601a      	str	r2, [r3, #0]
	*RCC_CFGR |= (1 << 1);
 80002ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0202 	orr.w	r2, r3, #2
 80002d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002d8:	601a      	str	r2, [r3, #0]
	*RCC_AHB1LPENR |= (1 << 3);
 80002da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0208 	orr.w	r2, r3, #8
 80002e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002e4:	601a      	str	r2, [r3, #0]
	*RCC_APB1LPENR |= (1 << 2);
 80002e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f043 0204 	orr.w	r2, r3, #4
 80002ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002f0:	601a      	str	r2, [r3, #0]

	volatile uint32_t *const GPIOD_MODER = (uint32_t *)(0x40020c00 + 0x00);
 80002f2:	4b36      	ldr	r3, [pc, #216]	; (80003cc <tim4_pwm_ch1_start+0x1a4>)
 80002f4:	633b      	str	r3, [r7, #48]	; 0x30
	volatile uint32_t *const GPIOD_AFRH  = (uint32_t *)(0x40020c00 + 0x24);
 80002f6:	4b36      	ldr	r3, [pc, #216]	; (80003d0 <tim4_pwm_ch1_start+0x1a8>)
 80002f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint32_t *const TIM4_CR1    = (uint32_t *)(0x40000800 + 0x00);
 80002fa:	4b36      	ldr	r3, [pc, #216]	; (80003d4 <tim4_pwm_ch1_start+0x1ac>)
 80002fc:	62bb      	str	r3, [r7, #40]	; 0x28
	volatile uint32_t *const TIM4_CCMR1  = (uint32_t *)(0x40000800 + 0x18);
 80002fe:	4b36      	ldr	r3, [pc, #216]	; (80003d8 <tim4_pwm_ch1_start+0x1b0>)
 8000300:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t *const TIM4_CCER   = (uint32_t *)(0x40000800 + 0x20);
 8000302:	4b36      	ldr	r3, [pc, #216]	; (80003dc <tim4_pwm_ch1_start+0x1b4>)
 8000304:	623b      	str	r3, [r7, #32]
	volatile uint32_t *const TIM4_PCR    = (uint32_t *)(0x40000800 + 0x28);
 8000306:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <tim4_pwm_ch1_start+0x1b8>)
 8000308:	61fb      	str	r3, [r7, #28]
	volatile uint32_t *const TIM4_ARR    = (uint32_t *)(0x40000800 + 0x2c);
 800030a:	4b36      	ldr	r3, [pc, #216]	; (80003e4 <tim4_pwm_ch1_start+0x1bc>)
 800030c:	61bb      	str	r3, [r7, #24]
	volatile uint32_t *const TIM4_CCR1   = (uint32_t *)(0x40000800 + 0x34);
 800030e:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <tim4_pwm_ch1_start+0x1c0>)
 8000310:	617b      	str	r3, [r7, #20]

	/*alternate mode*/
	*GPIOD_MODER &= ~(0b11 << (2 * 12));
 8000312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800031a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800031c:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |=  (0b10 << (2 * 12));
 800031e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000328:	601a      	str	r2, [r3, #0]

	/*alternate function 2*/
	*GPIOD_AFRH &= ~(0b1111 << (4 * 4));
 800032a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000334:	601a      	str	r2, [r3, #0]
	*GPIOD_AFRH |=  (2 << (4 * 4));
 8000336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000340:	601a      	str	r2, [r3, #0]

	*TIM4_ARR = count - 1;							/*set count*/
 8000342:	88bb      	ldrh	r3, [r7, #4]
 8000344:	3b01      	subs	r3, #1
 8000346:	461a      	mov	r2, r3
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	601a      	str	r2, [r3, #0]
	*TIM4_PCR = prescaler - 1;						/*set prescaler*/
 800034c:	88fb      	ldrh	r3, [r7, #6]
 800034e:	3b01      	subs	r3, #1
 8000350:	461a      	mov	r2, r3
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	601a      	str	r2, [r3, #0]

	*TIM4_CCR1 = (duty_cycle * (*TIM4_ARR + 1)) / 100;	/*set duty cycle*/
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	69ba      	ldr	r2, [r7, #24]
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	3201      	adds	r2, #1
 800035e:	fb02 f303 	mul.w	r3, r2, r3
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <tim4_pwm_ch1_start+0x1c4>)
 8000364:	fba2 2303 	umull	r2, r3, r2, r3
 8000368:	095a      	lsrs	r2, r3, #5
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	601a      	str	r2, [r3, #0]

	/*up-counter mode*/
	*TIM4_CR1 &= ~(1 << 4);
 800036e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f023 0210 	bic.w	r2, r3, #16
 8000376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000378:	601a      	str	r2, [r3, #0]

	/*pwm mode 1: CNT < CCR1 -> active*/
	*TIM4_CCMR1 &= ~(0b111<<4);
 800037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000384:	601a      	str	r2, [r3, #0]
	*TIM4_CCMR1 |= (0b11 << 5);
 8000386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000390:	601a      	str	r2, [r3, #0]

	*TIM4_CCER |= (1 << 0);						/*enable OC1 chanel 1*/
 8000392:	6a3b      	ldr	r3, [r7, #32]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f043 0201 	orr.w	r2, r3, #1
 800039a:	6a3b      	ldr	r3, [r7, #32]
 800039c:	601a      	str	r2, [r3, #0]
	*TIM4_CR1  |= (1 << 0);						/*enable counter */
 800039e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 0201 	orr.w	r2, r3, #1
 80003a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a8:	601a      	str	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	374c      	adds	r7, #76	; 0x4c
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40023800 	.word	0x40023800
 80003bc:	40023804 	.word	0x40023804
 80003c0:	40023808 	.word	0x40023808
 80003c4:	40023830 	.word	0x40023830
 80003c8:	40023840 	.word	0x40023840
 80003cc:	40020c00 	.word	0x40020c00
 80003d0:	40020c24 	.word	0x40020c24
 80003d4:	40000800 	.word	0x40000800
 80003d8:	40000818 	.word	0x40000818
 80003dc:	40000820 	.word	0x40000820
 80003e0:	40000828 	.word	0x40000828
 80003e4:	4000082c 	.word	0x4000082c
 80003e8:	40000834 	.word	0x40000834
 80003ec:	51eb851f 	.word	0x51eb851f

080003f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <NMI_Handler+0x4>

080003f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <HardFault_Handler+0x4>

080003fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <MemManage_Handler+0x4>

08000402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <BusFault_Handler+0x4>

08000408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040c:	e7fe      	b.n	800040c <UsageFault_Handler+0x4>

0800040e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043c:	f000 f83e 	bl	80004bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <SystemInit+0x20>)
 800044a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800044e:	4a05      	ldr	r2, [pc, #20]	; (8000464 <SystemInit+0x20>)
 8000450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800046e:	490e      	ldr	r1, [pc, #56]	; (80004a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000470:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000484:	4c0b      	ldr	r4, [pc, #44]	; (80004b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000492:	f7ff ffd7 	bl	8000444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000496:	f000 f825 	bl	80004e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800049a:	f7ff fe9d 	bl	80001d8 <main>
  bx  lr    
 800049e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ac:	08000568 	.word	0x08000568
  ldr r2, =_sbss
 80004b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b4:	20000024 	.word	0x20000024

080004b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>
	...

080004bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <HAL_IncTick+0x20>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_IncTick+0x24>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_IncTick+0x24>)
 80004ce:	6013      	str	r3, [r2, #0]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000020 	.word	0x20000020

080004e4 <__libc_init_array>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	4d0d      	ldr	r5, [pc, #52]	; (800051c <__libc_init_array+0x38>)
 80004e8:	4c0d      	ldr	r4, [pc, #52]	; (8000520 <__libc_init_array+0x3c>)
 80004ea:	1b64      	subs	r4, r4, r5
 80004ec:	10a4      	asrs	r4, r4, #2
 80004ee:	2600      	movs	r6, #0
 80004f0:	42a6      	cmp	r6, r4
 80004f2:	d109      	bne.n	8000508 <__libc_init_array+0x24>
 80004f4:	4d0b      	ldr	r5, [pc, #44]	; (8000524 <__libc_init_array+0x40>)
 80004f6:	4c0c      	ldr	r4, [pc, #48]	; (8000528 <__libc_init_array+0x44>)
 80004f8:	f000 f826 	bl	8000548 <_init>
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	10a4      	asrs	r4, r4, #2
 8000500:	2600      	movs	r6, #0
 8000502:	42a6      	cmp	r6, r4
 8000504:	d105      	bne.n	8000512 <__libc_init_array+0x2e>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	f855 3b04 	ldr.w	r3, [r5], #4
 800050c:	4798      	blx	r3
 800050e:	3601      	adds	r6, #1
 8000510:	e7ee      	b.n	80004f0 <__libc_init_array+0xc>
 8000512:	f855 3b04 	ldr.w	r3, [r5], #4
 8000516:	4798      	blx	r3
 8000518:	3601      	adds	r6, #1
 800051a:	e7f2      	b.n	8000502 <__libc_init_array+0x1e>
 800051c:	08000560 	.word	0x08000560
 8000520:	08000560 	.word	0x08000560
 8000524:	08000560 	.word	0x08000560
 8000528:	08000564 	.word	0x08000564

0800052c <memcpy>:
 800052c:	440a      	add	r2, r1
 800052e:	4291      	cmp	r1, r2
 8000530:	f100 33ff 	add.w	r3, r0, #4294967295
 8000534:	d100      	bne.n	8000538 <memcpy+0xc>
 8000536:	4770      	bx	lr
 8000538:	b510      	push	{r4, lr}
 800053a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800053e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000542:	4291      	cmp	r1, r2
 8000544:	d1f9      	bne.n	800053a <memcpy+0xe>
 8000546:	bd10      	pop	{r4, pc}

08000548 <_init>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr

08000554 <_fini>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr
