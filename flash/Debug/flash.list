
flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000374  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800050c  0800050c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800050c  0800050c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800050c  0800050c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800050c  0800050c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800050c  0800050c  0001050c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000510  08000510  00010510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000514  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000518  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000518  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000122d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004fd  00000000  00000000  00021261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00021760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00021948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014878  00000000  00000000  00021ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029ea  00000000  00000000  00036360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823fa  00000000  00000000  00038d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb144  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000614  00000000  00000000  000bb194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004f4 	.word	0x080004f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080004f4 	.word	0x080004f4

080001d8 <main>:
 *\param[in]
 *\param[out]
 *\retval
 */
int
main() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	vectortable_move();
 80001dc:	f000 f80c 	bl	80001f8 <vectortable_move>
	tim_systick_init();
 80001e0:	f000 f826 	bl	8000230 <tim_systick_init>

	flash_erase_sector(7);
 80001e4:	2007      	movs	r0, #7
 80001e6:	f000 f843 	bl	8000270 <flash_erase_sector>
	flash_write_byte(0x08060000, 'a');
 80001ea:	2161      	movs	r1, #97	; 0x61
 80001ec:	4801      	ldr	r0, [pc, #4]	; (80001f4 <main+0x1c>)
 80001ee:	f000 f891 	bl	8000314 <flash_write_byte>

	while (1) {
 80001f2:	e7fe      	b.n	80001f2 <main+0x1a>
 80001f4:	08060000 	.word	0x08060000

080001f8 <vectortable_move>:
 *\param[out]
 *\retval
 */
void
vectortable_move()
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *volatile)0x20000000;
 80001fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000202:	60bb      	str	r3, [r7, #8]
	void *volatile flash = (void *volatile)0x08000000;
 8000204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000208:	607b      	str	r3, [r7, #4]
	memcpy(ram, flash, 0x198);
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	6879      	ldr	r1, [r7, #4]
 800020e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f960 	bl	80004d8 <memcpy>

	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <vectortable_move+0x34>)
 800021a:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000222:	601a      	str	r2, [r3, #0]
}
 8000224:	bf00      	nop
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	e000ed08 	.word	0xe000ed08

08000230 <tim_systick_init>:
 *\param[out]
 *\retval
 */
void
tim_systick_init()
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
	uint32_t *SYS_CSR = (uint32_t *)(0xe000e010 + 0x00);
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <tim_systick_init+0x38>)
 8000238:	607b      	str	r3, [r7, #4]
	uint32_t *SYS_RVR = (uint32_t *)(0xe000e010 + 0x00);
 800023a:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <tim_systick_init+0x38>)
 800023c:	603b      	str	r3, [r7, #0]

	/*clock source: processor clock*/
	*SYS_CSR |= (1 << 2);	// bit CLKSOURCE
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 0204 	orr.w	r2, r3, #4
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]

	/*set count*/
	*SYS_RVR = 160000 - 1;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	4a07      	ldr	r2, [pc, #28]	; (800026c <tim_systick_init+0x3c>)
 800024e:	601a      	str	r2, [r3, #0]

	/*enable the counter*/
	*SYS_CSR |= (1 << 0);	// bit ENABLE
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f043 0201 	orr.w	r2, r3, #1
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	601a      	str	r2, [r3, #0]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	e000e010 	.word	0xe000e010
 800026c:	000270ff 	.word	0x000270ff

08000270 <flash_erase_sector>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
flash_erase_sector(uint8_t sector) {
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	uint32_t volatile* const FLASH_KEYR = (uint32_t*)(0x40023c00 + 0x04);
 800027a:	4b21      	ldr	r3, [pc, #132]	; (8000300 <flash_erase_sector+0x90>)
 800027c:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const FLASH_SR   = (uint32_t*)(0x40023c00 + 0x0C);
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <flash_erase_sector+0x94>)
 8000280:	613b      	str	r3, [r7, #16]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <flash_erase_sector+0x98>)
 8000284:	60fb      	str	r3, [r7, #12]


	/*check LOCK bit*/
	if (((*FLASH_CR >> 31) & 1) == 1) {
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	0fdb      	lsrs	r3, r3, #31
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	2b01      	cmp	r3, #1
 8000292:	d105      	bne.n	80002a0 <flash_erase_sector+0x30>
		*FLASH_KEYR = 0x45670123;
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	4a1d      	ldr	r2, [pc, #116]	; (800030c <flash_erase_sector+0x9c>)
 8000298:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	4a1c      	ldr	r2, [pc, #112]	; (8000310 <flash_erase_sector+0xa0>)
 800029e:	601a      	str	r2, [r3, #0]
	}
	/*check BUSY bit*/
	while (((*FLASH_SR >> 16) & 1) == 1) {}
 80002a0:	bf00      	nop
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	0c1b      	lsrs	r3, r3, #16
 80002a8:	f003 0301 	and.w	r3, r3, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d0f8      	beq.n	80002a2 <flash_erase_sector+0x32>
	/*SET erase sector mode*/
	*FLASH_CR |= (1 << 1);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f043 0202 	orr.w	r2, r3, #2
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	601a      	str	r2, [r3, #0]
	/*select sector*/
	*FLASH_CR |= (sector << 3);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	79fa      	ldrb	r2, [r7, #7]
 80002c2:	00d2      	lsls	r2, r2, #3
 80002c4:	431a      	orrs	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	601a      	str	r2, [r3, #0]
	/*start erase*/
	*FLASH_CR |= (1 << 16);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]
	/*check BUSY bit*/
	while (((*FLASH_SR >> 16) & 1) == 1) {}
 80002d6:	bf00      	nop
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	0c1b      	lsrs	r3, r3, #16
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d0f8      	beq.n	80002d8 <flash_erase_sector+0x68>
	/*CLEAR erase sector mode*/
	*FLASH_CR &= ~(1 << 1);
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f023 0202 	bic.w	r2, r3, #2
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	371c      	adds	r7, #28
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023c04 	.word	0x40023c04
 8000304:	40023c0c 	.word	0x40023c0c
 8000308:	40023c10 	.word	0x40023c10
 800030c:	45670123 	.word	0x45670123
 8000310:	cdef89ab 	.word	0xcdef89ab

08000314 <flash_write_byte>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
flash_write_byte(uint32_t address, uint8_t data) {
 8000314:	b480      	push	{r7}
 8000316:	b087      	sub	sp, #28
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
	uint32_t volatile* const FLASH_KEYR = (uint32_t*)(0x40023c00 + 0x04);
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <flash_write_byte+0x74>)
 8000322:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const FLASH_SR   = (uint32_t*)(0x40023c00 + 0x0C);
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <flash_write_byte+0x78>)
 8000326:	613b      	str	r3, [r7, #16]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
 8000328:	4b19      	ldr	r3, [pc, #100]	; (8000390 <flash_write_byte+0x7c>)
 800032a:	60fb      	str	r3, [r7, #12]

	/*check LOCK bit*/
	if (((*FLASH_CR >> 31) & 1) == 1) {
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	0fdb      	lsrs	r3, r3, #31
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	2b01      	cmp	r3, #1
 8000338:	d105      	bne.n	8000346 <flash_write_byte+0x32>
		*FLASH_KEYR = 0x45670123;
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	4a15      	ldr	r2, [pc, #84]	; (8000394 <flash_write_byte+0x80>)
 800033e:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	4a15      	ldr	r2, [pc, #84]	; (8000398 <flash_write_byte+0x84>)
 8000344:	601a      	str	r2, [r3, #0]
	}
	/*check BUSY bit*/
	while (((*FLASH_SR >> 16) & 1) == 1) {}
 8000346:	bf00      	nop
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	0c1b      	lsrs	r3, r3, #16
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	2b01      	cmp	r3, #1
 8000354:	d0f8      	beq.n	8000348 <flash_write_byte+0x34>
	/*SET programming mode*/
	*FLASH_CR |= (1 << 0);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f043 0201 	orr.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	/*write data*/
	*(uint32_t*)(address) = (uint32_t)data;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	78fa      	ldrb	r2, [r7, #3]
 8000366:	601a      	str	r2, [r3, #0]
	/*check BUSY bit*/
	while (((*FLASH_SR >> 16) & 1) == 1) {}
 8000368:	bf00      	nop
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	0c1b      	lsrs	r3, r3, #16
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	2b01      	cmp	r3, #1
 8000376:	d0f8      	beq.n	800036a <flash_write_byte+0x56>
}
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	371c      	adds	r7, #28
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40023c04 	.word	0x40023c04
 800038c:	40023c0c 	.word	0x40023c0c
 8000390:	40023c10 	.word	0x40023c10
 8000394:	45670123 	.word	0x45670123
 8000398:	cdef89ab 	.word	0xcdef89ab

0800039c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <NMI_Handler+0x4>

080003a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <HardFault_Handler+0x4>

080003a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <MemManage_Handler+0x4>

080003ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <BusFault_Handler+0x4>

080003b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <UsageFault_Handler+0x4>

080003ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e8:	f000 f83e 	bl	8000468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <SystemInit+0x20>)
 80003f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fa:	4a05      	ldr	r2, [pc, #20]	; (8000410 <SystemInit+0x20>)
 80003fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800044c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800041a:	490e      	ldr	r1, [pc, #56]	; (8000454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000420:	e002      	b.n	8000428 <LoopCopyDataInit>

08000422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000426:	3304      	adds	r3, #4

08000428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800042c:	d3f9      	bcc.n	8000422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042e:	4a0b      	ldr	r2, [pc, #44]	; (800045c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000430:	4c0b      	ldr	r4, [pc, #44]	; (8000460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000434:	e001      	b.n	800043a <LoopFillZerobss>

08000436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000438:	3204      	adds	r2, #4

0800043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800043c:	d3fb      	bcc.n	8000436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800043e:	f7ff ffd7 	bl	80003f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000442:	f000 f825 	bl	8000490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000446:	f7ff fec7 	bl	80001d8 <main>
  bx  lr    
 800044a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800044c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000458:	08000514 	.word	0x08000514
  ldr r2, =_sbss
 800045c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000460:	20000024 	.word	0x20000024

08000464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_IncTick+0x20>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <HAL_IncTick+0x24>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_IncTick+0x24>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	20000000 	.word	0x20000000
 800048c:	20000020 	.word	0x20000020

08000490 <__libc_init_array>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	4d0d      	ldr	r5, [pc, #52]	; (80004c8 <__libc_init_array+0x38>)
 8000494:	4c0d      	ldr	r4, [pc, #52]	; (80004cc <__libc_init_array+0x3c>)
 8000496:	1b64      	subs	r4, r4, r5
 8000498:	10a4      	asrs	r4, r4, #2
 800049a:	2600      	movs	r6, #0
 800049c:	42a6      	cmp	r6, r4
 800049e:	d109      	bne.n	80004b4 <__libc_init_array+0x24>
 80004a0:	4d0b      	ldr	r5, [pc, #44]	; (80004d0 <__libc_init_array+0x40>)
 80004a2:	4c0c      	ldr	r4, [pc, #48]	; (80004d4 <__libc_init_array+0x44>)
 80004a4:	f000 f826 	bl	80004f4 <_init>
 80004a8:	1b64      	subs	r4, r4, r5
 80004aa:	10a4      	asrs	r4, r4, #2
 80004ac:	2600      	movs	r6, #0
 80004ae:	42a6      	cmp	r6, r4
 80004b0:	d105      	bne.n	80004be <__libc_init_array+0x2e>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b8:	4798      	blx	r3
 80004ba:	3601      	adds	r6, #1
 80004bc:	e7ee      	b.n	800049c <__libc_init_array+0xc>
 80004be:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c2:	4798      	blx	r3
 80004c4:	3601      	adds	r6, #1
 80004c6:	e7f2      	b.n	80004ae <__libc_init_array+0x1e>
 80004c8:	0800050c 	.word	0x0800050c
 80004cc:	0800050c 	.word	0x0800050c
 80004d0:	0800050c 	.word	0x0800050c
 80004d4:	08000510 	.word	0x08000510

080004d8 <memcpy>:
 80004d8:	440a      	add	r2, r1
 80004da:	4291      	cmp	r1, r2
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d100      	bne.n	80004e4 <memcpy+0xc>
 80004e2:	4770      	bx	lr
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80004ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80004ee:	4291      	cmp	r1, r2
 80004f0:	d1f9      	bne.n	80004e6 <memcpy+0xe>
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <_init>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr

08000500 <_fini>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr
