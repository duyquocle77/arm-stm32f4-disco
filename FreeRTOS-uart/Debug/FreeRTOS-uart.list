
FreeRTOS-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007014  08007014  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007014  08007014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800701c  0800701c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800701c  0800701c  0001701c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a28  20000074  08007098  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a9c  08007098  00024a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013246  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aae  00000000  00000000  000332ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00035d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00036ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ab8  00000000  00000000  00037b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136dc  00000000  00000000  0003b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf06  00000000  00000000  0004ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eabca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  000eac1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e6c 	.word	0x08006e6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006e6c 	.word	0x08006e6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fb9c 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f85c 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f936 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f90a 	bl	80007bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005a8:	f000 f8b4 	bl	8000714 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ac:	f002 fa24 	bl	80029f8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of key */
  keyHandle = osSemaphoreNew(1, 1, &key_attributes);
 80005b0:	4a19      	ldr	r2, [pc, #100]	; (8000618 <main+0x84>)
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f002 fbd5 	bl	8002d64 <osSemaphoreNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <main+0x88>)
 80005be:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Timer1 */
  Timer1Handle = osTimerNew(Timer1_func, osTimerPeriodic, NULL, &Timer1_attributes);
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <main+0x8c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	2101      	movs	r1, #1
 80005c6:	4817      	ldr	r0, [pc, #92]	; (8000624 <main+0x90>)
 80005c8:	f002 fb22 	bl	8002c10 <osTimerNew>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <main+0x94>)
 80005d0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of adc_queue */
  adc_queueHandle = osMessageQueueNew (16, sizeof(uint32_t), &adc_queue_attributes);
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <main+0x98>)
 80005d4:	2104      	movs	r1, #4
 80005d6:	2010      	movs	r0, #16
 80005d8:	f002 fce4 	bl	8002fa4 <osMessageQueueNew>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <main+0x9c>)
 80005e0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <main+0xa0>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	4814      	ldr	r0, [pc, #80]	; (8000638 <main+0xa4>)
 80005e8:	f002 fa50 	bl	8002a8c <osThreadNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <main+0xa8>)
 80005f0:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_func, NULL, &Task1_attributes);
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <main+0xac>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <main+0xb0>)
 80005f8:	f002 fa48 	bl	8002a8c <osThreadNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a12      	ldr	r2, [pc, #72]	; (8000648 <main+0xb4>)
 8000600:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_func, NULL, &Task2_attributes);
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <main+0xb8>)
 8000604:	2100      	movs	r1, #0
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <main+0xbc>)
 8000608:	f002 fa40 	bl	8002a8c <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <main+0xc0>)
 8000610:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000612:	f002 fa15 	bl	8002a40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0x82>
 8000618:	08006fb8 	.word	0x08006fb8
 800061c:	20000130 	.word	0x20000130
 8000620:	08006fa8 	.word	0x08006fa8
 8000624:	08000a35 	.word	0x08000a35
 8000628:	2000012c 	.word	0x2000012c
 800062c:	08006f90 	.word	0x08006f90
 8000630:	20000128 	.word	0x20000128
 8000634:	08006f24 	.word	0x08006f24
 8000638:	08000899 	.word	0x08000899
 800063c:	2000011c 	.word	0x2000011c
 8000640:	08006f48 	.word	0x08006f48
 8000644:	080008a9 	.word	0x080008a9
 8000648:	20000120 	.word	0x20000120
 800064c:	08006f6c 	.word	0x08006f6c
 8000650:	080009a5 	.word	0x080009a5
 8000654:	20000124 	.word	0x20000124

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 ff98 	bl	800659c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xb4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xb4>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xb4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <SystemClock_Config+0xb8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <SystemClock_Config+0xb8>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <SystemClock_Config+0xb8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 f947 	bl	800195c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d4:	f000 f9cc 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fbaa 	bl	8001e4c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006fe:	f000 f9b7 	bl	8000a70 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_ADC1_Init+0x98>)
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x9c>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_ADC1_Init+0x98>)
 8000754:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_ADC1_Init+0xa0>)
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_ADC1_Init+0x98>)
 8000760:	2201      	movs	r2, #1
 8000762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ADC1_Init+0x98>)
 800076e:	2201      	movs	r2, #1
 8000770:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <MX_ADC1_Init+0x98>)
 8000774:	f000 fb20 	bl	8000db8 <HAL_ADC_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f977 	bl	8000a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_ADC1_Init+0xa4>)
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_ADC1_Init+0x98>)
 8000794:	f000 fc16 	bl	8000fc4 <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800079e:	f000 f967 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000090 	.word	0x20000090
 80007b0:	40012000 	.word	0x40012000
 80007b4:	0f000001 	.word	0x0f000001
 80007b8:	10000012 	.word	0x10000012

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f001 fd0a 	bl	800220c <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f937 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000d8 	.word	0x200000d8
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_GPIO_Init+0x80>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_GPIO_Init+0x80>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_GPIO_Init+0x80>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_GPIO_Init+0x80>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a11      	ldr	r2, [pc, #68]	; (8000890 <MX_GPIO_Init+0x80>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_GPIO_Init+0x80>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x84>)
 8000866:	f001 f845 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800086a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_GPIO_Init+0x84>)
 8000884:	f000 feb2 	bl	80015ec <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020c00 	.word	0x40020c00

08000898 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f002 f985 	bl	8002bb0 <osDelay>
 80008a6:	e7fb      	b.n	80008a0 <StartDefaultTask+0x8>

080008a8 <Task1_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1_func */
void Task1_func(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_func */
	osTimerStart(Timer1Handle, 200);
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <Task1_func+0xdc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	21c8      	movs	r1, #200	; 0xc8
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 fa26 	bl	8002d08 <osTimerStart>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80008bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c0:	4831      	ldr	r0, [pc, #196]	; (8000988 <Task1_func+0xe0>)
 80008c2:	f001 f830 	bl	8001926 <HAL_GPIO_TogglePin>

	  char msg2print[32] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	619a      	str	r2, [r3, #24]
	  uint32_t adc_value = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  uint32_t msg_cnt = osMessageQueueGetCount(adc_queueHandle);
 80008e2:	4b2a      	ldr	r3, [pc, #168]	; (800098c <Task1_func+0xe4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 fc8e 	bl	8003208 <osMessageQueueGetCount>
 80008ec:	6338      	str	r0, [r7, #48]	; 0x30
	  osMessageQueueGet(adc_queueHandle, &adc_value, 0, HAL_MAX_DELAY);
 80008ee:	4b27      	ldr	r3, [pc, #156]	; (800098c <Task1_func+0xe4>)
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	2200      	movs	r2, #0
 80008fc:	f002 fc26 	bl	800314c <osMessageQueueGet>
	  sprintf(msg2print, "adc value: %ld", adc_value);
 8000900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4922      	ldr	r1, [pc, #136]	; (8000990 <Task1_func+0xe8>)
 8000908:	4618      	mov	r0, r3
 800090a:	f005 fe4f 	bl	80065ac <siprintf>
	  for (uint32_t i = 1; i < msg_cnt; i++) {
 800090e:	2301      	movs	r3, #1
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
 8000912:	e013      	b.n	800093c <Task1_func+0x94>
		  osMessageQueueGet(adc_queueHandle, &adc_value, 0, HAL_MAX_DELAY);
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <Task1_func+0xe4>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	2200      	movs	r2, #0
 8000922:	f002 fc13 	bl	800314c <osMessageQueueGet>
		  sprintf(msg2print, "%s, %ld", msg2print, adc_value);
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	f107 020c 	add.w	r2, r7, #12
 800092c:	f107 000c 	add.w	r0, r7, #12
 8000930:	4918      	ldr	r1, [pc, #96]	; (8000994 <Task1_func+0xec>)
 8000932:	f005 fe3b 	bl	80065ac <siprintf>
	  for (uint32_t i = 1; i < msg_cnt; i++) {
 8000936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000938:	3301      	adds	r3, #1
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
 800093c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000940:	429a      	cmp	r2, r3
 8000942:	d3e7      	bcc.n	8000914 <Task1_func+0x6c>
	  }
	  sprintf(msg2print, "%s\r\n", msg2print);
 8000944:	f107 020c 	add.w	r2, r7, #12
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4912      	ldr	r1, [pc, #72]	; (8000998 <Task1_func+0xf0>)
 800094e:	4618      	mov	r0, r3
 8000950:	f005 fe2c 	bl	80065ac <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg2print, strlen(msg2print), HAL_MAX_DELAY);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fc41 	bl	80001e0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	f107 010c 	add.w	r1, r7, #12
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <Task1_func+0xf4>)
 800096c:	f001 fc9b 	bl	80022a6 <HAL_UART_Transmit>
	  osSemaphoreRelease(keyHandle);
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <Task1_func+0xf8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fad1 	bl	8002f1c <osSemaphoreRelease>
	  osDelay(500);
 800097a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097e:	f002 f917 	bl	8002bb0 <osDelay>
  {
 8000982:	e79b      	b.n	80008bc <Task1_func+0x14>
 8000984:	2000012c 	.word	0x2000012c
 8000988:	40020c00 	.word	0x40020c00
 800098c:	20000128 	.word	0x20000128
 8000990:	08006eb8 	.word	0x08006eb8
 8000994:	08006ec8 	.word	0x08006ec8
 8000998:	08006ed0 	.word	0x08006ed0
 800099c:	200000d8 	.word	0x200000d8
 80009a0:	20000130 	.word	0x20000130

080009a4 <Task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_func */
void Task2_func(void *argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_func */

  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Task 2: Sampling ...\r\n", 22, HAL_MAX_DELAY);
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	2216      	movs	r2, #22
 80009b2:	491a      	ldr	r1, [pc, #104]	; (8000a1c <Task2_func+0x78>)
 80009b4:	481a      	ldr	r0, [pc, #104]	; (8000a20 <Task2_func+0x7c>)
 80009b6:	f001 fc76 	bl	80022a6 <HAL_UART_Transmit>

	  HAL_ADC_Start(&hadc1);
 80009ba:	481a      	ldr	r0, [pc, #104]	; (8000a24 <Task2_func+0x80>)
 80009bc:	f000 fa40 	bl	8000e40 <HAL_ADC_Start>
	  while (!__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)) {
 80009c0:	e002      	b.n	80009c8 <Task2_func+0x24>
		  osDelay(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f002 f8f4 	bl	8002bb0 <osDelay>
	  while (!__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)) {
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <Task2_func+0x80>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d1f5      	bne.n	80009c2 <Task2_func+0x1e>
	  }
	  __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <Task2_func+0x80>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f06f 0202 	mvn.w	r2, #2
 80009de:	601a      	str	r2, [r3, #0]
	  uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 80009e0:	4810      	ldr	r0, [pc, #64]	; (8000a24 <Task2_func+0x80>)
 80009e2:	f000 fae1 	bl	8000fa8 <HAL_ADC_GetValue>
 80009e6:	4603      	mov	r3, r0
 80009e8:	60fb      	str	r3, [r7, #12]
	  osMessageQueuePut(adc_queueHandle, &adc_value, 0, HAL_MAX_DELAY);
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <Task2_func+0x84>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	f107 010c 	add.w	r1, r7, #12
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	2200      	movs	r2, #0
 80009f8:	f002 fb48 	bl	800308c <osMessageQueuePut>

	  osSemaphoreAcquire(keyHandle, HAL_MAX_DELAY);
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <Task2_func+0x88>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fa37 	bl	8002e78 <osSemaphoreAcquire>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <Task2_func+0x8c>)
 8000a10:	f000 ff89 	bl	8001926 <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000a14:	2064      	movs	r0, #100	; 0x64
 8000a16:	f002 f8cb 	bl	8002bb0 <osDelay>
  {
 8000a1a:	e7c7      	b.n	80009ac <Task2_func+0x8>
 8000a1c:	08006ed8 	.word	0x08006ed8
 8000a20:	200000d8 	.word	0x200000d8
 8000a24:	20000090 	.word	0x20000090
 8000a28:	20000128 	.word	0x20000128
 8000a2c:	20000130 	.word	0x20000130
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <Timer1_func>:
  /* USER CODE END Task2_func */
}

/* Timer1_func function */
void Timer1_func(void *argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer1_func */
	HAL_UART_Transmit(&huart2, (uint8_t*)"Hello. This is Thread T\r\n", 25, HAL_MAX_DELAY);
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	2219      	movs	r2, #25
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <Timer1_func+0x30>)
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <Timer1_func+0x34>)
 8000a46:	f001 fc2e 	bl	80022a6 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <Timer1_func+0x38>)
 8000a50:	f000 ff69 	bl	8001926 <HAL_GPIO_TogglePin>
	osDelay(1000);
 8000a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a58:	f002 f8aa 	bl	8002bb0 <osDelay>
  /* USER CODE END Timer1_func */
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08006ef0 	.word	0x08006ef0
 8000a68:	200000d8 	.word	0x200000d8
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_MspInit+0x54>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_MspInit+0x54>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x54>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_MspInit+0x54>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_MspInit+0x54>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_MspInit+0x54>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	210f      	movs	r1, #15
 8000abe:	f06f 0001 	mvn.w	r0, #1
 8000ac2:	f000 fd6a 	bl	800159a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <HAL_ADC_MspInit+0x3c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d10d      	bne.n	8000b02 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_ADC_MspInit+0x40>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <HAL_ADC_MspInit+0x40>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_ADC_MspInit+0x40>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40012000 	.word	0x40012000
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <HAL_UART_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12b      	bne.n	8000b92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b72:	230c      	movs	r3, #12
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b82:	2307      	movs	r3, #7
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_UART_MspInit+0x8c>)
 8000b8e:	f000 fd2d 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f8ce 	bl	8000d78 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bdc:	f004 fa84 	bl	80050e8 <xTaskGetSchedulerState>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d001      	beq.n	8000bea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000be6:	f005 fa27 	bl	8006038 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f005 fc84 	bl	800652c <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20000134 	.word	0x20000134
 8000c58:	20004aa0 	.word	0x20004aa0

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f005 fc43 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc6f 	bl	8000594 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cc4:	08007024 	.word	0x08007024
  ldr r2, =_sbss
 8000cc8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ccc:	20004a9c 	.word	0x20004a9c

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 fc41 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	200f      	movs	r0, #15
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff feb8 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fc4b 	bl	80015d2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 fc21 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000138 	.word	0x20000138

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000138 	.word	0x20000138

08000db8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e033      	b.n	8000e36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d109      	bne.n	8000dea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fe7c 	bl	8000ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d118      	bne.n	8000e28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dfe:	f023 0302 	bic.w	r3, r3, #2
 8000e02:	f043 0202 	orr.w	r2, r3, #2
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 fa0c 	bl	8001228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f023 0303 	bic.w	r3, r3, #3
 8000e1e:	f043 0201 	orr.w	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40
 8000e26:	e001      	b.n	8000e2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d101      	bne.n	8000e5a <HAL_ADC_Start+0x1a>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e097      	b.n	8000f8a <HAL_ADC_Start+0x14a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d018      	beq.n	8000ea2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e80:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <HAL_ADC_Start+0x158>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_ADC_Start+0x15c>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	0c9a      	lsrs	r2, r3, #18
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e94:	e002      	b.n	8000e9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f9      	bne.n	8000e96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d15f      	bne.n	8000f70 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eee:	d106      	bne.n	8000efe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f023 0206 	bic.w	r2, r3, #6
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	645a      	str	r2, [r3, #68]	; 0x44
 8000efc:	e002      	b.n	8000f04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_ADC_Start+0x160>)
 8000f0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f18:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d129      	bne.n	8000f88 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	e020      	b.n	8000f88 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <HAL_ADC_Start+0x164>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d11b      	bne.n	8000f88 <HAL_ADC_Start+0x148>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d114      	bne.n	8000f88 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	e00b      	b.n	8000f88 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f043 0210 	orr.w	r2, r3, #16
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f80:	f043 0201 	orr.w	r2, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	40012300 	.word	0x40012300
 8000fa4:	40012000 	.word	0x40012000

08000fa8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x1c>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e113      	b.n	8001208 <HAL_ADC_ConfigChannel+0x244>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	d925      	bls.n	800103c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68d9      	ldr	r1, [r3, #12]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	3b1e      	subs	r3, #30
 8001006:	2207      	movs	r2, #7
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43da      	mvns	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	400a      	ands	r2, r1
 8001014:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68d9      	ldr	r1, [r3, #12]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	4618      	mov	r0, r3
 8001028:	4603      	mov	r3, r0
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4403      	add	r3, r0
 800102e:	3b1e      	subs	r3, #30
 8001030:	409a      	lsls	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	e022      	b.n	8001082 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6919      	ldr	r1, [r3, #16]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	2207      	movs	r2, #7
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	400a      	ands	r2, r1
 800105e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6919      	ldr	r1, [r3, #16]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	4603      	mov	r3, r0
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4403      	add	r3, r0
 8001078:	409a      	lsls	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b06      	cmp	r3, #6
 8001088:	d824      	bhi.n	80010d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	3b05      	subs	r3, #5
 800109c:	221f      	movs	r2, #31
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	400a      	ands	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b05      	subs	r3, #5
 80010c6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
 80010d2:	e04c      	b.n	800116e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b0c      	cmp	r3, #12
 80010da:	d824      	bhi.n	8001126 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b23      	subs	r3, #35	; 0x23
 80010ee:	221f      	movs	r2, #31
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43da      	mvns	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	400a      	ands	r2, r1
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	3b23      	subs	r3, #35	; 0x23
 8001118:	fa00 f203 	lsl.w	r2, r0, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
 8001124:	e023      	b.n	800116e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b41      	subs	r3, #65	; 0x41
 8001138:	221f      	movs	r2, #31
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	3b41      	subs	r3, #65	; 0x41
 8001162:	fa00 f203 	lsl.w	r2, r0, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_ADC_ConfigChannel+0x250>)
 8001170:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a28      	ldr	r2, [pc, #160]	; (8001218 <HAL_ADC_ConfigChannel+0x254>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d10f      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1d8>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b12      	cmp	r3, #18
 8001182:	d10b      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_ADC_ConfigChannel+0x254>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12b      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x23a>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1c      	ldr	r2, [pc, #112]	; (800121c <HAL_ADC_ConfigChannel+0x258>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d003      	beq.n	80011b8 <HAL_ADC_ConfigChannel+0x1f4>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b11      	cmp	r3, #17
 80011b6:	d122      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a11      	ldr	r2, [pc, #68]	; (800121c <HAL_ADC_ConfigChannel+0x258>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d111      	bne.n	80011fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_ADC_ConfigChannel+0x25c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <HAL_ADC_ConfigChannel+0x260>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9a      	lsrs	r2, r3, #18
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011f0:	e002      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f9      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40012300 	.word	0x40012300
 8001218:	40012000 	.word	0x40012000
 800121c:	10000012 	.word	0x10000012
 8001220:	20000000 	.word	0x20000000
 8001224:	431bde83 	.word	0x431bde83

08001228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001230:	4b79      	ldr	r3, [pc, #484]	; (8001418 <ADC_Init+0x1f0>)
 8001232:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	431a      	orrs	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800125c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	021a      	lsls	r2, r3, #8
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6899      	ldr	r1, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	4a58      	ldr	r2, [pc, #352]	; (800141c <ADC_Init+0x1f4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d022      	beq.n	8001306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6899      	ldr	r1, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6899      	ldr	r1, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	e00f      	b.n	8001326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001324:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0202 	bic.w	r2, r2, #2
 8001334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6899      	ldr	r1, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7e1b      	ldrb	r3, [r3, #24]
 8001340:	005a      	lsls	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01b      	beq.n	800138c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001362:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6859      	ldr	r1, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	3b01      	subs	r3, #1
 8001380:	035a      	lsls	r2, r3, #13
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	e007      	b.n	800139c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800139a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	051a      	lsls	r2, r3, #20
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6899      	ldr	r1, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013de:	025a      	lsls	r2, r3, #9
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6899      	ldr	r1, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	029a      	lsls	r2, r3, #10
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	609a      	str	r2, [r3, #8]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40012300 	.word	0x40012300
 800141c:	0f000001 	.word	0x0f000001

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff47 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff5c 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffb0 	bl	8001540 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e159      	b.n	80018bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8148 	bne.w	80018b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d005      	beq.n	800163e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163a:	2b02      	cmp	r3, #2
 800163c:	d130      	bne.n	80016a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001674:	2201      	movs	r2, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 0201 	and.w	r2, r3, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d017      	beq.n	80016dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d123      	bne.n	8001730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80a2 	beq.w	80018b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <HAL_GPIO_Init+0x2e8>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a56      	ldr	r2, [pc, #344]	; (80018d4 <HAL_GPIO_Init+0x2e8>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b54      	ldr	r3, [pc, #336]	; (80018d4 <HAL_GPIO_Init+0x2e8>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178e:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_GPIO_Init+0x2ec>)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a49      	ldr	r2, [pc, #292]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d019      	beq.n	80017ee <HAL_GPIO_Init+0x202>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a48      	ldr	r2, [pc, #288]	; (80018e0 <HAL_GPIO_Init+0x2f4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0x1fe>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a47      	ldr	r2, [pc, #284]	; (80018e4 <HAL_GPIO_Init+0x2f8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00d      	beq.n	80017e6 <HAL_GPIO_Init+0x1fa>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a46      	ldr	r2, [pc, #280]	; (80018e8 <HAL_GPIO_Init+0x2fc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0x1f6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a45      	ldr	r2, [pc, #276]	; (80018ec <HAL_GPIO_Init+0x300>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_GPIO_Init+0x1f2>
 80017da:	2304      	movs	r3, #4
 80017dc:	e008      	b.n	80017f0 <HAL_GPIO_Init+0x204>
 80017de:	2307      	movs	r3, #7
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x204>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e004      	b.n	80017f0 <HAL_GPIO_Init+0x204>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_Init+0x204>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x204>
 80017ee:	2300      	movs	r3, #0
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f002 0203 	and.w	r2, r2, #3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4093      	lsls	r3, r2
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001800:	4935      	ldr	r1, [pc, #212]	; (80018d8 <HAL_GPIO_Init+0x2ec>)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_GPIO_Init+0x304>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001832:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <HAL_GPIO_Init+0x304>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_GPIO_Init+0x304>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_GPIO_Init+0x304>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_GPIO_Init+0x304>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001886:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <HAL_GPIO_Init+0x304>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_GPIO_Init+0x304>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b0:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <HAL_GPIO_Init+0x304>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b0f      	cmp	r3, #15
 80018c0:	f67f aea2 	bls.w	8001608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40013800 	.word	0x40013800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40013c00 	.word	0x40013c00

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001910:	e003      	b.n	800191a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	619a      	str	r2, [r3, #24]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001938:	887a      	ldrh	r2, [r7, #2]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4013      	ands	r3, r2
 800193e:	041a      	lsls	r2, r3, #16
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43d9      	mvns	r1, r3
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	400b      	ands	r3, r1
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	619a      	str	r2, [r3, #24]
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e267      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d075      	beq.n	8001a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800197a:	4b88      	ldr	r3, [pc, #544]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b04      	cmp	r3, #4
 8001984:	d00c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001986:	4b85      	ldr	r3, [pc, #532]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198e:	2b08      	cmp	r3, #8
 8001990:	d112      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800199e:	d10b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	4b7e      	ldr	r3, [pc, #504]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d05b      	beq.n	8001a64 <HAL_RCC_OscConfig+0x108>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d157      	bne.n	8001a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e242      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d106      	bne.n	80019d0 <HAL_RCC_OscConfig+0x74>
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e01d      	b.n	8001a0c <HAL_RCC_OscConfig+0xb0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x98>
 80019da:	4b70      	ldr	r3, [pc, #448]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6f      	ldr	r2, [pc, #444]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6c      	ldr	r2, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xb0>
 80019f4:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a68      	ldr	r2, [pc, #416]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 80019fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff f9c4 	bl	8000da0 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f9c0 	bl	8000da0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e207      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xc0>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f9b0 	bl	8000da0 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f9ac 	bl	8000da0 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1f3      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	4b51      	ldr	r3, [pc, #324]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0xe8>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d063      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a72:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d11c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d116      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x152>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e1c7      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4937      	ldr	r1, [pc, #220]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	e03a      	b.n	8001b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_RCC_OscConfig+0x244>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f965 	bl	8000da0 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff f961 	bl	8000da0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1a8      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4925      	ldr	r1, [pc, #148]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x244>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f944 	bl	8000da0 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f940 	bl	8000da0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e187      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d036      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d016      	beq.n	8001b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_RCC_OscConfig+0x248>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff f924 	bl	8000da0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f920 	bl	8000da0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e167      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_OscConfig+0x240>)
 8001b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x200>
 8001b7a:	e01b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_OscConfig+0x248>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b82:	f7ff f90d 	bl	8000da0 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b88:	e00e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8a:	f7ff f909 	bl	8000da0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d907      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e150      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	42470000 	.word	0x42470000
 8001ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ea      	bne.n	8001b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8097 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b7d      	ldr	r3, [pc, #500]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a7c      	ldr	r2, [pc, #496]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b77      	ldr	r3, [pc, #476]	; (8001dd0 <HAL_RCC_OscConfig+0x474>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d118      	bne.n	8001c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfe:	4b74      	ldr	r3, [pc, #464]	; (8001dd0 <HAL_RCC_OscConfig+0x474>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a73      	ldr	r2, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x474>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff f8c9 	bl	8000da0 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7ff f8c5 	bl	8000da0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e10c      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x474>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2ea>
 8001c38:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6713      	str	r3, [r2, #112]	; 0x70
 8001c44:	e01c      	b.n	8001c80 <HAL_RCC_OscConfig+0x324>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x30c>
 8001c4e:	4b5f      	ldr	r3, [pc, #380]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a5e      	ldr	r2, [pc, #376]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4a5b      	ldr	r2, [pc, #364]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x324>
 8001c68:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	4b55      	ldr	r3, [pc, #340]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a54      	ldr	r2, [pc, #336]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001c7a:	f023 0304 	bic.w	r3, r3, #4
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7ff f88a 	bl	8000da0 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7ff f886 	bl	8000da0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e0cb      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0ee      	beq.n	8001c90 <HAL_RCC_OscConfig+0x334>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f874 	bl	8000da0 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f870 	bl	8000da0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0b5      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ee      	bne.n	8001cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	4a38      	ldr	r2, [pc, #224]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a1 	beq.w	8001e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d05c      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d141      	bne.n	8001d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x478>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff f844 	bl	8000da0 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f840 	bl	8000da0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e087      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	019b      	lsls	r3, r3, #6
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	491b      	ldr	r1, [pc, #108]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x478>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f819 	bl	8000da0 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d72:	f7ff f815 	bl	8000da0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e05c      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x416>
 8001d90:	e054      	b.n	8001e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_RCC_OscConfig+0x478>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff f802 	bl	8000da0 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe fffe 	bl	8000da0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e045      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_OscConfig+0x470>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x444>
 8001dbe:	e03d      	b.n	8001e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e038      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x4ec>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d028      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d121      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d11a      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d111      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	3b01      	subs	r3, #1
 8001e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0cc      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d90c      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b8      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d044      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d119      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e06f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e067      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4934      	ldr	r1, [pc, #208]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe ff30 	bl	8000da0 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7fe ff2c 	bl	8000da0 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e04f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d20c      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e032      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f821 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	490a      	ldr	r1, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	5ccb      	ldrb	r3, [r1, r3]
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fe90 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023c00 	.word	0x40023c00
 8002008:	40023800 	.word	0x40023800
 800200c:	08006fc8 	.word	0x08006fc8
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800201c:	b090      	sub	sp, #64	; 0x40
 800201e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
 8002024:	2300      	movs	r3, #0
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002028:	2300      	movs	r3, #0
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_GetSysClockFreq+0x180>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d00d      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x40>
 800203c:	2b08      	cmp	r3, #8
 800203e:	f200 80a1 	bhi.w	8002184 <HAL_RCC_GetSysClockFreq+0x16c>
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x34>
 8002046:	2b04      	cmp	r3, #4
 8002048:	d003      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x3a>
 800204a:	e09b      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_GetSysClockFreq+0x184>)
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002050:	e09b      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002052:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002056:	e098      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002058:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCC_GetSysClockFreq+0x180>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002062:	4b4d      	ldr	r3, [pc, #308]	; (8002198 <HAL_RCC_GetSysClockFreq+0x180>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d028      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206e:	4b4a      	ldr	r3, [pc, #296]	; (8002198 <HAL_RCC_GetSysClockFreq+0x180>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	2200      	movs	r2, #0
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	627a      	str	r2, [r7, #36]	; 0x24
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002080:	2100      	movs	r1, #0
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002084:	fb03 f201 	mul.w	r2, r3, r1
 8002088:	2300      	movs	r3, #0
 800208a:	fb00 f303 	mul.w	r3, r0, r3
 800208e:	4413      	add	r3, r2
 8002090:	4a43      	ldr	r2, [pc, #268]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002092:	fba0 1202 	umull	r1, r2, r0, r2
 8002096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002098:	460a      	mov	r2, r1
 800209a:	62ba      	str	r2, [r7, #40]	; 0x28
 800209c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209e:	4413      	add	r3, r2
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a4:	2200      	movs	r2, #0
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	61fa      	str	r2, [r7, #28]
 80020aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020b2:	f7fe f8ed 	bl	8000290 <__aeabi_uldivmod>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4613      	mov	r3, r2
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020be:	e053      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c0:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	2200      	movs	r2, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	617a      	str	r2, [r7, #20]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020d2:	f04f 0b00 	mov.w	fp, #0
 80020d6:	4652      	mov	r2, sl
 80020d8:	465b      	mov	r3, fp
 80020da:	f04f 0000 	mov.w	r0, #0
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	0159      	lsls	r1, r3, #5
 80020e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e8:	0150      	lsls	r0, r2, #5
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	ebb2 080a 	subs.w	r8, r2, sl
 80020f2:	eb63 090b 	sbc.w	r9, r3, fp
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002102:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002106:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800210a:	ebb2 0408 	subs.w	r4, r2, r8
 800210e:	eb63 0509 	sbc.w	r5, r3, r9
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	00eb      	lsls	r3, r5, #3
 800211c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002120:	00e2      	lsls	r2, r4, #3
 8002122:	4614      	mov	r4, r2
 8002124:	461d      	mov	r5, r3
 8002126:	eb14 030a 	adds.w	r3, r4, sl
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	eb45 030b 	adc.w	r3, r5, fp
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800213e:	4629      	mov	r1, r5
 8002140:	028b      	lsls	r3, r1, #10
 8002142:	4621      	mov	r1, r4
 8002144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002148:	4621      	mov	r1, r4
 800214a:	028a      	lsls	r2, r1, #10
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002152:	2200      	movs	r2, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	60fa      	str	r2, [r7, #12]
 8002158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800215c:	f7fe f898 	bl	8000290 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4613      	mov	r3, r2
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_GetSysClockFreq+0x180>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002182:	e002      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_RCC_GetSysClockFreq+0x184>)
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800218c:	4618      	mov	r0, r3
 800218e:	3740      	adds	r7, #64	; 0x40
 8002190:	46bd      	mov	sp, r7
 8002192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	017d7840 	.word	0x017d7840

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000000 	.word	0x20000000

080021bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021c0:	f7ff fff0 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0a9b      	lsrs	r3, r3, #10
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800
 80021e0:	08006fd8 	.word	0x08006fd8

080021e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021e8:	f7ff ffdc 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0b5b      	lsrs	r3, r3, #13
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fa:	5ccb      	ldrb	r3, [r1, r3]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	08006fd8 	.word	0x08006fd8

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e03f      	b.n	800229e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fc70 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	; 0x24
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f929 	bl	80024a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b08a      	sub	sp, #40	; 0x28
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d17c      	bne.n	80023c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_UART_Transmit+0x2c>
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e075      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_UART_Transmit+0x3e>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e06e      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2221      	movs	r2, #33	; 0x21
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022fa:	f7fe fd51 	bl	8000da0 <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002314:	d108      	bne.n	8002328 <HAL_UART_Transmit+0x82>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d104      	bne.n	8002328 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	e003      	b.n	8002330 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002338:	e02a      	b.n	8002390 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2200      	movs	r2, #0
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f840 	bl	80023ca <UART_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e036      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3302      	adds	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e007      	b.n	8002382 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1cf      	bne.n	800233a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2140      	movs	r1, #64	; 0x40
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f810 	bl	80023ca <UART_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e006      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b090      	sub	sp, #64	; 0x40
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023da:	e050      	b.n	800247e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e2:	d04c      	beq.n	800247e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <UART_WaitOnFlagUntilTimeout+0x30>
 80023ea:	f7fe fcd9 	bl	8000da0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d241      	bcs.n	800247e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	e853 3f00 	ldrex	r3, [r3]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800241a:	637a      	str	r2, [r7, #52]	; 0x34
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002422:	e841 2300 	strex	r3, r2, [r1]
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1e5      	bne.n	80023fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3314      	adds	r3, #20
 8002434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	e853 3f00 	ldrex	r3, [r3]
 800243c:	613b      	str	r3, [r7, #16]
   return(result);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800244e:	623a      	str	r2, [r7, #32]
 8002450:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002452:	69f9      	ldr	r1, [r7, #28]
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	e841 2300 	strex	r3, r2, [r1]
 800245a:	61bb      	str	r3, [r7, #24]
   return(result);
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1e5      	bne.n	800242e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e00f      	b.n	800249e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	429a      	cmp	r2, r3
 800249a:	d09f      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3740      	adds	r7, #64	; 0x40
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ac:	b0c0      	sub	sp, #256	; 0x100
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	68d9      	ldr	r1, [r3, #12]
 80024c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	ea40 0301 	orr.w	r3, r0, r1
 80024d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	431a      	orrs	r2, r3
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002500:	f021 010c 	bic.w	r1, r1, #12
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800250e:	430b      	orrs	r3, r1
 8002510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800251e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002522:	6999      	ldr	r1, [r3, #24]
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	ea40 0301 	orr.w	r3, r0, r1
 800252e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b8f      	ldr	r3, [pc, #572]	; (8002774 <UART_SetConfig+0x2cc>)
 8002538:	429a      	cmp	r2, r3
 800253a:	d005      	beq.n	8002548 <UART_SetConfig+0xa0>
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b8d      	ldr	r3, [pc, #564]	; (8002778 <UART_SetConfig+0x2d0>)
 8002544:	429a      	cmp	r2, r3
 8002546:	d104      	bne.n	8002552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002548:	f7ff fe4c 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 800254c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002550:	e003      	b.n	800255a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002552:	f7ff fe33 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8002556:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800255a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002564:	f040 810c 	bne.w	8002780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800256c:	2200      	movs	r2, #0
 800256e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002572:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800257a:	4622      	mov	r2, r4
 800257c:	462b      	mov	r3, r5
 800257e:	1891      	adds	r1, r2, r2
 8002580:	65b9      	str	r1, [r7, #88]	; 0x58
 8002582:	415b      	adcs	r3, r3
 8002584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800258a:	4621      	mov	r1, r4
 800258c:	eb12 0801 	adds.w	r8, r2, r1
 8002590:	4629      	mov	r1, r5
 8002592:	eb43 0901 	adc.w	r9, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb18 0303 	adds.w	r3, r8, r3
 80025b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025b8:	462b      	mov	r3, r5
 80025ba:	eb49 0303 	adc.w	r3, r9, r3
 80025be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025d6:	460b      	mov	r3, r1
 80025d8:	18db      	adds	r3, r3, r3
 80025da:	653b      	str	r3, [r7, #80]	; 0x50
 80025dc:	4613      	mov	r3, r2
 80025de:	eb42 0303 	adc.w	r3, r2, r3
 80025e2:	657b      	str	r3, [r7, #84]	; 0x54
 80025e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025ec:	f7fd fe50 	bl	8000290 <__aeabi_uldivmod>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <UART_SetConfig+0x2d4>)
 80025f6:	fba3 2302 	umull	r2, r3, r3, r2
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	011c      	lsls	r4, r3, #4
 80025fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002608:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800260c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	1891      	adds	r1, r2, r2
 8002616:	64b9      	str	r1, [r7, #72]	; 0x48
 8002618:	415b      	adcs	r3, r3
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002620:	4641      	mov	r1, r8
 8002622:	eb12 0a01 	adds.w	sl, r2, r1
 8002626:	4649      	mov	r1, r9
 8002628:	eb43 0b01 	adc.w	fp, r3, r1
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800263c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002640:	4692      	mov	sl, r2
 8002642:	469b      	mov	fp, r3
 8002644:	4643      	mov	r3, r8
 8002646:	eb1a 0303 	adds.w	r3, sl, r3
 800264a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800264e:	464b      	mov	r3, r9
 8002650:	eb4b 0303 	adc.w	r3, fp, r3
 8002654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002664:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800266c:	460b      	mov	r3, r1
 800266e:	18db      	adds	r3, r3, r3
 8002670:	643b      	str	r3, [r7, #64]	; 0x40
 8002672:	4613      	mov	r3, r2
 8002674:	eb42 0303 	adc.w	r3, r2, r3
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
 800267a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800267e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002682:	f7fd fe05 	bl	8000290 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4611      	mov	r1, r2
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <UART_SetConfig+0x2d4>)
 800268e:	fba3 2301 	umull	r2, r3, r3, r1
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2264      	movs	r2, #100	; 0x64
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	1acb      	subs	r3, r1, r3
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <UART_SetConfig+0x2d4>)
 80026a4:	fba3 2302 	umull	r2, r3, r3, r2
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026b0:	441c      	add	r4, r3
 80026b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80026c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80026cc:	415b      	adcs	r3, r3
 80026ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026d4:	4641      	mov	r1, r8
 80026d6:	1851      	adds	r1, r2, r1
 80026d8:	6339      	str	r1, [r7, #48]	; 0x30
 80026da:	4649      	mov	r1, r9
 80026dc:	414b      	adcs	r3, r1
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026ec:	4659      	mov	r1, fp
 80026ee:	00cb      	lsls	r3, r1, #3
 80026f0:	4651      	mov	r1, sl
 80026f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f6:	4651      	mov	r1, sl
 80026f8:	00ca      	lsls	r2, r1, #3
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	4642      	mov	r2, r8
 8002702:	189b      	adds	r3, r3, r2
 8002704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002708:	464b      	mov	r3, r9
 800270a:	460a      	mov	r2, r1
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002720:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002728:	460b      	mov	r3, r1
 800272a:	18db      	adds	r3, r3, r3
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
 800272e:	4613      	mov	r3, r2
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800273a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800273e:	f7fd fda7 	bl	8000290 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <UART_SetConfig+0x2d4>)
 8002748:	fba3 1302 	umull	r1, r3, r3, r2
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	2164      	movs	r1, #100	; 0x64
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3332      	adds	r3, #50	; 0x32
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <UART_SetConfig+0x2d4>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	f003 0207 	and.w	r2, r3, #7
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4422      	add	r2, r4
 800276e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002770:	e105      	b.n	800297e <UART_SetConfig+0x4d6>
 8002772:	bf00      	nop
 8002774:	40011000 	.word	0x40011000
 8002778:	40011400 	.word	0x40011400
 800277c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002784:	2200      	movs	r2, #0
 8002786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800278a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800278e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002792:	4642      	mov	r2, r8
 8002794:	464b      	mov	r3, r9
 8002796:	1891      	adds	r1, r2, r2
 8002798:	6239      	str	r1, [r7, #32]
 800279a:	415b      	adcs	r3, r3
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027a2:	4641      	mov	r1, r8
 80027a4:	1854      	adds	r4, r2, r1
 80027a6:	4649      	mov	r1, r9
 80027a8:	eb43 0501 	adc.w	r5, r3, r1
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	00eb      	lsls	r3, r5, #3
 80027b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ba:	00e2      	lsls	r2, r4, #3
 80027bc:	4614      	mov	r4, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	4643      	mov	r3, r8
 80027c2:	18e3      	adds	r3, r4, r3
 80027c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027c8:	464b      	mov	r3, r9
 80027ca:	eb45 0303 	adc.w	r3, r5, r3
 80027ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027ee:	4629      	mov	r1, r5
 80027f0:	008b      	lsls	r3, r1, #2
 80027f2:	4621      	mov	r1, r4
 80027f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f8:	4621      	mov	r1, r4
 80027fa:	008a      	lsls	r2, r1, #2
 80027fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002800:	f7fd fd46 	bl	8000290 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4b60      	ldr	r3, [pc, #384]	; (800298c <UART_SetConfig+0x4e4>)
 800280a:	fba3 2302 	umull	r2, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	011c      	lsls	r4, r3, #4
 8002812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002816:	2200      	movs	r2, #0
 8002818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800281c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002824:	4642      	mov	r2, r8
 8002826:	464b      	mov	r3, r9
 8002828:	1891      	adds	r1, r2, r2
 800282a:	61b9      	str	r1, [r7, #24]
 800282c:	415b      	adcs	r3, r3
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002834:	4641      	mov	r1, r8
 8002836:	1851      	adds	r1, r2, r1
 8002838:	6139      	str	r1, [r7, #16]
 800283a:	4649      	mov	r1, r9
 800283c:	414b      	adcs	r3, r1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800284c:	4659      	mov	r1, fp
 800284e:	00cb      	lsls	r3, r1, #3
 8002850:	4651      	mov	r1, sl
 8002852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002856:	4651      	mov	r1, sl
 8002858:	00ca      	lsls	r2, r1, #3
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	4603      	mov	r3, r0
 8002860:	4642      	mov	r2, r8
 8002862:	189b      	adds	r3, r3, r2
 8002864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002868:	464b      	mov	r3, r9
 800286a:	460a      	mov	r2, r1
 800286c:	eb42 0303 	adc.w	r3, r2, r3
 8002870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	67bb      	str	r3, [r7, #120]	; 0x78
 800287e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800288c:	4649      	mov	r1, r9
 800288e:	008b      	lsls	r3, r1, #2
 8002890:	4641      	mov	r1, r8
 8002892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002896:	4641      	mov	r1, r8
 8002898:	008a      	lsls	r2, r1, #2
 800289a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800289e:	f7fd fcf7 	bl	8000290 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <UART_SetConfig+0x4e4>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	2164      	movs	r1, #100	; 0x64
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	3332      	adds	r3, #50	; 0x32
 80028ba:	4a34      	ldr	r2, [pc, #208]	; (800298c <UART_SetConfig+0x4e4>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c6:	441c      	add	r4, r3
 80028c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028cc:	2200      	movs	r2, #0
 80028ce:	673b      	str	r3, [r7, #112]	; 0x70
 80028d0:	677a      	str	r2, [r7, #116]	; 0x74
 80028d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028d6:	4642      	mov	r2, r8
 80028d8:	464b      	mov	r3, r9
 80028da:	1891      	adds	r1, r2, r2
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	415b      	adcs	r3, r3
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028e6:	4641      	mov	r1, r8
 80028e8:	1851      	adds	r1, r2, r1
 80028ea:	6039      	str	r1, [r7, #0]
 80028ec:	4649      	mov	r1, r9
 80028ee:	414b      	adcs	r3, r1
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028fe:	4659      	mov	r1, fp
 8002900:	00cb      	lsls	r3, r1, #3
 8002902:	4651      	mov	r1, sl
 8002904:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002908:	4651      	mov	r1, sl
 800290a:	00ca      	lsls	r2, r1, #3
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	4603      	mov	r3, r0
 8002912:	4642      	mov	r2, r8
 8002914:	189b      	adds	r3, r3, r2
 8002916:	66bb      	str	r3, [r7, #104]	; 0x68
 8002918:	464b      	mov	r3, r9
 800291a:	460a      	mov	r2, r1
 800291c:	eb42 0303 	adc.w	r3, r2, r3
 8002920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	663b      	str	r3, [r7, #96]	; 0x60
 800292c:	667a      	str	r2, [r7, #100]	; 0x64
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800293a:	4649      	mov	r1, r9
 800293c:	008b      	lsls	r3, r1, #2
 800293e:	4641      	mov	r1, r8
 8002940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002944:	4641      	mov	r1, r8
 8002946:	008a      	lsls	r2, r1, #2
 8002948:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800294c:	f7fd fca0 	bl	8000290 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <UART_SetConfig+0x4e4>)
 8002956:	fba3 1302 	umull	r1, r3, r3, r2
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2164      	movs	r1, #100	; 0x64
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	3332      	adds	r3, #50	; 0x32
 8002968:	4a08      	ldr	r2, [pc, #32]	; (800298c <UART_SetConfig+0x4e4>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4422      	add	r2, r4
 800297c:	609a      	str	r2, [r3, #8]
}
 800297e:	bf00      	nop
 8002980:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298a:	bf00      	nop
 800298c:	51eb851f 	.word	0x51eb851f

08002990 <__NVIC_SetPriority>:
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db0a      	blt.n	80029ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	490c      	ldr	r1, [pc, #48]	; (80029dc <__NVIC_SetPriority+0x4c>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	440b      	add	r3, r1
 80029b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029b8:	e00a      	b.n	80029d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4908      	ldr	r1, [pc, #32]	; (80029e0 <__NVIC_SetPriority+0x50>)
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3b04      	subs	r3, #4
 80029c8:	0112      	lsls	r2, r2, #4
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	440b      	add	r3, r1
 80029ce:	761a      	strb	r2, [r3, #24]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000e100 	.word	0xe000e100
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80029e8:	2100      	movs	r1, #0
 80029ea:	f06f 0004 	mvn.w	r0, #4
 80029ee:	f7ff ffcf 	bl	8002990 <__NVIC_SetPriority>
#endif
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029fe:	f3ef 8305 	mrs	r3, IPSR
 8002a02:	603b      	str	r3, [r7, #0]
  return(result);
 8002a04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a0a:	f06f 0305 	mvn.w	r3, #5
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	e00c      	b.n	8002a2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <osKernelInitialize+0x44>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <osKernelInitialize+0x44>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	e002      	b.n	8002a2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000013c 	.word	0x2000013c

08002a40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a46:	f3ef 8305 	mrs	r3, IPSR
 8002a4a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a52:	f06f 0305 	mvn.w	r3, #5
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	e010      	b.n	8002a7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <osKernelStart+0x48>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d109      	bne.n	8002a76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a62:	f7ff ffbf 	bl	80029e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <osKernelStart+0x48>)
 8002a68:	2202      	movs	r2, #2
 8002a6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a6c:	f001 fef4 	bl	8004858 <vTaskStartScheduler>
      stat = osOK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	e002      	b.n	8002a7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	2000013c 	.word	0x2000013c

08002a8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08e      	sub	sp, #56	; 0x38
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a9c:	f3ef 8305 	mrs	r3, IPSR
 8002aa0:	617b      	str	r3, [r7, #20]
  return(result);
 8002aa2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d17e      	bne.n	8002ba6 <osThreadNew+0x11a>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d07b      	beq.n	8002ba6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ab2:	2318      	movs	r3, #24
 8002ab4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d045      	beq.n	8002b52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <osThreadNew+0x48>
        name = attr->name;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <osThreadNew+0x6e>
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b38      	cmp	r3, #56	; 0x38
 8002aec:	d805      	bhi.n	8002afa <osThreadNew+0x6e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <osThreadNew+0x72>
        return (NULL);
 8002afa:	2300      	movs	r3, #0
 8002afc:	e054      	b.n	8002ba8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00e      	beq.n	8002b34 <osThreadNew+0xa8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b5b      	cmp	r3, #91	; 0x5b
 8002b1c:	d90a      	bls.n	8002b34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <osThreadNew+0xa8>
        mem = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	e010      	b.n	8002b56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10c      	bne.n	8002b56 <osThreadNew+0xca>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d108      	bne.n	8002b56 <osThreadNew+0xca>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <osThreadNew+0xca>
          mem = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e001      	b.n	8002b56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d110      	bne.n	8002b7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b64:	9202      	str	r2, [sp, #8]
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6a3a      	ldr	r2, [r7, #32]
 8002b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f001 fc9a 	bl	80044ac <xTaskCreateStatic>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e013      	b.n	8002ba6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d110      	bne.n	8002ba6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f001 fce5 	bl	8004566 <xTaskCreate>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <osThreadNew+0x11a>
            hTask = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ba6:	693b      	ldr	r3, [r7, #16]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3728      	adds	r7, #40	; 0x28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bb8:	f3ef 8305 	mrs	r3, IPSR
 8002bbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <osDelay+0x1c>
    stat = osErrorISR;
 8002bc4:	f06f 0305 	mvn.w	r3, #5
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e007      	b.n	8002bdc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <osDelay+0x2c>
      vTaskDelay(ticks);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f001 fe0a 	bl	80047f0 <vTaskDelay>
    }
  }

  return (stat);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f003 f840 	bl	8005c74 <pvTimerGetTimerID>
 8002bf4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	6852      	ldr	r2, [r2, #4]
 8002c04:	4610      	mov	r0, r2
 8002c06:	4798      	blx	r3
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c24:	f3ef 8305 	mrs	r3, IPSR
 8002c28:	613b      	str	r3, [r7, #16]
  return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d163      	bne.n	8002cf8 <osTimerNew+0xe8>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d060      	beq.n	8002cf8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002c36:	2008      	movs	r0, #8
 8002c38:	f003 fa8e 	bl	8006158 <pvPortMalloc>
 8002c3c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d059      	beq.n	8002cf8 <osTimerNew+0xe8>
      callb->func = func;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d102      	bne.n	8002c5c <osTimerNew+0x4c>
        reload = pdFALSE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e001      	b.n	8002c60 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295
 8002c64:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01c      	beq.n	8002caa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <osTimerNew+0x6e>
          name = attr->name;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <osTimerNew+0x84>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b2b      	cmp	r3, #43	; 0x2b
 8002c8c:	d902      	bls.n	8002c94 <osTimerNew+0x84>
          mem = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e00c      	b.n	8002cae <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d108      	bne.n	8002cae <osTimerNew+0x9e>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <osTimerNew+0x9e>
            mem = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e001      	b.n	8002cae <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10c      	bne.n	8002cce <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <osTimerNew+0xf4>)
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cc6:	f002 fc56 	bl	8005576 <xTimerCreateStatic>
 8002cca:	6238      	str	r0, [r7, #32]
 8002ccc:	e00b      	b.n	8002ce6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d108      	bne.n	8002ce6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <osTimerNew+0xf4>)
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ce0:	f002 fc28 	bl	8005534 <xTimerCreate>
 8002ce4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <osTimerNew+0xe8>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <osTimerNew+0xe8>
        vPortFree (callb);
 8002cf2:	6978      	ldr	r0, [r7, #20]
 8002cf4:	f003 fafc 	bl	80062f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3728      	adds	r7, #40	; 0x28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	08002be7 	.word	0x08002be7

08002d08 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d16:	f3ef 8305 	mrs	r3, IPSR
 8002d1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <osTimerStart+0x22>
    stat = osErrorISR;
 8002d22:	f06f 0305 	mvn.w	r3, #5
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e017      	b.n	8002d5a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d103      	bne.n	8002d38 <osTimerStart+0x30>
    stat = osErrorParameter;
 8002d30:	f06f 0303 	mvn.w	r3, #3
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e010      	b.n	8002d5a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8002d38:	2300      	movs	r3, #0
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	2104      	movs	r1, #4
 8002d42:	6938      	ldr	r0, [r7, #16]
 8002d44:	f002 fc90 	bl	8005668 <xTimerGenericCommand>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <osTimerStart+0x4c>
      stat = osOK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e002      	b.n	8002d5a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8002d54:	f06f 0302 	mvn.w	r3, #2
 8002d58:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002d5a:	697b      	ldr	r3, [r7, #20]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d74:	f3ef 8305 	mrs	r3, IPSR
 8002d78:	613b      	str	r3, [r7, #16]
  return(result);
 8002d7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d175      	bne.n	8002e6c <osSemaphoreNew+0x108>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d072      	beq.n	8002e6c <osSemaphoreNew+0x108>
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d86e      	bhi.n	8002e6c <osSemaphoreNew+0x108>
    mem = -1;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <osSemaphoreNew+0x4c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b4f      	cmp	r3, #79	; 0x4f
 8002da8:	d902      	bls.n	8002db0 <osSemaphoreNew+0x4c>
        mem = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e00c      	b.n	8002dca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d108      	bne.n	8002dca <osSemaphoreNew+0x66>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <osSemaphoreNew+0x66>
          mem = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e001      	b.n	8002dca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d04c      	beq.n	8002e6c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d128      	bne.n	8002e2a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d10a      	bne.n	8002df4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2203      	movs	r2, #3
 8002de4:	9200      	str	r2, [sp, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	2001      	movs	r0, #1
 8002dec:	f000 fb7c 	bl	80034e8 <xQueueGenericCreateStatic>
 8002df0:	61f8      	str	r0, [r7, #28]
 8002df2:	e005      	b.n	8002e00 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002df4:	2203      	movs	r2, #3
 8002df6:	2100      	movs	r1, #0
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f000 fbed 	bl	80035d8 <xQueueGenericCreate>
 8002dfe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d022      	beq.n	8002e4c <osSemaphoreNew+0xe8>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01f      	beq.n	8002e4c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	69f8      	ldr	r0, [r7, #28]
 8002e14:	f000 fca8 	bl	8003768 <xQueueGenericSend>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d016      	beq.n	8002e4c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002e1e:	69f8      	ldr	r0, [r7, #28]
 8002e20:	f001 f970 	bl	8004104 <vQueueDelete>
            hSemaphore = NULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	e010      	b.n	8002e4c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d108      	bne.n	8002e42 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fc2a 	bl	8003692 <xQueueCreateCountingSemaphoreStatic>
 8002e3e:	61f8      	str	r0, [r7, #28]
 8002e40:	e004      	b.n	8002e4c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fc5b 	bl	8003700 <xQueueCreateCountingSemaphore>
 8002e4a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00c      	beq.n	8002e6c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	e001      	b.n	8002e64 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002e64:	6979      	ldr	r1, [r7, #20]
 8002e66:	69f8      	ldr	r0, [r7, #28]
 8002e68:	f001 fa98 	bl	800439c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d103      	bne.n	8002e98 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002e90:	f06f 0303 	mvn.w	r3, #3
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e039      	b.n	8002f0c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e98:	f3ef 8305 	mrs	r3, IPSR
 8002e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d022      	beq.n	8002eea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002eaa:	f06f 0303 	mvn.w	r3, #3
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	e02c      	b.n	8002f0c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	6938      	ldr	r0, [r7, #16]
 8002ec0:	f001 f864 	bl	8003f8c <xQueueReceiveFromISR>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d003      	beq.n	8002ed2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002eca:	f06f 0302 	mvn.w	r3, #2
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e01c      	b.n	8002f0c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d019      	beq.n	8002f0c <osSemaphoreAcquire+0x94>
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <osSemaphoreAcquire+0xa0>)
 8002eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	e010      	b.n	8002f0c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	6938      	ldr	r0, [r7, #16]
 8002eee:	f000 ff41 	bl	8003d74 <xQueueSemaphoreTake>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d009      	beq.n	8002f0c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002efe:	f06f 0301 	mvn.w	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e002      	b.n	8002f0c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002f06:	f06f 0302 	mvn.w	r3, #2
 8002f0a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002f0c:	697b      	ldr	r3, [r7, #20]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002f32:	f06f 0303 	mvn.w	r3, #3
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e02c      	b.n	8002f94 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f3a:	f3ef 8305 	mrs	r3, IPSR
 8002f3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f40:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01a      	beq.n	8002f7c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002f4a:	f107 0308 	add.w	r3, r7, #8
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6938      	ldr	r0, [r7, #16]
 8002f52:	f000 fda2 	bl	8003a9a <xQueueGiveFromISR>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d003      	beq.n	8002f64 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002f5c:	f06f 0302 	mvn.w	r3, #2
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e017      	b.n	8002f94 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d014      	beq.n	8002f94 <osSemaphoreRelease+0x78>
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <osSemaphoreRelease+0x84>)
 8002f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	e00b      	b.n	8002f94 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	6938      	ldr	r0, [r7, #16]
 8002f84:	f000 fbf0 	bl	8003768 <xQueueGenericSend>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d002      	beq.n	8002f94 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002f8e:	f06f 0302 	mvn.w	r3, #2
 8002f92:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002f94:	697b      	ldr	r3, [r7, #20]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fb4:	f3ef 8305 	mrs	r3, IPSR
 8002fb8:	613b      	str	r3, [r7, #16]
  return(result);
 8002fba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d15f      	bne.n	8003080 <osMessageQueueNew+0xdc>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d05c      	beq.n	8003080 <osMessageQueueNew+0xdc>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d059      	beq.n	8003080 <osMessageQueueNew+0xdc>
    mem = -1;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d029      	beq.n	800302c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d012      	beq.n	8003006 <osMessageQueueNew+0x62>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b4f      	cmp	r3, #79	; 0x4f
 8002fe6:	d90e      	bls.n	8003006 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <osMessageQueueNew+0x62>
        mem = 1;
 8003000:	2301      	movs	r3, #1
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e014      	b.n	8003030 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d110      	bne.n	8003030 <osMessageQueueNew+0x8c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <osMessageQueueNew+0x8c>
          mem = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	e001      	b.n	8003030 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10b      	bne.n	800304e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2100      	movs	r1, #0
 8003040:	9100      	str	r1, [sp, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fa4f 	bl	80034e8 <xQueueGenericCreateStatic>
 800304a:	61f8      	str	r0, [r7, #28]
 800304c:	e008      	b.n	8003060 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003054:	2200      	movs	r2, #0
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fabd 	bl	80035d8 <xQueueGenericCreate>
 800305e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00c      	beq.n	8003080 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <osMessageQueueNew+0xd0>
        name = attr->name;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e001      	b.n	8003078 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003078:	6979      	ldr	r1, [r7, #20]
 800307a:	69f8      	ldr	r0, [r7, #28]
 800307c:	f001 f98e 	bl	800439c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003080:	69fb      	ldr	r3, [r7, #28]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a4:	f3ef 8305 	mrs	r3, IPSR
 80030a8:	617b      	str	r3, [r7, #20]
  return(result);
 80030aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d028      	beq.n	8003102 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <osMessageQueuePut+0x36>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <osMessageQueuePut+0x36>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80030c2:	f06f 0303 	mvn.w	r3, #3
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e038      	b.n	800313c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80030ce:	f107 0210 	add.w	r2, r7, #16
 80030d2:	2300      	movs	r3, #0
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	69b8      	ldr	r0, [r7, #24]
 80030d8:	f000 fc44 	bl	8003964 <xQueueGenericSendFromISR>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d003      	beq.n	80030ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80030e2:	f06f 0302 	mvn.w	r3, #2
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e028      	b.n	800313c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d025      	beq.n	800313c <osMessageQueuePut+0xb0>
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <osMessageQueuePut+0xbc>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	e01c      	b.n	800313c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <osMessageQueuePut+0x82>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800310e:	f06f 0303 	mvn.w	r3, #3
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	e012      	b.n	800313c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003116:	2300      	movs	r3, #0
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	69b8      	ldr	r0, [r7, #24]
 800311e:	f000 fb23 	bl	8003768 <xQueueGenericSend>
 8003122:	4603      	mov	r3, r0
 8003124:	2b01      	cmp	r3, #1
 8003126:	d009      	beq.n	800313c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800312e:	f06f 0301 	mvn.w	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	e002      	b.n	800313c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003136:	f06f 0302 	mvn.w	r3, #2
 800313a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800313c:	69fb      	ldr	r3, [r7, #28]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	e000ed04 	.word	0xe000ed04

0800314c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003162:	f3ef 8305 	mrs	r3, IPSR
 8003166:	617b      	str	r3, [r7, #20]
  return(result);
 8003168:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800316a:	2b00      	cmp	r3, #0
 800316c:	d028      	beq.n	80031c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <osMessageQueueGet+0x34>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <osMessageQueueGet+0x34>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003180:	f06f 0303 	mvn.w	r3, #3
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e037      	b.n	80031f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	461a      	mov	r2, r3
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	69b8      	ldr	r0, [r7, #24]
 8003196:	f000 fef9 	bl	8003f8c <xQueueReceiveFromISR>
 800319a:	4603      	mov	r3, r0
 800319c:	2b01      	cmp	r3, #1
 800319e:	d003      	beq.n	80031a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80031a0:	f06f 0302 	mvn.w	r3, #2
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e027      	b.n	80031f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d024      	beq.n	80031f8 <osMessageQueueGet+0xac>
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <osMessageQueueGet+0xb8>)
 80031b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	e01b      	b.n	80031f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <osMessageQueueGet+0x80>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80031cc:	f06f 0303 	mvn.w	r3, #3
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	e011      	b.n	80031f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	69b8      	ldr	r0, [r7, #24]
 80031da:	f000 fceb 	bl	8003bb4 <xQueueReceive>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d009      	beq.n	80031f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80031ea:	f06f 0301 	mvn.w	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	e002      	b.n	80031f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80031f2:	f06f 0302 	mvn.w	r3, #2
 80031f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80031f8:	69fb      	ldr	r3, [r7, #28]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000ed04 	.word	0xe000ed04

08003208 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <osMessageQueueGetCount+0x18>
    count = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e00e      	b.n	800323e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003220:	f3ef 8305 	mrs	r3, IPSR
 8003224:	60fb      	str	r3, [r7, #12]
  return(result);
 8003226:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800322c:	6938      	ldr	r0, [r7, #16]
 800322e:	f000 ff4b 	bl	80040c8 <uxQueueMessagesWaitingFromISR>
 8003232:	6178      	str	r0, [r7, #20]
 8003234:	e003      	b.n	800323e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8003236:	6938      	ldr	r0, [r7, #16]
 8003238:	f000 ff28 	bl	800408c <uxQueueMessagesWaiting>
 800323c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800323e:	697b      	ldr	r3, [r7, #20]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <vApplicationGetIdleTaskMemory+0x2c>)
 8003258:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <vApplicationGetIdleTaskMemory+0x30>)
 800325e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000140 	.word	0x20000140
 8003278:	2000019c 	.word	0x2000019c

0800327c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800328c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4a06      	ldr	r2, [pc, #24]	; (80032ac <vApplicationGetTimerTaskMemory+0x30>)
 8003292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	2000039c 	.word	0x2000039c
 80032ac:	200003f8 	.word	0x200003f8

080032b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f103 0208 	add.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f103 0208 	add.w	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f103 0208 	add.w	r2, r3, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d103      	bne.n	8003372 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e00c      	b.n	800338c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3308      	adds	r3, #8
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e002      	b.n	8003380 <vListInsert+0x2e>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	429a      	cmp	r2, r3
 800338a:	d2f6      	bcs.n	800337a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6892      	ldr	r2, [r2, #8]
 80033da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6852      	ldr	r2, [r2, #4]
 80033e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d103      	bne.n	80033f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	1e5a      	subs	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003442:	f002 fd67 	bl	8005f14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	3b01      	subs	r3, #1
 8003474:	68f9      	ldr	r1, [r7, #12]
 8003476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	441a      	add	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	22ff      	movs	r2, #255	; 0xff
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d114      	bne.n	80034c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01a      	beq.n	80034d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	3310      	adds	r3, #16
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fc61 	bl	8004d6c <xTaskRemoveFromEventList>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <xQueueGenericReset+0xcc>)
 80034b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	e009      	b.n	80034d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3310      	adds	r3, #16
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fef2 	bl	80032b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff feed 	bl	80032b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034d6:	f002 fd4d 	bl	8005f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034da:	2301      	movs	r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08e      	sub	sp, #56	; 0x38
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <xQueueGenericCreateStatic+0x52>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <xQueueGenericCreateStatic+0x56>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <xQueueGenericCreateStatic+0x58>
 800353e:	2300      	movs	r3, #0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	623b      	str	r3, [r7, #32]
}
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <xQueueGenericCreateStatic+0x7e>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <xQueueGenericCreateStatic+0x82>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <xQueueGenericCreateStatic+0x84>
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	61fb      	str	r3, [r7, #28]
}
 8003582:	bf00      	nop
 8003584:	e7fe      	b.n	8003584 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003586:	2350      	movs	r3, #80	; 0x50
 8003588:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b50      	cmp	r3, #80	; 0x50
 800358e:	d00a      	beq.n	80035a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	61bb      	str	r3, [r7, #24]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00d      	beq.n	80035ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f83f 	bl	800364c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3730      	adds	r7, #48	; 0x30
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xQueueGenericCreate+0x2a>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	613b      	str	r3, [r7, #16]
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3350      	adds	r3, #80	; 0x50
 8003610:	4618      	mov	r0, r3
 8003612:	f002 fda1 	bl	8006158 <pvPortMalloc>
 8003616:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d011      	beq.n	8003642 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	3350      	adds	r3, #80	; 0x50
 8003626:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003630:	79fa      	ldrb	r2, [r7, #7]
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4613      	mov	r3, r2
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f805 	bl	800364c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003642:	69bb      	ldr	r3, [r7, #24]
	}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e002      	b.n	800366e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800367a:	2101      	movs	r1, #1
 800367c:	69b8      	ldr	r0, [r7, #24]
 800367e:	f7ff fecb 	bl	8003418 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003692:	b580      	push	{r7, lr}
 8003694:	b08a      	sub	sp, #40	; 0x28
 8003696:	af02      	add	r7, sp, #8
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	61bb      	str	r3, [r7, #24]
}
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d90a      	bls.n	80036d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	617b      	str	r3, [r7, #20]
}
 80036d4:	bf00      	nop
 80036d6:	e7fe      	b.n	80036d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80036d8:	2302      	movs	r3, #2
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	2100      	movs	r1, #0
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff ff00 	bl	80034e8 <xQueueGenericCreateStatic>
 80036e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80036f6:	69fb      	ldr	r3, [r7, #28]
	}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	613b      	str	r3, [r7, #16]
}
 8003722:	bf00      	nop
 8003724:	e7fe      	b.n	8003724 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d90a      	bls.n	8003744 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	60fb      	str	r3, [r7, #12]
}
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003744:	2202      	movs	r2, #2
 8003746:	2100      	movs	r1, #0
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff45 	bl	80035d8 <xQueueGenericCreate>
 800374e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800375c:	697b      	ldr	r3, [r7, #20]
	}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08e      	sub	sp, #56	; 0x38
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003776:	2300      	movs	r3, #0
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueGenericSend+0x32>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <xQueueGenericSend+0x40>
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <xQueueGenericSend+0x44>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <xQueueGenericSend+0x46>
 80037ac:	2300      	movs	r3, #0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <xQueueGenericSend+0x60>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d103      	bne.n	80037d6 <xQueueGenericSend+0x6e>
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <xQueueGenericSend+0x72>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <xQueueGenericSend+0x74>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	623b      	str	r3, [r7, #32]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037f6:	f001 fc77 	bl	80050e8 <xTaskGetSchedulerState>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <xQueueGenericSend+0x9e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <xQueueGenericSend+0xa2>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <xQueueGenericSend+0xa4>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xQueueGenericSend+0xbe>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	61fb      	str	r3, [r7, #28]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003826:	f002 fb75 	bl	8005f14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <xQueueGenericSend+0xd4>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d129      	bne.n	8003890 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003842:	f000 fc9a 	bl	800417a <prvCopyDataToQueue>
 8003846:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	3324      	adds	r3, #36	; 0x24
 8003854:	4618      	mov	r0, r3
 8003856:	f001 fa89 	bl	8004d6c <xTaskRemoveFromEventList>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003860:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <xQueueGenericSend+0x1f8>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	e00a      	b.n	8003888 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003878:	4b39      	ldr	r3, [pc, #228]	; (8003960 <xQueueGenericSend+0x1f8>)
 800387a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003888:	f002 fb74 	bl	8005f74 <vPortExitCritical>
				return pdPASS;
 800388c:	2301      	movs	r3, #1
 800388e:	e063      	b.n	8003958 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003896:	f002 fb6d 	bl	8005f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800389a:	2300      	movs	r3, #0
 800389c:	e05c      	b.n	8003958 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800389e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 fac3 	bl	8004e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038b2:	f002 fb5f 	bl	8005f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038b6:	f001 f835 	bl	8004924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ba:	f002 fb2b 	bl	8005f14 <vPortEnterCritical>
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d103      	bne.n	80038d4 <xQueueGenericSend+0x16c>
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038da:	b25b      	sxtb	r3, r3
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d103      	bne.n	80038ea <xQueueGenericSend+0x182>
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038ea:	f002 fb43 	bl	8005f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038ee:	1d3a      	adds	r2, r7, #4
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fab2 	bl	8004e60 <xTaskCheckForTimeOut>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d124      	bne.n	800394c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003904:	f000 fd31 	bl	800436a <prvIsQueueFull>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	3310      	adds	r3, #16
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f001 f9d8 	bl	8004ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800391c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800391e:	f000 fcbc 	bl	800429a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003922:	f001 f80d 	bl	8004940 <xTaskResumeAll>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	f47f af7c 	bne.w	8003826 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <xQueueGenericSend+0x1f8>)
 8003930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	e772      	b.n	8003826 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003942:	f000 fcaa 	bl	800429a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003946:	f000 fffb 	bl	8004940 <xTaskResumeAll>
 800394a:	e76c      	b.n	8003826 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800394c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800394e:	f000 fca4 	bl	800429a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003952:	f000 fff5 	bl	8004940 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003956:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003958:	4618      	mov	r0, r3
 800395a:	3738      	adds	r7, #56	; 0x38
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b090      	sub	sp, #64	; 0x40
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <xQueueGenericSendFromISR+0x3c>
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <xQueueGenericSendFromISR+0x40>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <xQueueGenericSendFromISR+0x42>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d103      	bne.n	80039ce <xQueueGenericSendFromISR+0x6a>
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <xQueueGenericSendFromISR+0x6e>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <xQueueGenericSendFromISR+0x70>
 80039d2:	2300      	movs	r3, #0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	623b      	str	r3, [r7, #32]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039ee:	f002 fb73 	bl	80060d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039f2:	f3ef 8211 	mrs	r2, BASEPRI
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	61fa      	str	r2, [r7, #28]
 8003a08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <xQueueGenericSendFromISR+0xbc>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d12f      	bne.n	8003a80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a36:	f000 fba0 	bl	800417a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d112      	bne.n	8003a6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d016      	beq.n	8003a7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	3324      	adds	r3, #36	; 0x24
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 f98b 	bl	8004d6c <xTaskRemoveFromEventList>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00e      	beq.n	8003a7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e007      	b.n	8003a7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a6e:	3301      	adds	r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	b25a      	sxtb	r2, r3
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a7e:	e001      	b.n	8003a84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3740      	adds	r7, #64	; 0x40
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b08e      	sub	sp, #56	; 0x38
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	623b      	str	r3, [r7, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	e7fe      	b.n	8003ac2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	61fb      	str	r3, [r7, #28]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <xQueueGiveFromISR+0x58>
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <xQueueGiveFromISR+0x5c>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <xQueueGiveFromISR+0x5e>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	61bb      	str	r3, [r7, #24]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b12:	f002 fae1 	bl	80060d8 <vPortValidateInterruptPriority>
	__asm volatile
 8003b16:	f3ef 8211 	mrs	r2, BASEPRI
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	617a      	str	r2, [r7, #20]
 8003b2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003b2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d22b      	bcs.n	8003b9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d112      	bne.n	8003b84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	3324      	adds	r3, #36	; 0x24
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f8fe 	bl	8004d6c <xTaskRemoveFromEventList>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00e      	beq.n	8003b94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e007      	b.n	8003b94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b88:	3301      	adds	r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	b25a      	sxtb	r2, r3
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b94:	2301      	movs	r3, #1
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
 8003b98:	e001      	b.n	8003b9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f383 8811 	msr	BASEPRI, r3
}
 8003ba8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3738      	adds	r7, #56	; 0x38
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <xQueueReceive+0x30>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	623b      	str	r3, [r7, #32]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <xQueueReceive+0x3e>
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <xQueueReceive+0x42>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <xQueueReceive+0x44>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <xQueueReceive+0x5e>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	61fb      	str	r3, [r7, #28]
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c12:	f001 fa69 	bl	80050e8 <xTaskGetSchedulerState>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <xQueueReceive+0x6e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <xQueueReceive+0x72>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <xQueueReceive+0x74>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xQueueReceive+0x8e>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	61bb      	str	r3, [r7, #24]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c42:	f002 f967 	bl	8005f14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01f      	beq.n	8003c92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c56:	f000 fafa 	bl	800424e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	1e5a      	subs	r2, r3, #1
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	3310      	adds	r3, #16
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f87c 	bl	8004d6c <xTaskRemoveFromEventList>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <xQueueReceive+0x1bc>)
 8003c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c8a:	f002 f973 	bl	8005f74 <vPortExitCritical>
				return pdPASS;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e069      	b.n	8003d66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c98:	f002 f96c 	bl	8005f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e062      	b.n	8003d66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca6:	f107 0310 	add.w	r3, r7, #16
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f8c2 	bl	8004e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cb4:	f002 f95e 	bl	8005f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb8:	f000 fe34 	bl	8004924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cbc:	f002 f92a 	bl	8005f14 <vPortEnterCritical>
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d103      	bne.n	8003cd6 <xQueueReceive+0x122>
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cdc:	b25b      	sxtb	r3, r3
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d103      	bne.n	8003cec <xQueueReceive+0x138>
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cec:	f002 f942 	bl	8005f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cf0:	1d3a      	adds	r2, r7, #4
 8003cf2:	f107 0310 	add.w	r3, r7, #16
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 f8b1 	bl	8004e60 <xTaskCheckForTimeOut>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d123      	bne.n	8003d4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d06:	f000 fb1a 	bl	800433e <prvIsQueueEmpty>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d017      	beq.n	8003d40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	3324      	adds	r3, #36	; 0x24
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 ffd7 	bl	8004ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d20:	f000 fabb 	bl	800429a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d24:	f000 fe0c 	bl	8004940 <xTaskResumeAll>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d189      	bne.n	8003c42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <xQueueReceive+0x1bc>)
 8003d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	e780      	b.n	8003c42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d42:	f000 faaa 	bl	800429a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d46:	f000 fdfb 	bl	8004940 <xTaskResumeAll>
 8003d4a:	e77a      	b.n	8003c42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4e:	f000 faa4 	bl	800429a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d52:	f000 fdf5 	bl	8004940 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d58:	f000 faf1 	bl	800433e <prvIsQueueEmpty>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f43f af6f 	beq.w	8003c42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3730      	adds	r7, #48	; 0x30
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08e      	sub	sp, #56	; 0x38
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	623b      	str	r3, [r7, #32]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	61fb      	str	r3, [r7, #28]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc4:	f001 f990 	bl	80050e8 <xTaskGetSchedulerState>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <xQueueSemaphoreTake+0x60>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <xQueueSemaphoreTake+0x64>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <xQueueSemaphoreTake+0x66>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	61bb      	str	r3, [r7, #24]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003df4:	f002 f88e 	bl	8005f14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d024      	beq.n	8003e4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	1e5a      	subs	r2, r3, #1
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e14:	f001 fade 	bl	80053d4 <pvTaskIncrementMutexHeldCount>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00f      	beq.n	8003e46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	3310      	adds	r3, #16
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 ff9e 	bl	8004d6c <xTaskRemoveFromEventList>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e36:	4b54      	ldr	r3, [pc, #336]	; (8003f88 <xQueueSemaphoreTake+0x214>)
 8003e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e46:	f002 f895 	bl	8005f74 <vPortExitCritical>
				return pdPASS;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e097      	b.n	8003f7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d111      	bne.n	8003e78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	617b      	str	r3, [r7, #20]
}
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e70:	f002 f880 	bl	8005f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e082      	b.n	8003f7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 ffd6 	bl	8004e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e8c:	f002 f872 	bl	8005f74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e90:	f000 fd48 	bl	8004924 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e94:	f002 f83e 	bl	8005f14 <vPortEnterCritical>
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d103      	bne.n	8003eae <xQueueSemaphoreTake+0x13a>
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d103      	bne.n	8003ec4 <xQueueSemaphoreTake+0x150>
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec4:	f002 f856 	bl	8005f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ec8:	463a      	mov	r2, r7
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ffc5 	bl	8004e60 <xTaskCheckForTimeOut>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d132      	bne.n	8003f42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003edc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ede:	f000 fa2e 	bl	800433e <prvIsQueueEmpty>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d026      	beq.n	8003f36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ef0:	f002 f810 	bl	8005f14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 f913 	bl	8005124 <xTaskPriorityInherit>
 8003efe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f00:	f002 f838 	bl	8005f74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	3324      	adds	r3, #36	; 0x24
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fedd 	bl	8004ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f14:	f000 f9c1 	bl	800429a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f18:	f000 fd12 	bl	8004940 <xTaskResumeAll>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f47f af68 	bne.w	8003df4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <xQueueSemaphoreTake+0x214>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	e75e      	b.n	8003df4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f38:	f000 f9af 	bl	800429a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f3c:	f000 fd00 	bl	8004940 <xTaskResumeAll>
 8003f40:	e758      	b.n	8003df4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f44:	f000 f9a9 	bl	800429a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f48:	f000 fcfa 	bl	8004940 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f4e:	f000 f9f6 	bl	800433e <prvIsQueueEmpty>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f43f af4d 	beq.w	8003df4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f60:	f001 ffd8 	bl	8005f14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f66:	f000 f8f0 	bl	800414a <prvGetDisinheritPriorityAfterTimeout>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 f9ac 	bl	80052d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f78:	f001 fffc 	bl	8005f74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3738      	adds	r7, #56	; 0x38
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08e      	sub	sp, #56	; 0x38
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	623b      	str	r3, [r7, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <xQueueReceiveFromISR+0x3a>
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <xQueueReceiveFromISR+0x3e>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <xQueueReceiveFromISR+0x40>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	61fb      	str	r3, [r7, #28]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fe6:	f002 f877 	bl	80060d8 <vPortValidateInterruptPriority>
	__asm volatile
 8003fea:	f3ef 8211 	mrs	r2, BASEPRI
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	61ba      	str	r2, [r7, #24]
 8004000:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004002:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d02f      	beq.n	8004072 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004020:	f000 f915 	bl	800424e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	1e5a      	subs	r2, r3, #1
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800402c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d112      	bne.n	800405c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	3310      	adds	r3, #16
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fe92 	bl	8004d6c <xTaskRemoveFromEventList>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00e      	beq.n	800406c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e007      	b.n	800406c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800405c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004060:	3301      	adds	r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	b25a      	sxtb	r2, r3
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800406c:	2301      	movs	r3, #1
 800406e:	637b      	str	r3, [r7, #52]	; 0x34
 8004070:	e001      	b.n	8004076 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	613b      	str	r3, [r7, #16]
	__asm volatile
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f383 8811 	msr	BASEPRI, r3
}
 8004080:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004084:	4618      	mov	r0, r3
 8004086:	3738      	adds	r7, #56	; 0x38
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60bb      	str	r3, [r7, #8]
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80040b0:	f001 ff30 	bl	8005f14 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80040ba:	f001 ff5b 	bl	8005f74 <vPortExitCritical>

	return uxReturn;
 80040be:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60fb      	str	r3, [r7, #12]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80040f6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040f8:	4618      	mov	r0, r3
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <vQueueDelete+0x28>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60bb      	str	r3, [r7, #8]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f95f 	bl	80043f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f002 f8d7 	bl	80062f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e001      	b.n	800416c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800416c:	68fb      	ldr	r3, [r7, #12]
	}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10d      	bne.n	80041b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d14d      	bne.n	800423c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 f825 	bl	80051f4 <xTaskPriorityDisinherit>
 80041aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	e043      	b.n	800423c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d119      	bne.n	80041ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6858      	ldr	r0, [r3, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	461a      	mov	r2, r3
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	f002 f9db 	bl	8006580 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	441a      	add	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d32b      	bcc.n	800423c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	605a      	str	r2, [r3, #4]
 80041ec:	e026      	b.n	800423c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68d8      	ldr	r0, [r3, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	461a      	mov	r2, r3
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	f002 f9c1 	bl	8006580 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	425b      	negs	r3, r3
 8004208:	441a      	add	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d207      	bcs.n	800422a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	425b      	negs	r3, r3
 8004224:	441a      	add	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d105      	bne.n	800423c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	3b01      	subs	r3, #1
 800423a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004244:	697b      	ldr	r3, [r7, #20]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d018      	beq.n	8004292 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d303      	bcc.n	8004282 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68d9      	ldr	r1, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	461a      	mov	r2, r3
 800428c:	6838      	ldr	r0, [r7, #0]
 800428e:	f002 f977 	bl	8006580 <memcpy>
	}
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042a2:	f001 fe37 	bl	8005f14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ae:	e011      	b.n	80042d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d012      	beq.n	80042de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3324      	adds	r3, #36	; 0x24
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fd55 	bl	8004d6c <xTaskRemoveFromEventList>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042c8:	f000 fe2c 	bl	8004f24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dce9      	bgt.n	80042b0 <prvUnlockQueue+0x16>
 80042dc:	e000      	b.n	80042e0 <prvUnlockQueue+0x46>
					break;
 80042de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	22ff      	movs	r2, #255	; 0xff
 80042e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042e8:	f001 fe44 	bl	8005f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042ec:	f001 fe12 	bl	8005f14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042f8:	e011      	b.n	800431e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d012      	beq.n	8004328 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3310      	adds	r3, #16
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fd30 	bl	8004d6c <xTaskRemoveFromEventList>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004312:	f000 fe07 	bl	8004f24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004316:	7bbb      	ldrb	r3, [r7, #14]
 8004318:	3b01      	subs	r3, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800431e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004322:	2b00      	cmp	r3, #0
 8004324:	dce9      	bgt.n	80042fa <prvUnlockQueue+0x60>
 8004326:	e000      	b.n	800432a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004328:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004332:	f001 fe1f 	bl	8005f74 <vPortExitCritical>
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004346:	f001 fde5 	bl	8005f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004352:	2301      	movs	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e001      	b.n	800435c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800435c:	f001 fe0a 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 8004360:	68fb      	ldr	r3, [r7, #12]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004372:	f001 fdcf 	bl	8005f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	429a      	cmp	r2, r3
 8004380:	d102      	bne.n	8004388 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004382:	2301      	movs	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e001      	b.n	800438c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800438c:	f001 fdf2 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 8004390:	68fb      	ldr	r3, [r7, #12]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e014      	b.n	80043d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043ac:	4a0f      	ldr	r2, [pc, #60]	; (80043ec <vQueueAddToRegistry+0x50>)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <vQueueAddToRegistry+0x50>)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <vQueueAddToRegistry+0x50>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80043ce:	e006      	b.n	80043de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b07      	cmp	r3, #7
 80043da:	d9e7      	bls.n	80043ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	200007f8 	.word	0x200007f8

080043f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e016      	b.n	800442c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80043fe:	4a10      	ldr	r2, [pc, #64]	; (8004440 <vQueueUnregisterQueue+0x50>)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	429a      	cmp	r2, r3
 800440c:	d10b      	bne.n	8004426 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800440e:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <vQueueUnregisterQueue+0x50>)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2100      	movs	r1, #0
 8004414:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004418:	4a09      	ldr	r2, [pc, #36]	; (8004440 <vQueueUnregisterQueue+0x50>)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	2200      	movs	r2, #0
 8004422:	605a      	str	r2, [r3, #4]
				break;
 8004424:	e006      	b.n	8004434 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b07      	cmp	r3, #7
 8004430:	d9e5      	bls.n	80043fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	200007f8 	.word	0x200007f8

08004444 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004454:	f001 fd5e 	bl	8005f14 <vPortEnterCritical>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800445e:	b25b      	sxtb	r3, r3
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d103      	bne.n	800446e <vQueueWaitForMessageRestricted+0x2a>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004474:	b25b      	sxtb	r3, r3
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d103      	bne.n	8004484 <vQueueWaitForMessageRestricted+0x40>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004484:	f001 fd76 	bl	8005f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3324      	adds	r3, #36	; 0x24
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fc3b 	bl	8004d14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800449e:	6978      	ldr	r0, [r7, #20]
 80044a0:	f7ff fefb 	bl	800429a <prvUnlockQueue>
	}
 80044a4:	bf00      	nop
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08e      	sub	sp, #56	; 0x38
 80044b0:	af04      	add	r7, sp, #16
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	623b      	str	r3, [r7, #32]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	61fb      	str	r3, [r7, #28]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044f2:	235c      	movs	r3, #92	; 0x5c
 80044f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b5c      	cmp	r3, #92	; 0x5c
 80044fa:	d00a      	beq.n	8004512 <xTaskCreateStatic+0x66>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	61bb      	str	r3, [r7, #24]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004512:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01e      	beq.n	8004558 <xTaskCreateStatic+0xac>
 800451a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004528:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	2202      	movs	r2, #2
 800452e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004532:	2300      	movs	r3, #0
 8004534:	9303      	str	r3, [sp, #12]
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	9302      	str	r3, [sp, #8]
 800453a:	f107 0314 	add.w	r3, r7, #20
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f850 	bl	80045f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004552:	f000 f8dd 	bl	8004710 <prvAddNewTaskToReadyList>
 8004556:	e001      	b.n	800455c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800455c:	697b      	ldr	r3, [r7, #20]
	}
 800455e:	4618      	mov	r0, r3
 8004560:	3728      	adds	r7, #40	; 0x28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004566:	b580      	push	{r7, lr}
 8004568:	b08c      	sub	sp, #48	; 0x30
 800456a:	af04      	add	r7, sp, #16
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4618      	mov	r0, r3
 800457c:	f001 fdec 	bl	8006158 <pvPortMalloc>
 8004580:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00e      	beq.n	80045a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004588:	205c      	movs	r0, #92	; 0x5c
 800458a:	f001 fde5 	bl	8006158 <pvPortMalloc>
 800458e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
 800459c:	e005      	b.n	80045aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f001 fea6 	bl	80062f0 <vPortFree>
 80045a4:	e001      	b.n	80045aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d017      	beq.n	80045e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045b8:	88fa      	ldrh	r2, [r7, #6]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9303      	str	r3, [sp, #12]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	9302      	str	r3, [sp, #8]
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f80e 	bl	80045f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045d4:	69f8      	ldr	r0, [r7, #28]
 80045d6:	f000 f89b 	bl	8004710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045da:	2301      	movs	r3, #1
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e002      	b.n	80045e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295
 80045e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045e6:	69bb      	ldr	r3, [r7, #24]
	}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	461a      	mov	r2, r3
 8004608:	21a5      	movs	r1, #165	; 0xa5
 800460a:	f001 ffc7 	bl	800659c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004618:	3b01      	subs	r3, #1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	f023 0307 	bic.w	r3, r3, #7
 8004626:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	617b      	str	r3, [r7, #20]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01f      	beq.n	800468e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e012      	b.n	800467a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	7819      	ldrb	r1, [r3, #0]
 800465c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	3334      	adds	r3, #52	; 0x34
 8004664:	460a      	mov	r2, r1
 8004666:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	4413      	add	r3, r2
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b0f      	cmp	r3, #15
 800467e:	d9e9      	bls.n	8004654 <prvInitialiseNewTask+0x64>
 8004680:	e000      	b.n	8004684 <prvInitialiseNewTask+0x94>
			{
				break;
 8004682:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800468c:	e003      	b.n	8004696 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	2b37      	cmp	r3, #55	; 0x37
 800469a:	d901      	bls.n	80046a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800469c:	2337      	movs	r3, #55	; 0x37
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	2200      	movs	r2, #0
 80046b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	3304      	adds	r3, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fe1a 	bl	80032f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	3318      	adds	r3, #24
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fe15 	bl	80032f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	2200      	movs	r2, #0
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	69b8      	ldr	r0, [r7, #24]
 80046f0:	f001 fae0 	bl	8005cb4 <pxPortInitialiseStack>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004706:	bf00      	nop
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004718:	f001 fbfc 	bl	8005f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800471c:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <prvAddNewTaskToReadyList+0xc4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <prvAddNewTaskToReadyList+0xc4>)
 8004724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <prvAddNewTaskToReadyList+0xc8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800472e:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <prvAddNewTaskToReadyList+0xc8>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004734:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <prvAddNewTaskToReadyList+0xc4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d110      	bne.n	800475e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800473c:	f000 fc16 	bl	8004f6c <prvInitialiseTaskLists>
 8004740:	e00d      	b.n	800475e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <prvAddNewTaskToReadyList+0xcc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <prvAddNewTaskToReadyList+0xc8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	429a      	cmp	r2, r3
 8004756:	d802      	bhi.n	800475e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <prvAddNewTaskToReadyList+0xc8>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <prvAddNewTaskToReadyList+0xd0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <prvAddNewTaskToReadyList+0xd0>)
 8004766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004768:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <prvAddNewTaskToReadyList+0xd0>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <prvAddNewTaskToReadyList+0xd4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d903      	bls.n	8004784 <prvAddNewTaskToReadyList+0x74>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <prvAddNewTaskToReadyList+0xd4>)
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <prvAddNewTaskToReadyList+0xd8>)
 8004792:	441a      	add	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f7fe fdb5 	bl	800330a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047a0:	f001 fbe8 	bl	8005f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047a4:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <prvAddNewTaskToReadyList+0xcc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00e      	beq.n	80047ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <prvAddNewTaskToReadyList+0xc8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d207      	bcs.n	80047ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <prvAddNewTaskToReadyList+0xdc>)
 80047bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000d0c 	.word	0x20000d0c
 80047d8:	20000838 	.word	0x20000838
 80047dc:	20000d18 	.word	0x20000d18
 80047e0:	20000d28 	.word	0x20000d28
 80047e4:	20000d14 	.word	0x20000d14
 80047e8:	2000083c 	.word	0x2000083c
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d017      	beq.n	8004832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <vTaskDelay+0x60>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <vTaskDelay+0x30>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60bb      	str	r3, [r7, #8]
}
 800481c:	bf00      	nop
 800481e:	e7fe      	b.n	800481e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004820:	f000 f880 	bl	8004924 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004824:	2100      	movs	r1, #0
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fde8 	bl	80053fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800482c:	f000 f888 	bl	8004940 <xTaskResumeAll>
 8004830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d107      	bne.n	8004848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <vTaskDelay+0x64>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000d34 	.word	0x20000d34
 8004854:	e000ed04 	.word	0xe000ed04

08004858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004866:	463a      	mov	r2, r7
 8004868:	1d39      	adds	r1, r7, #4
 800486a:	f107 0308 	add.w	r3, r7, #8
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fcea 	bl	8003248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	9202      	str	r2, [sp, #8]
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	2300      	movs	r3, #0
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2300      	movs	r3, #0
 8004884:	460a      	mov	r2, r1
 8004886:	4921      	ldr	r1, [pc, #132]	; (800490c <vTaskStartScheduler+0xb4>)
 8004888:	4821      	ldr	r0, [pc, #132]	; (8004910 <vTaskStartScheduler+0xb8>)
 800488a:	f7ff fe0f 	bl	80044ac <xTaskCreateStatic>
 800488e:	4603      	mov	r3, r0
 8004890:	4a20      	ldr	r2, [pc, #128]	; (8004914 <vTaskStartScheduler+0xbc>)
 8004892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004894:	4b1f      	ldr	r3, [pc, #124]	; (8004914 <vTaskStartScheduler+0xbc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e001      	b.n	80048a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80048ac:	f000 fdfa 	bl	80054a4 <xTimerCreateTimerTask>
 80048b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d116      	bne.n	80048e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	613b      	str	r3, [r7, #16]
}
 80048ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048cc:	4b12      	ldr	r3, [pc, #72]	; (8004918 <vTaskStartScheduler+0xc0>)
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <vTaskStartScheduler+0xc4>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <vTaskStartScheduler+0xc8>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048e0:	f001 fa76 	bl	8005dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048e4:	e00e      	b.n	8004904 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d10a      	bne.n	8004904 <vTaskStartScheduler+0xac>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	60fb      	str	r3, [r7, #12]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <vTaskStartScheduler+0xaa>
}
 8004904:	bf00      	nop
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	08006f0c 	.word	0x08006f0c
 8004910:	08004f3d 	.word	0x08004f3d
 8004914:	20000d30 	.word	0x20000d30
 8004918:	20000d2c 	.word	0x20000d2c
 800491c:	20000d18 	.word	0x20000d18
 8004920:	20000d10 	.word	0x20000d10

08004924 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004928:	4b04      	ldr	r3, [pc, #16]	; (800493c <vTaskSuspendAll+0x18>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	4a03      	ldr	r2, [pc, #12]	; (800493c <vTaskSuspendAll+0x18>)
 8004930:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004932:	bf00      	nop
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	20000d34 	.word	0x20000d34

08004940 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800494e:	4b42      	ldr	r3, [pc, #264]	; (8004a58 <xTaskResumeAll+0x118>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <xTaskResumeAll+0x2c>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	603b      	str	r3, [r7, #0]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800496c:	f001 fad2 	bl	8005f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004970:	4b39      	ldr	r3, [pc, #228]	; (8004a58 <xTaskResumeAll+0x118>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3b01      	subs	r3, #1
 8004976:	4a38      	ldr	r2, [pc, #224]	; (8004a58 <xTaskResumeAll+0x118>)
 8004978:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497a:	4b37      	ldr	r3, [pc, #220]	; (8004a58 <xTaskResumeAll+0x118>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d162      	bne.n	8004a48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004982:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <xTaskResumeAll+0x11c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d05e      	beq.n	8004a48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800498a:	e02f      	b.n	80049ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800498c:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <xTaskResumeAll+0x120>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3318      	adds	r3, #24
 8004998:	4618      	mov	r0, r3
 800499a:	f7fe fd13 	bl	80033c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fd0e 	bl	80033c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <xTaskResumeAll+0x124>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d903      	bls.n	80049bc <xTaskResumeAll+0x7c>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <xTaskResumeAll+0x124>)
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <xTaskResumeAll+0x128>)
 80049ca:	441a      	add	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7fe fc99 	bl	800330a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <xTaskResumeAll+0x12c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049e6:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <xTaskResumeAll+0x130>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <xTaskResumeAll+0x120>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1cb      	bne.n	800498c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049fa:	f000 fb55 	bl	80050a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <xTaskResumeAll+0x134>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a0a:	f000 f847 	bl	8004a9c <xTaskIncrementTick>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a14:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <xTaskResumeAll+0x130>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f1      	bne.n	8004a0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a26:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <xTaskResumeAll+0x134>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <xTaskResumeAll+0x130>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <xTaskResumeAll+0x138>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a48:	f001 fa94 	bl	8005f74 <vPortExitCritical>

	return xAlreadyYielded;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000d34 	.word	0x20000d34
 8004a5c:	20000d0c 	.word	0x20000d0c
 8004a60:	20000ccc 	.word	0x20000ccc
 8004a64:	20000d14 	.word	0x20000d14
 8004a68:	2000083c 	.word	0x2000083c
 8004a6c:	20000838 	.word	0x20000838
 8004a70:	20000d20 	.word	0x20000d20
 8004a74:	20000d1c 	.word	0x20000d1c
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <xTaskGetTickCount+0x1c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a88:	687b      	ldr	r3, [r7, #4]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000d10 	.word	0x20000d10

08004a9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <xTaskIncrementTick+0x148>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 808f 	bne.w	8004bce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ab0:	4b4d      	ldr	r3, [pc, #308]	; (8004be8 <xTaskIncrementTick+0x14c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ab8:	4a4b      	ldr	r2, [pc, #300]	; (8004be8 <xTaskIncrementTick+0x14c>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d120      	bne.n	8004b06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ac4:	4b49      	ldr	r3, [pc, #292]	; (8004bec <xTaskIncrementTick+0x150>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	603b      	str	r3, [r7, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <xTaskIncrementTick+0x46>
 8004ae4:	4b41      	ldr	r3, [pc, #260]	; (8004bec <xTaskIncrementTick+0x150>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <xTaskIncrementTick+0x154>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3f      	ldr	r2, [pc, #252]	; (8004bec <xTaskIncrementTick+0x150>)
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4a3f      	ldr	r2, [pc, #252]	; (8004bf0 <xTaskIncrementTick+0x154>)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <xTaskIncrementTick+0x158>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3301      	adds	r3, #1
 8004afe:	4a3d      	ldr	r2, [pc, #244]	; (8004bf4 <xTaskIncrementTick+0x158>)
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	f000 fad1 	bl	80050a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b06:	4b3c      	ldr	r3, [pc, #240]	; (8004bf8 <xTaskIncrementTick+0x15c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d349      	bcc.n	8004ba4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b10:	4b36      	ldr	r3, [pc, #216]	; (8004bec <xTaskIncrementTick+0x150>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1a:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <xTaskIncrementTick+0x15c>)
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b20:	601a      	str	r2, [r3, #0]
					break;
 8004b22:	e03f      	b.n	8004ba4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b24:	4b31      	ldr	r3, [pc, #196]	; (8004bec <xTaskIncrementTick+0x150>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d203      	bcs.n	8004b44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b3c:	4a2e      	ldr	r2, [pc, #184]	; (8004bf8 <xTaskIncrementTick+0x15c>)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b42:	e02f      	b.n	8004ba4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe fc3b 	bl	80033c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	3318      	adds	r3, #24
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fc32 	bl	80033c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <xTaskIncrementTick+0x160>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d903      	bls.n	8004b74 <xTaskIncrementTick+0xd8>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <xTaskIncrementTick+0x160>)
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <xTaskIncrementTick+0x164>)
 8004b82:	441a      	add	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f7fe fbbd 	bl	800330a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <xTaskIncrementTick+0x168>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d3b8      	bcc.n	8004b10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ba2:	e7b5      	b.n	8004b10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ba4:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <xTaskIncrementTick+0x168>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004baa:	4915      	ldr	r1, [pc, #84]	; (8004c00 <xTaskIncrementTick+0x164>)
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d901      	bls.n	8004bc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <xTaskIncrementTick+0x16c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e004      	b.n	8004bd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <xTaskIncrementTick+0x170>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <xTaskIncrementTick+0x170>)
 8004bd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bd8:	697b      	ldr	r3, [r7, #20]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000d34 	.word	0x20000d34
 8004be8:	20000d10 	.word	0x20000d10
 8004bec:	20000cc4 	.word	0x20000cc4
 8004bf0:	20000cc8 	.word	0x20000cc8
 8004bf4:	20000d24 	.word	0x20000d24
 8004bf8:	20000d2c 	.word	0x20000d2c
 8004bfc:	20000d14 	.word	0x20000d14
 8004c00:	2000083c 	.word	0x2000083c
 8004c04:	20000838 	.word	0x20000838
 8004c08:	20000d20 	.word	0x20000d20
 8004c0c:	20000d1c 	.word	0x20000d1c

08004c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c16:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <vTaskSwitchContext+0xa8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c1e:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <vTaskSwitchContext+0xac>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c24:	e041      	b.n	8004caa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004c26:	4b25      	ldr	r3, [pc, #148]	; (8004cbc <vTaskSwitchContext+0xac>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c2c:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <vTaskSwitchContext+0xb0>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e010      	b.n	8004c56 <vTaskSwitchContext+0x46>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <vTaskSwitchContext+0x40>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	607b      	str	r3, [r7, #4]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <vTaskSwitchContext+0x3e>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	491b      	ldr	r1, [pc, #108]	; (8004cc4 <vTaskSwitchContext+0xb4>)
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0e4      	beq.n	8004c34 <vTaskSwitchContext+0x24>
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <vTaskSwitchContext+0xb4>)
 8004c76:	4413      	add	r3, r2
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d104      	bne.n	8004c9a <vTaskSwitchContext+0x8a>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <vTaskSwitchContext+0xb8>)
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	4a06      	ldr	r2, [pc, #24]	; (8004cc0 <vTaskSwitchContext+0xb0>)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6013      	str	r3, [r2, #0]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000d34 	.word	0x20000d34
 8004cbc:	20000d20 	.word	0x20000d20
 8004cc0:	20000d14 	.word	0x20000d14
 8004cc4:	2000083c 	.word	0x2000083c
 8004cc8:	20000838 	.word	0x20000838

08004ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <vTaskPlaceOnEventList+0x44>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3318      	adds	r3, #24
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fe fb29 	bl	8003352 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d00:	2101      	movs	r1, #1
 8004d02:	6838      	ldr	r0, [r7, #0]
 8004d04:	f000 fb7a 	bl	80053fc <prvAddCurrentTaskToDelayedList>
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000838 	.word	0x20000838

08004d14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	617b      	str	r3, [r7, #20]
}
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3318      	adds	r3, #24
 8004d42:	4619      	mov	r1, r3
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7fe fae0 	bl	800330a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295
 8004d54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	68b8      	ldr	r0, [r7, #8]
 8004d5a:	f000 fb4f 	bl	80053fc <prvAddCurrentTaskToDelayedList>
	}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000838 	.word	0x20000838

08004d6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	60fb      	str	r3, [r7, #12]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	3318      	adds	r3, #24
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe fb11 	bl	80033c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004da2:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <xTaskRemoveFromEventList+0xb0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d11d      	bne.n	8004de6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fb08 	bl	80033c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <xTaskRemoveFromEventList+0xb4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d903      	bls.n	8004dc8 <xTaskRemoveFromEventList+0x5c>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a16      	ldr	r2, [pc, #88]	; (8004e20 <xTaskRemoveFromEventList+0xb4>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <xTaskRemoveFromEventList+0xb8>)
 8004dd6:	441a      	add	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7fe fa93 	bl	800330a <vListInsertEnd>
 8004de4:	e005      	b.n	8004df2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3318      	adds	r3, #24
 8004dea:	4619      	mov	r1, r3
 8004dec:	480e      	ldr	r0, [pc, #56]	; (8004e28 <xTaskRemoveFromEventList+0xbc>)
 8004dee:	f7fe fa8c 	bl	800330a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <xTaskRemoveFromEventList+0xc0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d905      	bls.n	8004e0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <xTaskRemoveFromEventList+0xc4>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e001      	b.n	8004e10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e10:	697b      	ldr	r3, [r7, #20]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000d34 	.word	0x20000d34
 8004e20:	20000d14 	.word	0x20000d14
 8004e24:	2000083c 	.word	0x2000083c
 8004e28:	20000ccc 	.word	0x20000ccc
 8004e2c:	20000838 	.word	0x20000838
 8004e30:	20000d20 	.word	0x20000d20

08004e34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <vTaskInternalSetTimeOutState+0x24>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <vTaskInternalSetTimeOutState+0x28>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	605a      	str	r2, [r3, #4]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	20000d24 	.word	0x20000d24
 8004e5c:	20000d10 	.word	0x20000d10

08004e60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	613b      	str	r3, [r7, #16]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ea2:	f001 f837 	bl	8005f14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <xTaskCheckForTimeOut+0xbc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d102      	bne.n	8004ec6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	e023      	b.n	8004f0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <xTaskCheckForTimeOut+0xc0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d007      	beq.n	8004ee2 <xTaskCheckForTimeOut+0x82>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d302      	bcc.n	8004ee2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e015      	b.n	8004f0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d20b      	bcs.n	8004f04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1ad2      	subs	r2, r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff9b 	bl	8004e34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	e004      	b.n	8004f0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f0e:	f001 f831 	bl	8005f74 <vPortExitCritical>

	return xReturn;
 8004f12:	69fb      	ldr	r3, [r7, #28]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000d10 	.word	0x20000d10
 8004f20:	20000d24 	.word	0x20000d24

08004f24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <vTaskMissedYield+0x14>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000d20 	.word	0x20000d20

08004f3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f44:	f000 f852 	bl	8004fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <prvIdleTask+0x28>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d9f9      	bls.n	8004f44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <prvIdleTask+0x2c>)
 8004f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f60:	e7f0      	b.n	8004f44 <prvIdleTask+0x8>
 8004f62:	bf00      	nop
 8004f64:	2000083c 	.word	0x2000083c
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	e00c      	b.n	8004f92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <prvInitialiseTaskLists+0x60>)
 8004f84:	4413      	add	r3, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe f992 	bl	80032b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b37      	cmp	r3, #55	; 0x37
 8004f96:	d9ef      	bls.n	8004f78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f98:	480d      	ldr	r0, [pc, #52]	; (8004fd0 <prvInitialiseTaskLists+0x64>)
 8004f9a:	f7fe f989 	bl	80032b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f9e:	480d      	ldr	r0, [pc, #52]	; (8004fd4 <prvInitialiseTaskLists+0x68>)
 8004fa0:	f7fe f986 	bl	80032b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fa4:	480c      	ldr	r0, [pc, #48]	; (8004fd8 <prvInitialiseTaskLists+0x6c>)
 8004fa6:	f7fe f983 	bl	80032b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004faa:	480c      	ldr	r0, [pc, #48]	; (8004fdc <prvInitialiseTaskLists+0x70>)
 8004fac:	f7fe f980 	bl	80032b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fb0:	480b      	ldr	r0, [pc, #44]	; (8004fe0 <prvInitialiseTaskLists+0x74>)
 8004fb2:	f7fe f97d 	bl	80032b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <prvInitialiseTaskLists+0x78>)
 8004fb8:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <prvInitialiseTaskLists+0x64>)
 8004fba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <prvInitialiseTaskLists+0x7c>)
 8004fbe:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <prvInitialiseTaskLists+0x68>)
 8004fc0:	601a      	str	r2, [r3, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	2000083c 	.word	0x2000083c
 8004fd0:	20000c9c 	.word	0x20000c9c
 8004fd4:	20000cb0 	.word	0x20000cb0
 8004fd8:	20000ccc 	.word	0x20000ccc
 8004fdc:	20000ce0 	.word	0x20000ce0
 8004fe0:	20000cf8 	.word	0x20000cf8
 8004fe4:	20000cc4 	.word	0x20000cc4
 8004fe8:	20000cc8 	.word	0x20000cc8

08004fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ff2:	e019      	b.n	8005028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ff4:	f000 ff8e 	bl	8005f14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff8:	4b10      	ldr	r3, [pc, #64]	; (800503c <prvCheckTasksWaitingTermination+0x50>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe f9dd 	bl	80033c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <prvCheckTasksWaitingTermination+0x54>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3b01      	subs	r3, #1
 8005010:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <prvCheckTasksWaitingTermination+0x54>)
 8005012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <prvCheckTasksWaitingTermination+0x58>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3b01      	subs	r3, #1
 800501a:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <prvCheckTasksWaitingTermination+0x58>)
 800501c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800501e:	f000 ffa9 	bl	8005f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f810 	bl	8005048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <prvCheckTasksWaitingTermination+0x58>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e1      	bne.n	8004ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000ce0 	.word	0x20000ce0
 8005040:	20000d0c 	.word	0x20000d0c
 8005044:	20000cf4 	.word	0x20000cf4

08005048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4618      	mov	r0, r3
 8005060:	f001 f946 	bl	80062f0 <vPortFree>
				vPortFree( pxTCB );
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 f943 	bl	80062f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800506a:	e018      	b.n	800509e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005072:	2b01      	cmp	r3, #1
 8005074:	d103      	bne.n	800507e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f001 f93a 	bl	80062f0 <vPortFree>
	}
 800507c:	e00f      	b.n	800509e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005084:	2b02      	cmp	r3, #2
 8005086:	d00a      	beq.n	800509e <prvDeleteTCB+0x56>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	60fb      	str	r3, [r7, #12]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <prvDeleteTCB+0x54>
	}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <prvResetNextTaskUnblockTime+0x38>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <prvResetNextTaskUnblockTime+0x3c>)
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295
 80050be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050c0:	e008      	b.n	80050d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <prvResetNextTaskUnblockTime+0x38>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <prvResetNextTaskUnblockTime+0x3c>)
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000cc4 	.word	0x20000cc4
 80050e4:	20000d2c 	.word	0x20000d2c

080050e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <xTaskGetSchedulerState+0x34>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050f6:	2301      	movs	r3, #1
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	e008      	b.n	800510e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050fc:	4b08      	ldr	r3, [pc, #32]	; (8005120 <xTaskGetSchedulerState+0x38>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005104:	2302      	movs	r3, #2
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	e001      	b.n	800510e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800510a:	2300      	movs	r3, #0
 800510c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800510e:	687b      	ldr	r3, [r7, #4]
	}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20000d18 	.word	0x20000d18
 8005120:	20000d34 	.word	0x20000d34

08005124 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d051      	beq.n	80051de <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513e:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <xTaskPriorityInherit+0xc4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d241      	bcs.n	80051cc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	db06      	blt.n	800515e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005150:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <xTaskPriorityInherit+0xc4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6959      	ldr	r1, [r3, #20]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <xTaskPriorityInherit+0xc8>)
 8005170:	4413      	add	r3, r2
 8005172:	4299      	cmp	r1, r3
 8005174:	d122      	bne.n	80051bc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	3304      	adds	r3, #4
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe f922 	bl	80033c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005180:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <xTaskPriorityInherit+0xc4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <xTaskPriorityInherit+0xcc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d903      	bls.n	800519e <xTaskPriorityInherit+0x7a>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <xTaskPriorityInherit+0xcc>)
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4a10      	ldr	r2, [pc, #64]	; (80051ec <xTaskPriorityInherit+0xc8>)
 80051ac:	441a      	add	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fe f8a8 	bl	800330a <vListInsertEnd>
 80051ba:	e004      	b.n	80051c6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <xTaskPriorityInherit+0xc4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e008      	b.n	80051de <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d0:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <xTaskPriorityInherit+0xc4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d201      	bcs.n	80051de <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051da:	2301      	movs	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051de:	68fb      	ldr	r3, [r7, #12]
	}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000838 	.word	0x20000838
 80051ec:	2000083c 	.word	0x2000083c
 80051f0:	20000d14 	.word	0x20000d14

080051f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d056      	beq.n	80052b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800520a:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <xTaskPriorityDisinherit+0xd0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	429a      	cmp	r2, r3
 8005212:	d00a      	beq.n	800522a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	60fb      	str	r3, [r7, #12]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60bb      	str	r3, [r7, #8]
}
 8005244:	bf00      	nop
 8005246:	e7fe      	b.n	8005246 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524c:	1e5a      	subs	r2, r3, #1
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525a:	429a      	cmp	r2, r3
 800525c:	d02c      	beq.n	80052b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d128      	bne.n	80052b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	3304      	adds	r3, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe f8aa 	bl	80033c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <xTaskPriorityDisinherit+0xd4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d903      	bls.n	8005298 <xTaskPriorityDisinherit+0xa4>
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <xTaskPriorityDisinherit+0xd4>)
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4a09      	ldr	r2, [pc, #36]	; (80052cc <xTaskPriorityDisinherit+0xd8>)
 80052a6:	441a      	add	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f7fe f82b 	bl	800330a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052b8:	697b      	ldr	r3, [r7, #20]
	}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000838 	.word	0x20000838
 80052c8:	20000d14 	.word	0x20000d14
 80052cc:	2000083c 	.word	0x2000083c

080052d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052de:	2301      	movs	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d06a      	beq.n	80053be <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d902      	bls.n	8005316 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	e002      	b.n	800531c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	429a      	cmp	r2, r3
 8005324:	d04b      	beq.n	80053be <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	429a      	cmp	r2, r3
 800532e:	d146      	bne.n	80053be <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005330:	4b25      	ldr	r3, [pc, #148]	; (80053c8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	429a      	cmp	r2, r3
 8005338:	d10a      	bne.n	8005350 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	60bb      	str	r3, [r7, #8]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	db04      	blt.n	800536e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6959      	ldr	r1, [r3, #20]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4a13      	ldr	r2, [pc, #76]	; (80053cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800537e:	4413      	add	r3, r2
 8005380:	4299      	cmp	r1, r3
 8005382:	d11c      	bne.n	80053be <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	3304      	adds	r3, #4
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe f81b 	bl	80033c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d903      	bls.n	80053a2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4a07      	ldr	r2, [pc, #28]	; (80053cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80053b0:	441a      	add	r2, r3
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7fd ffa6 	bl	800330a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053be:	bf00      	nop
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000838 	.word	0x20000838
 80053cc:	2000083c 	.word	0x2000083c
 80053d0:	20000d14 	.word	0x20000d14

080053d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053e6:	3201      	adds	r2, #1
 80053e8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80053ea:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80053ec:	681b      	ldr	r3, [r3, #0]
	}
 80053ee:	4618      	mov	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	20000838 	.word	0x20000838

080053fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <prvAddCurrentTaskToDelayedList+0x90>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800540c:	4b20      	ldr	r3, [pc, #128]	; (8005490 <prvAddCurrentTaskToDelayedList+0x94>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3304      	adds	r3, #4
 8005412:	4618      	mov	r0, r3
 8005414:	f7fd ffd6 	bl	80033c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d10a      	bne.n	8005436 <prvAddCurrentTaskToDelayedList+0x3a>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005426:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <prvAddCurrentTaskToDelayedList+0x94>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4819      	ldr	r0, [pc, #100]	; (8005494 <prvAddCurrentTaskToDelayedList+0x98>)
 8005430:	f7fd ff6b 	bl	800330a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005434:	e026      	b.n	8005484 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800543e:	4b14      	ldr	r3, [pc, #80]	; (8005490 <prvAddCurrentTaskToDelayedList+0x94>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	429a      	cmp	r2, r3
 800544c:	d209      	bcs.n	8005462 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <prvAddCurrentTaskToDelayedList+0x94>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f7fd ff79 	bl	8003352 <vListInsert>
}
 8005460:	e010      	b.n	8005484 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005462:	4b0e      	ldr	r3, [pc, #56]	; (800549c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <prvAddCurrentTaskToDelayedList+0x94>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fd ff6f 	bl	8003352 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005474:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d202      	bcs.n	8005484 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800547e:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	6013      	str	r3, [r2, #0]
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000d10 	.word	0x20000d10
 8005490:	20000838 	.word	0x20000838
 8005494:	20000cf8 	.word	0x20000cf8
 8005498:	20000cc8 	.word	0x20000cc8
 800549c:	20000cc4 	.word	0x20000cc4
 80054a0:	20000d2c 	.word	0x20000d2c

080054a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	; 0x28
 80054a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054ae:	f000 fba1 	bl	8005bf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054b2:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <xTimerCreateTimerTask+0x80>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d021      	beq.n	80054fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054c2:	1d3a      	adds	r2, r7, #4
 80054c4:	f107 0108 	add.w	r1, r7, #8
 80054c8:	f107 030c 	add.w	r3, r7, #12
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fd fed5 	bl	800327c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	9202      	str	r2, [sp, #8]
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	2302      	movs	r3, #2
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	2300      	movs	r3, #0
 80054e2:	460a      	mov	r2, r1
 80054e4:	4910      	ldr	r1, [pc, #64]	; (8005528 <xTimerCreateTimerTask+0x84>)
 80054e6:	4811      	ldr	r0, [pc, #68]	; (800552c <xTimerCreateTimerTask+0x88>)
 80054e8:	f7fe ffe0 	bl	80044ac <xTaskCreateStatic>
 80054ec:	4603      	mov	r3, r0
 80054ee:	4a10      	ldr	r2, [pc, #64]	; (8005530 <xTimerCreateTimerTask+0x8c>)
 80054f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <xTimerCreateTimerTask+0x8c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054fa:	2301      	movs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	613b      	str	r3, [r7, #16]
}
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800551a:	697b      	ldr	r3, [r7, #20]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20000d68 	.word	0x20000d68
 8005528:	08006f14 	.word	0x08006f14
 800552c:	0800579d 	.word	0x0800579d
 8005530:	20000d6c 	.word	0x20000d6c

08005534 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005542:	202c      	movs	r0, #44	; 0x2c
 8005544:	f000 fe08 	bl	8006158 <pvPortMalloc>
 8005548:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00d      	beq.n	800556c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f843 	bl	80055f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800556c:	697b      	ldr	r3, [r7, #20]
	}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005576:	b580      	push	{r7, lr}
 8005578:	b08a      	sub	sp, #40	; 0x28
 800557a:	af02      	add	r7, sp, #8
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005584:	232c      	movs	r3, #44	; 0x2c
 8005586:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b2c      	cmp	r3, #44	; 0x2c
 800558c:	d00a      	beq.n	80055a4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61bb      	str	r3, [r7, #24]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xTimerCreateStatic+0x4c>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	617b      	str	r3, [r7, #20]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00d      	beq.n	80055e8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f805 	bl	80055f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80055e8:	69fb      	ldr	r3, [r7, #28]
	}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b086      	sub	sp, #24
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	617b      	str	r3, [r7, #20]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01e      	beq.n	8005660 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005622:	f000 fae7 	bl	8005bf4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	6a3a      	ldr	r2, [r7, #32]
 800563c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	3304      	adds	r3, #4
 8005642:	4618      	mov	r0, r3
 8005644:	f7fd fe54 	bl	80032f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005654:	f043 0304 	orr.w	r3, r3, #4
 8005658:	b2da      	uxtb	r2, r3
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005660:	bf00      	nop
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005676:	2300      	movs	r3, #0
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	623b      	str	r3, [r7, #32]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005696:	4b1a      	ldr	r3, [pc, #104]	; (8005700 <xTimerGenericCommand+0x98>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d02a      	beq.n	80056f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b05      	cmp	r3, #5
 80056ae:	dc18      	bgt.n	80056e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056b0:	f7ff fd1a 	bl	80050e8 <xTaskGetSchedulerState>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d109      	bne.n	80056ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <xTimerGenericCommand+0x98>)
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f107 0110 	add.w	r1, r7, #16
 80056c2:	2300      	movs	r3, #0
 80056c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c6:	f7fe f84f 	bl	8003768 <xQueueGenericSend>
 80056ca:	6278      	str	r0, [r7, #36]	; 0x24
 80056cc:	e012      	b.n	80056f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <xTimerGenericCommand+0x98>)
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	f107 0110 	add.w	r1, r7, #16
 80056d6:	2300      	movs	r3, #0
 80056d8:	2200      	movs	r2, #0
 80056da:	f7fe f845 	bl	8003768 <xQueueGenericSend>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24
 80056e0:	e008      	b.n	80056f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80056e2:	4b07      	ldr	r3, [pc, #28]	; (8005700 <xTimerGenericCommand+0x98>)
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	f107 0110 	add.w	r1, r7, #16
 80056ea:	2300      	movs	r3, #0
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	f7fe f939 	bl	8003964 <xQueueGenericSendFromISR>
 80056f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3728      	adds	r7, #40	; 0x28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000d68 	.word	0x20000d68

08005704 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800570e:	4b22      	ldr	r3, [pc, #136]	; (8005798 <prvProcessExpiredTimer+0x94>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	3304      	adds	r3, #4
 800571c:	4618      	mov	r0, r3
 800571e:	f7fd fe51 	bl	80033c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d022      	beq.n	8005776 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	18d1      	adds	r1, r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	6978      	ldr	r0, [r7, #20]
 800573e:	f000 f8d1 	bl	80058e4 <prvInsertTimerInActiveList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01f      	beq.n	8005788 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005748:	2300      	movs	r3, #0
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	2300      	movs	r3, #0
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	2100      	movs	r1, #0
 8005752:	6978      	ldr	r0, [r7, #20]
 8005754:	f7ff ff88 	bl	8005668 <xTimerGenericCommand>
 8005758:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d113      	bne.n	8005788 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	60fb      	str	r3, [r7, #12]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800577c:	f023 0301 	bic.w	r3, r3, #1
 8005780:	b2da      	uxtb	r2, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	6978      	ldr	r0, [r7, #20]
 800578e:	4798      	blx	r3
}
 8005790:	bf00      	nop
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000d60 	.word	0x20000d60

0800579c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 f857 	bl	800585c <prvGetNextExpireTime>
 80057ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4619      	mov	r1, r3
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f803 	bl	80057c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057ba:	f000 f8d5 	bl	8005968 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057be:	e7f1      	b.n	80057a4 <prvTimerTask+0x8>

080057c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80057ca:	f7ff f8ab 	bl	8004924 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057ce:	f107 0308 	add.w	r3, r7, #8
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f866 	bl	80058a4 <prvSampleTimeNow>
 80057d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d130      	bne.n	8005842 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <prvProcessTimerOrBlockTask+0x3c>
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d806      	bhi.n	80057fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80057ee:	f7ff f8a7 	bl	8004940 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff85 	bl	8005704 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80057fa:	e024      	b.n	8005846 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <prvProcessTimerOrBlockTask+0x90>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <prvProcessTimerOrBlockTask+0x50>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <prvProcessTimerOrBlockTask+0x52>
 8005810:	2300      	movs	r3, #0
 8005812:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <prvProcessTimerOrBlockTask+0x94>)
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	4619      	mov	r1, r3
 8005822:	f7fe fe0f 	bl	8004444 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005826:	f7ff f88b 	bl	8004940 <xTaskResumeAll>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005830:	4b09      	ldr	r3, [pc, #36]	; (8005858 <prvProcessTimerOrBlockTask+0x98>)
 8005832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
}
 8005840:	e001      	b.n	8005846 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005842:	f7ff f87d 	bl	8004940 <xTaskResumeAll>
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000d64 	.word	0x20000d64
 8005854:	20000d68 	.word	0x20000d68
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005864:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <prvGetNextExpireTime+0x44>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <prvGetNextExpireTime+0x16>
 800586e:	2201      	movs	r2, #1
 8005870:	e000      	b.n	8005874 <prvGetNextExpireTime+0x18>
 8005872:	2200      	movs	r2, #0
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005880:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <prvGetNextExpireTime+0x44>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e001      	b.n	8005890 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005890:	68fb      	ldr	r3, [r7, #12]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000d60 	.word	0x20000d60

080058a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80058ac:	f7ff f8e6 	bl	8004a7c <xTaskGetTickCount>
 80058b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058b2:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <prvSampleTimeNow+0x3c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d205      	bcs.n	80058c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058bc:	f000 f936 	bl	8005b2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e002      	b.n	80058ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80058ce:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <prvSampleTimeNow+0x3c>)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80058d4:	68fb      	ldr	r3, [r7, #12]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000d70 	.word	0x20000d70

080058e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d812      	bhi.n	8005930 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	1ad2      	subs	r2, r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	429a      	cmp	r2, r3
 8005916:	d302      	bcc.n	800591e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e01b      	b.n	8005956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <prvInsertTimerInActiveList+0x7c>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3304      	adds	r3, #4
 8005926:	4619      	mov	r1, r3
 8005928:	4610      	mov	r0, r2
 800592a:	f7fd fd12 	bl	8003352 <vListInsert>
 800592e:	e012      	b.n	8005956 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d206      	bcs.n	8005946 <prvInsertTimerInActiveList+0x62>
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d302      	bcc.n	8005946 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005940:	2301      	movs	r3, #1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e007      	b.n	8005956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <prvInsertTimerInActiveList+0x80>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3304      	adds	r3, #4
 800594e:	4619      	mov	r1, r3
 8005950:	4610      	mov	r0, r2
 8005952:	f7fd fcfe 	bl	8003352 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005956:	697b      	ldr	r3, [r7, #20]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20000d64 	.word	0x20000d64
 8005964:	20000d60 	.word	0x20000d60

08005968 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08e      	sub	sp, #56	; 0x38
 800596c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800596e:	e0ca      	b.n	8005b06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	da18      	bge.n	80059a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005976:	1d3b      	adds	r3, r7, #4
 8005978:	3304      	adds	r3, #4
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	61fb      	str	r3, [r7, #28]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800599e:	6850      	ldr	r0, [r2, #4]
 80059a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a2:	6892      	ldr	r2, [r2, #8]
 80059a4:	4611      	mov	r1, r2
 80059a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f2c0 80aa 	blt.w	8005b04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	3304      	adds	r3, #4
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fd fcff 	bl	80033c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059c6:	463b      	mov	r3, r7
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff ff6b 	bl	80058a4 <prvSampleTimeNow>
 80059ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b09      	cmp	r3, #9
 80059d4:	f200 8097 	bhi.w	8005b06 <prvProcessReceivedCommands+0x19e>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <prvProcessReceivedCommands+0x78>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a09 	.word	0x08005a09
 80059ec:	08005a7d 	.word	0x08005a7d
 80059f0:	08005a91 	.word	0x08005a91
 80059f4:	08005adb 	.word	0x08005adb
 80059f8:	08005a09 	.word	0x08005a09
 80059fc:	08005a09 	.word	0x08005a09
 8005a00:	08005a7d 	.word	0x08005a7d
 8005a04:	08005a91 	.word	0x08005a91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	18d1      	adds	r1, r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a28:	f7ff ff5c 	bl	80058e4 <prvInsertTimerInActiveList>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d069      	beq.n	8005b06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d05e      	beq.n	8005b06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	441a      	add	r2, r3
 8005a50:	2300      	movs	r3, #0
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	2300      	movs	r3, #0
 8005a56:	2100      	movs	r1, #0
 8005a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a5a:	f7ff fe05 	bl	8005668 <xTimerGenericCommand>
 8005a5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d14f      	bne.n	8005b06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	61bb      	str	r3, [r7, #24]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a82:	f023 0301 	bic.w	r3, r3, #1
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005a8e:	e03a      	b.n	8005b06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10a      	bne.n	8005ac6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	617b      	str	r3, [r7, #20]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	18d1      	adds	r1, r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad4:	f7ff ff06 	bl	80058e4 <prvInsertTimerInActiveList>
					break;
 8005ad8:	e015      	b.n	8005b06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aea:	f000 fc01 	bl	80062f0 <vPortFree>
 8005aee:	e00a      	b.n	8005b06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b02:	e000      	b.n	8005b06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005b04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b06:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <prvProcessReceivedCommands+0x1c0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	1d39      	adds	r1, r7, #4
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe f850 	bl	8003bb4 <xQueueReceive>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f47f af2a 	bne.w	8005970 <prvProcessReceivedCommands+0x8>
	}
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	3730      	adds	r7, #48	; 0x30
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000d68 	.word	0x20000d68

08005b2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b32:	e048      	b.n	8005bc6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b34:	4b2d      	ldr	r3, [pc, #180]	; (8005bec <prvSwitchTimerLists+0xc0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3e:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <prvSwitchTimerLists+0xc0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fd fc39 	bl	80033c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d02e      	beq.n	8005bc6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4413      	add	r3, r2
 8005b70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d90e      	bls.n	8005b98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b86:	4b19      	ldr	r3, [pc, #100]	; (8005bec <prvSwitchTimerLists+0xc0>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4610      	mov	r0, r2
 8005b92:	f7fd fbde 	bl	8003352 <vListInsert>
 8005b96:	e016      	b.n	8005bc6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff fd60 	bl	8005668 <xTimerGenericCommand>
 8005ba8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	603b      	str	r3, [r7, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bc6:	4b09      	ldr	r3, [pc, #36]	; (8005bec <prvSwitchTimerLists+0xc0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1b1      	bne.n	8005b34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <prvSwitchTimerLists+0xc0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <prvSwitchTimerLists+0xc4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a04      	ldr	r2, [pc, #16]	; (8005bec <prvSwitchTimerLists+0xc0>)
 8005bdc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005bde:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <prvSwitchTimerLists+0xc4>)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	6013      	str	r3, [r2, #0]
}
 8005be4:	bf00      	nop
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000d60 	.word	0x20000d60
 8005bf0:	20000d64 	.word	0x20000d64

08005bf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005bfa:	f000 f98b 	bl	8005f14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <prvCheckForValidListAndQueue+0x60>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d120      	bne.n	8005c48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c06:	4814      	ldr	r0, [pc, #80]	; (8005c58 <prvCheckForValidListAndQueue+0x64>)
 8005c08:	f7fd fb52 	bl	80032b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c0c:	4813      	ldr	r0, [pc, #76]	; (8005c5c <prvCheckForValidListAndQueue+0x68>)
 8005c0e:	f7fd fb4f 	bl	80032b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c12:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <prvCheckForValidListAndQueue+0x6c>)
 8005c14:	4a10      	ldr	r2, [pc, #64]	; (8005c58 <prvCheckForValidListAndQueue+0x64>)
 8005c16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c18:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <prvCheckForValidListAndQueue+0x70>)
 8005c1a:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <prvCheckForValidListAndQueue+0x68>)
 8005c1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	4b11      	ldr	r3, [pc, #68]	; (8005c68 <prvCheckForValidListAndQueue+0x74>)
 8005c24:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <prvCheckForValidListAndQueue+0x78>)
 8005c26:	2110      	movs	r1, #16
 8005c28:	200a      	movs	r0, #10
 8005c2a:	f7fd fc5d 	bl	80034e8 <xQueueGenericCreateStatic>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <prvCheckForValidListAndQueue+0x60>)
 8005c32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c34:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <prvCheckForValidListAndQueue+0x60>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c3c:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <prvCheckForValidListAndQueue+0x60>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	490b      	ldr	r1, [pc, #44]	; (8005c70 <prvCheckForValidListAndQueue+0x7c>)
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fbaa 	bl	800439c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c48:	f000 f994 	bl	8005f74 <vPortExitCritical>
}
 8005c4c:	bf00      	nop
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000d68 	.word	0x20000d68
 8005c58:	20000d38 	.word	0x20000d38
 8005c5c:	20000d4c 	.word	0x20000d4c
 8005c60:	20000d60 	.word	0x20000d60
 8005c64:	20000d64 	.word	0x20000d64
 8005c68:	20000e14 	.word	0x20000e14
 8005c6c:	20000d74 	.word	0x20000d74
 8005c70:	08006f1c 	.word	0x08006f1c

08005c74 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <pvTimerGetTimerID+0x28>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	60fb      	str	r3, [r7, #12]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8005c9c:	f000 f93a 	bl	8005f14 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005ca6:	f000 f965 	bl	8005f74 <vPortExitCritical>

	return pvReturn;
 8005caa:	693b      	ldr	r3, [r7, #16]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3b04      	subs	r3, #4
 8005cc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3b04      	subs	r3, #4
 8005cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f023 0201 	bic.w	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3b04      	subs	r3, #4
 8005ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ce4:	4a0c      	ldr	r2, [pc, #48]	; (8005d18 <pxPortInitialiseStack+0x64>)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3b14      	subs	r3, #20
 8005cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3b04      	subs	r3, #4
 8005cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f06f 0202 	mvn.w	r2, #2
 8005d02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3b20      	subs	r3, #32
 8005d08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	08005d1d 	.word	0x08005d1d

08005d1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <prvTaskExitError+0x54>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d00a      	beq.n	8005d46 <prvTaskExitError+0x2a>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	60fb      	str	r3, [r7, #12]
}
 8005d42:	bf00      	nop
 8005d44:	e7fe      	b.n	8005d44 <prvTaskExitError+0x28>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60bb      	str	r3, [r7, #8]
}
 8005d58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d5a:	bf00      	nop
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0fc      	beq.n	8005d5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	2000000c 	.word	0x2000000c
	...

08005d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <pxCurrentTCBConst2>)
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	6808      	ldr	r0, [r1, #0]
 8005d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8a:	f380 8809 	msr	PSP, r0
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8811 	msr	BASEPRI, r0
 8005d9a:	4770      	bx	lr
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst2>:
 8005da0:	20000838 	.word	0x20000838
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005da8:	4808      	ldr	r0, [pc, #32]	; (8005dcc <prvPortStartFirstTask+0x24>)
 8005daa:	6800      	ldr	r0, [r0, #0]
 8005dac:	6800      	ldr	r0, [r0, #0]
 8005dae:	f380 8808 	msr	MSP, r0
 8005db2:	f04f 0000 	mov.w	r0, #0
 8005db6:	f380 8814 	msr	CONTROL, r0
 8005dba:	b662      	cpsie	i
 8005dbc:	b661      	cpsie	f
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	df00      	svc	0
 8005dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dca:	bf00      	nop
 8005dcc:	e000ed08 	.word	0xe000ed08

08005dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005dd6:	4b46      	ldr	r3, [pc, #280]	; (8005ef0 <xPortStartScheduler+0x120>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a46      	ldr	r2, [pc, #280]	; (8005ef4 <xPortStartScheduler+0x124>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10a      	bne.n	8005df6 <xPortStartScheduler+0x26>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	613b      	str	r3, [r7, #16]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005df6:	4b3e      	ldr	r3, [pc, #248]	; (8005ef0 <xPortStartScheduler+0x120>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a3f      	ldr	r2, [pc, #252]	; (8005ef8 <xPortStartScheduler+0x128>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d10a      	bne.n	8005e16 <xPortStartScheduler+0x46>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e16:	4b39      	ldr	r3, [pc, #228]	; (8005efc <xPortStartScheduler+0x12c>)
 8005e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4b31      	ldr	r3, [pc, #196]	; (8005f00 <xPortStartScheduler+0x130>)
 8005e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e3e:	4b31      	ldr	r3, [pc, #196]	; (8005f04 <xPortStartScheduler+0x134>)
 8005e40:	2207      	movs	r2, #7
 8005e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e44:	e009      	b.n	8005e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e46:	4b2f      	ldr	r3, [pc, #188]	; (8005f04 <xPortStartScheduler+0x134>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	4a2d      	ldr	r2, [pc, #180]	; (8005f04 <xPortStartScheduler+0x134>)
 8005e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b80      	cmp	r3, #128	; 0x80
 8005e64:	d0ef      	beq.n	8005e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e66:	4b27      	ldr	r3, [pc, #156]	; (8005f04 <xPortStartScheduler+0x134>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1c3 0307 	rsb	r3, r3, #7
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d00a      	beq.n	8005e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60bb      	str	r3, [r7, #8]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e88:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <xPortStartScheduler+0x134>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <xPortStartScheduler+0x134>)
 8005e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e92:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <xPortStartScheduler+0x134>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e9a:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <xPortStartScheduler+0x134>)
 8005e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <xPortStartScheduler+0x138>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <xPortStartScheduler+0x138>)
 8005eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <xPortStartScheduler+0x138>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <xPortStartScheduler+0x138>)
 8005eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ebe:	f000 f8dd 	bl	800607c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <xPortStartScheduler+0x13c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ec8:	f000 f8fc 	bl	80060c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <xPortStartScheduler+0x140>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0f      	ldr	r2, [pc, #60]	; (8005f10 <xPortStartScheduler+0x140>)
 8005ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ed8:	f7ff ff66 	bl	8005da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005edc:	f7fe fe98 	bl	8004c10 <vTaskSwitchContext>
	prvTaskExitError();
 8005ee0:	f7ff ff1c 	bl	8005d1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	e000ed00 	.word	0xe000ed00
 8005ef4:	410fc271 	.word	0x410fc271
 8005ef8:	410fc270 	.word	0x410fc270
 8005efc:	e000e400 	.word	0xe000e400
 8005f00:	20000e64 	.word	0x20000e64
 8005f04:	20000e68 	.word	0x20000e68
 8005f08:	e000ed20 	.word	0xe000ed20
 8005f0c:	2000000c 	.word	0x2000000c
 8005f10:	e000ef34 	.word	0xe000ef34

08005f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	607b      	str	r3, [r7, #4]
}
 8005f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <vPortEnterCritical+0x58>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	4a0d      	ldr	r2, [pc, #52]	; (8005f6c <vPortEnterCritical+0x58>)
 8005f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <vPortEnterCritical+0x58>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d10f      	bne.n	8005f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <vPortEnterCritical+0x5c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	603b      	str	r3, [r7, #0]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <vPortEnterCritical+0x4a>
	}
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	2000000c 	.word	0x2000000c
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f7a:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <vPortExitCritical+0x50>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <vPortExitCritical+0x24>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	607b      	str	r3, [r7, #4]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <vPortExitCritical+0x50>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <vPortExitCritical+0x50>)
 8005fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fa2:	4b08      	ldr	r3, [pc, #32]	; (8005fc4 <vPortExitCritical+0x50>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <vPortExitCritical+0x42>
 8005faa:	2300      	movs	r3, #0
 8005fac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	f383 8811 	msr	BASEPRI, r3
}
 8005fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	2000000c 	.word	0x2000000c
	...

08005fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fd0:	f3ef 8009 	mrs	r0, PSP
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	4b15      	ldr	r3, [pc, #84]	; (8006030 <pxCurrentTCBConst>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	f01e 0f10 	tst.w	lr, #16
 8005fe0:	bf08      	it	eq
 8005fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fea:	6010      	str	r0, [r2, #0]
 8005fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ff4:	f380 8811 	msr	BASEPRI, r0
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f7fe fe06 	bl	8004c10 <vTaskSwitchContext>
 8006004:	f04f 0000 	mov.w	r0, #0
 8006008:	f380 8811 	msr	BASEPRI, r0
 800600c:	bc09      	pop	{r0, r3}
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	6808      	ldr	r0, [r1, #0]
 8006012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006016:	f01e 0f10 	tst.w	lr, #16
 800601a:	bf08      	it	eq
 800601c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006020:	f380 8809 	msr	PSP, r0
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	f3af 8000 	nop.w

08006030 <pxCurrentTCBConst>:
 8006030:	20000838 	.word	0x20000838
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	607b      	str	r3, [r7, #4]
}
 8006050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006052:	f7fe fd23 	bl	8004a9c <xTaskIncrementTick>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <xPortSysTickHandler+0x40>)
 800605e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f383 8811 	msr	BASEPRI, r3
}
 800606e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <vPortSetupTimerInterrupt+0x34>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <vPortSetupTimerInterrupt+0x38>)
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <vPortSetupTimerInterrupt+0x3c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <vPortSetupTimerInterrupt+0x40>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	099b      	lsrs	r3, r3, #6
 8006098:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <vPortSetupTimerInterrupt+0x44>)
 800609a:	3b01      	subs	r3, #1
 800609c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800609e:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <vPortSetupTimerInterrupt+0x34>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	e000e010 	.word	0xe000e010
 80060b4:	e000e018 	.word	0xe000e018
 80060b8:	20000000 	.word	0x20000000
 80060bc:	10624dd3 	.word	0x10624dd3
 80060c0:	e000e014 	.word	0xe000e014

080060c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060d4 <vPortEnableVFP+0x10>
 80060c8:	6801      	ldr	r1, [r0, #0]
 80060ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060ce:	6001      	str	r1, [r0, #0]
 80060d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060d2:	bf00      	nop
 80060d4:	e000ed88 	.word	0xe000ed88

080060d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060de:	f3ef 8305 	mrs	r3, IPSR
 80060e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b0f      	cmp	r3, #15
 80060e8:	d914      	bls.n	8006114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060ea:	4a17      	ldr	r2, [pc, #92]	; (8006148 <vPortValidateInterruptPriority+0x70>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060f4:	4b15      	ldr	r3, [pc, #84]	; (800614c <vPortValidateInterruptPriority+0x74>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	7afa      	ldrb	r2, [r7, #11]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d20a      	bcs.n	8006114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	607b      	str	r3, [r7, #4]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <vPortValidateInterruptPriority+0x78>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800611c:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <vPortValidateInterruptPriority+0x7c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	429a      	cmp	r2, r3
 8006122:	d90a      	bls.n	800613a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	603b      	str	r3, [r7, #0]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <vPortValidateInterruptPriority+0x60>
	}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	e000e3f0 	.word	0xe000e3f0
 800614c:	20000e64 	.word	0x20000e64
 8006150:	e000ed0c 	.word	0xe000ed0c
 8006154:	20000e68 	.word	0x20000e68

08006158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006164:	f7fe fbde 	bl	8004924 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006168:	4b5b      	ldr	r3, [pc, #364]	; (80062d8 <pvPortMalloc+0x180>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006170:	f000 f920 	bl	80063b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006174:	4b59      	ldr	r3, [pc, #356]	; (80062dc <pvPortMalloc+0x184>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	f040 8093 	bne.w	80062a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01d      	beq.n	80061c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006188:	2208      	movs	r2, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	2b00      	cmp	r3, #0
 8006198:	d014      	beq.n	80061c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f023 0307 	bic.w	r3, r3, #7
 80061a0:	3308      	adds	r3, #8
 80061a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <pvPortMalloc+0x6c>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	617b      	str	r3, [r7, #20]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d06e      	beq.n	80062a8 <pvPortMalloc+0x150>
 80061ca:	4b45      	ldr	r3, [pc, #276]	; (80062e0 <pvPortMalloc+0x188>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d869      	bhi.n	80062a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061d4:	4b43      	ldr	r3, [pc, #268]	; (80062e4 <pvPortMalloc+0x18c>)
 80061d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061d8:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <pvPortMalloc+0x18c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061de:	e004      	b.n	80061ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d903      	bls.n	80061fc <pvPortMalloc+0xa4>
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f1      	bne.n	80061e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061fc:	4b36      	ldr	r3, [pc, #216]	; (80062d8 <pvPortMalloc+0x180>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006202:	429a      	cmp	r2, r3
 8006204:	d050      	beq.n	80062a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2208      	movs	r2, #8
 800620c:	4413      	add	r3, r2
 800620e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1ad2      	subs	r2, r2, r3
 8006220:	2308      	movs	r3, #8
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	429a      	cmp	r2, r3
 8006226:	d91f      	bls.n	8006268 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <pvPortMalloc+0xf8>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	613b      	str	r3, [r7, #16]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	1ad2      	subs	r2, r2, r3
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006262:	69b8      	ldr	r0, [r7, #24]
 8006264:	f000 f908 	bl	8006478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <pvPortMalloc+0x188>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <pvPortMalloc+0x188>)
 8006274:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006276:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <pvPortMalloc+0x188>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <pvPortMalloc+0x190>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d203      	bcs.n	800628a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006282:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <pvPortMalloc+0x188>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a18      	ldr	r2, [pc, #96]	; (80062e8 <pvPortMalloc+0x190>)
 8006288:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	4b13      	ldr	r3, [pc, #76]	; (80062dc <pvPortMalloc+0x184>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	431a      	orrs	r2, r3
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <pvPortMalloc+0x194>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	4a11      	ldr	r2, [pc, #68]	; (80062ec <pvPortMalloc+0x194>)
 80062a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062a8:	f7fe fb4a 	bl	8004940 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <pvPortMalloc+0x174>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	60fb      	str	r3, [r7, #12]
}
 80062c8:	bf00      	nop
 80062ca:	e7fe      	b.n	80062ca <pvPortMalloc+0x172>
	return pvReturn;
 80062cc:	69fb      	ldr	r3, [r7, #28]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3728      	adds	r7, #40	; 0x28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20004a74 	.word	0x20004a74
 80062dc:	20004a88 	.word	0x20004a88
 80062e0:	20004a78 	.word	0x20004a78
 80062e4:	20004a6c 	.word	0x20004a6c
 80062e8:	20004a7c 	.word	0x20004a7c
 80062ec:	20004a80 	.word	0x20004a80

080062f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d04d      	beq.n	800639e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006302:	2308      	movs	r3, #8
 8006304:	425b      	negs	r3, r3
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4413      	add	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <vPortFree+0xb8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4013      	ands	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <vPortFree+0x44>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60fb      	str	r3, [r7, #12]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <vPortFree+0x62>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	60bb      	str	r3, [r7, #8]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <vPortFree+0xb8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01e      	beq.n	800639e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d11a      	bne.n	800639e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <vPortFree+0xb8>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	43db      	mvns	r3, r3
 8006372:	401a      	ands	r2, r3
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006378:	f7fe fad4 	bl	8004924 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <vPortFree+0xbc>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4413      	add	r3, r2
 8006386:	4a09      	ldr	r2, [pc, #36]	; (80063ac <vPortFree+0xbc>)
 8006388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800638a:	6938      	ldr	r0, [r7, #16]
 800638c:	f000 f874 	bl	8006478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <vPortFree+0xc0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	4a06      	ldr	r2, [pc, #24]	; (80063b0 <vPortFree+0xc0>)
 8006398:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800639a:	f7fe fad1 	bl	8004940 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800639e:	bf00      	nop
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20004a88 	.word	0x20004a88
 80063ac:	20004a78 	.word	0x20004a78
 80063b0:	20004a84 	.word	0x20004a84

080063b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80063be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063c0:	4b27      	ldr	r3, [pc, #156]	; (8006460 <prvHeapInit+0xac>)
 80063c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00c      	beq.n	80063e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3307      	adds	r3, #7
 80063d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <prvHeapInit+0xac>)
 80063e4:	4413      	add	r3, r2
 80063e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063ec:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <prvHeapInit+0xb0>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80063f2:	4b1c      	ldr	r3, [pc, #112]	; (8006464 <prvHeapInit+0xb0>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006400:	2208      	movs	r2, #8
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0307 	bic.w	r3, r3, #7
 800640e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4a15      	ldr	r2, [pc, #84]	; (8006468 <prvHeapInit+0xb4>)
 8006414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006416:	4b14      	ldr	r3, [pc, #80]	; (8006468 <prvHeapInit+0xb4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <prvHeapInit+0xb4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006434:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <prvHeapInit+0xb4>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4a0a      	ldr	r2, [pc, #40]	; (800646c <prvHeapInit+0xb8>)
 8006442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4a09      	ldr	r2, [pc, #36]	; (8006470 <prvHeapInit+0xbc>)
 800644a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <prvHeapInit+0xc0>)
 800644e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	20000e6c 	.word	0x20000e6c
 8006464:	20004a6c 	.word	0x20004a6c
 8006468:	20004a74 	.word	0x20004a74
 800646c:	20004a7c 	.word	0x20004a7c
 8006470:	20004a78 	.word	0x20004a78
 8006474:	20004a88 	.word	0x20004a88

08006478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006480:	4b28      	ldr	r3, [pc, #160]	; (8006524 <prvInsertBlockIntoFreeList+0xac>)
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e002      	b.n	800648c <prvInsertBlockIntoFreeList+0x14>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d8f7      	bhi.n	8006486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d108      	bne.n	80064ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	441a      	add	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	441a      	add	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d118      	bne.n	8006500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <prvInsertBlockIntoFreeList+0xb0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d00d      	beq.n	80064f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	441a      	add	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	e008      	b.n	8006508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064f6:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <prvInsertBlockIntoFreeList+0xb0>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e003      	b.n	8006508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	429a      	cmp	r2, r3
 800650e:	d002      	beq.n	8006516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20004a6c 	.word	0x20004a6c
 8006528:	20004a74 	.word	0x20004a74

0800652c <__errno>:
 800652c:	4b01      	ldr	r3, [pc, #4]	; (8006534 <__errno+0x8>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000010 	.word	0x20000010

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4d0d      	ldr	r5, [pc, #52]	; (8006570 <__libc_init_array+0x38>)
 800653c:	4c0d      	ldr	r4, [pc, #52]	; (8006574 <__libc_init_array+0x3c>)
 800653e:	1b64      	subs	r4, r4, r5
 8006540:	10a4      	asrs	r4, r4, #2
 8006542:	2600      	movs	r6, #0
 8006544:	42a6      	cmp	r6, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	4d0b      	ldr	r5, [pc, #44]	; (8006578 <__libc_init_array+0x40>)
 800654a:	4c0c      	ldr	r4, [pc, #48]	; (800657c <__libc_init_array+0x44>)
 800654c:	f000 fc8e 	bl	8006e6c <_init>
 8006550:	1b64      	subs	r4, r4, r5
 8006552:	10a4      	asrs	r4, r4, #2
 8006554:	2600      	movs	r6, #0
 8006556:	42a6      	cmp	r6, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006560:	4798      	blx	r3
 8006562:	3601      	adds	r6, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	f855 3b04 	ldr.w	r3, [r5], #4
 800656a:	4798      	blx	r3
 800656c:	3601      	adds	r6, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	0800701c 	.word	0x0800701c
 8006574:	0800701c 	.word	0x0800701c
 8006578:	0800701c 	.word	0x0800701c
 800657c:	08007020 	.word	0x08007020

08006580 <memcpy>:
 8006580:	440a      	add	r2, r1
 8006582:	4291      	cmp	r1, r2
 8006584:	f100 33ff 	add.w	r3, r0, #4294967295
 8006588:	d100      	bne.n	800658c <memcpy+0xc>
 800658a:	4770      	bx	lr
 800658c:	b510      	push	{r4, lr}
 800658e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006596:	4291      	cmp	r1, r2
 8006598:	d1f9      	bne.n	800658e <memcpy+0xe>
 800659a:	bd10      	pop	{r4, pc}

0800659c <memset>:
 800659c:	4402      	add	r2, r0
 800659e:	4603      	mov	r3, r0
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d100      	bne.n	80065a6 <memset+0xa>
 80065a4:	4770      	bx	lr
 80065a6:	f803 1b01 	strb.w	r1, [r3], #1
 80065aa:	e7f9      	b.n	80065a0 <memset+0x4>

080065ac <siprintf>:
 80065ac:	b40e      	push	{r1, r2, r3}
 80065ae:	b500      	push	{lr}
 80065b0:	b09c      	sub	sp, #112	; 0x70
 80065b2:	ab1d      	add	r3, sp, #116	; 0x74
 80065b4:	9002      	str	r0, [sp, #8]
 80065b6:	9006      	str	r0, [sp, #24]
 80065b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065bc:	4809      	ldr	r0, [pc, #36]	; (80065e4 <siprintf+0x38>)
 80065be:	9107      	str	r1, [sp, #28]
 80065c0:	9104      	str	r1, [sp, #16]
 80065c2:	4909      	ldr	r1, [pc, #36]	; (80065e8 <siprintf+0x3c>)
 80065c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c8:	9105      	str	r1, [sp, #20]
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	a902      	add	r1, sp, #8
 80065d0:	f000 f868 	bl	80066a4 <_svfiprintf_r>
 80065d4:	9b02      	ldr	r3, [sp, #8]
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	b01c      	add	sp, #112	; 0x70
 80065dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065e0:	b003      	add	sp, #12
 80065e2:	4770      	bx	lr
 80065e4:	20000010 	.word	0x20000010
 80065e8:	ffff0208 	.word	0xffff0208

080065ec <__ssputs_r>:
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	688e      	ldr	r6, [r1, #8]
 80065f2:	429e      	cmp	r6, r3
 80065f4:	4682      	mov	sl, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	4690      	mov	r8, r2
 80065fa:	461f      	mov	r7, r3
 80065fc:	d838      	bhi.n	8006670 <__ssputs_r+0x84>
 80065fe:	898a      	ldrh	r2, [r1, #12]
 8006600:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006604:	d032      	beq.n	800666c <__ssputs_r+0x80>
 8006606:	6825      	ldr	r5, [r4, #0]
 8006608:	6909      	ldr	r1, [r1, #16]
 800660a:	eba5 0901 	sub.w	r9, r5, r1
 800660e:	6965      	ldr	r5, [r4, #20]
 8006610:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006618:	3301      	adds	r3, #1
 800661a:	444b      	add	r3, r9
 800661c:	106d      	asrs	r5, r5, #1
 800661e:	429d      	cmp	r5, r3
 8006620:	bf38      	it	cc
 8006622:	461d      	movcc	r5, r3
 8006624:	0553      	lsls	r3, r2, #21
 8006626:	d531      	bpl.n	800668c <__ssputs_r+0xa0>
 8006628:	4629      	mov	r1, r5
 800662a:	f000 fb55 	bl	8006cd8 <_malloc_r>
 800662e:	4606      	mov	r6, r0
 8006630:	b950      	cbnz	r0, 8006648 <__ssputs_r+0x5c>
 8006632:	230c      	movs	r3, #12
 8006634:	f8ca 3000 	str.w	r3, [sl]
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006648:	6921      	ldr	r1, [r4, #16]
 800664a:	464a      	mov	r2, r9
 800664c:	f7ff ff98 	bl	8006580 <memcpy>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665a:	81a3      	strh	r3, [r4, #12]
 800665c:	6126      	str	r6, [r4, #16]
 800665e:	6165      	str	r5, [r4, #20]
 8006660:	444e      	add	r6, r9
 8006662:	eba5 0509 	sub.w	r5, r5, r9
 8006666:	6026      	str	r6, [r4, #0]
 8006668:	60a5      	str	r5, [r4, #8]
 800666a:	463e      	mov	r6, r7
 800666c:	42be      	cmp	r6, r7
 800666e:	d900      	bls.n	8006672 <__ssputs_r+0x86>
 8006670:	463e      	mov	r6, r7
 8006672:	6820      	ldr	r0, [r4, #0]
 8006674:	4632      	mov	r2, r6
 8006676:	4641      	mov	r1, r8
 8006678:	f000 faa8 	bl	8006bcc <memmove>
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	1b9b      	subs	r3, r3, r6
 8006680:	60a3      	str	r3, [r4, #8]
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	4433      	add	r3, r6
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	2000      	movs	r0, #0
 800668a:	e7db      	b.n	8006644 <__ssputs_r+0x58>
 800668c:	462a      	mov	r2, r5
 800668e:	f000 fb97 	bl	8006dc0 <_realloc_r>
 8006692:	4606      	mov	r6, r0
 8006694:	2800      	cmp	r0, #0
 8006696:	d1e1      	bne.n	800665c <__ssputs_r+0x70>
 8006698:	6921      	ldr	r1, [r4, #16]
 800669a:	4650      	mov	r0, sl
 800669c:	f000 fab0 	bl	8006c00 <_free_r>
 80066a0:	e7c7      	b.n	8006632 <__ssputs_r+0x46>
	...

080066a4 <_svfiprintf_r>:
 80066a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a8:	4698      	mov	r8, r3
 80066aa:	898b      	ldrh	r3, [r1, #12]
 80066ac:	061b      	lsls	r3, r3, #24
 80066ae:	b09d      	sub	sp, #116	; 0x74
 80066b0:	4607      	mov	r7, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	4614      	mov	r4, r2
 80066b6:	d50e      	bpl.n	80066d6 <_svfiprintf_r+0x32>
 80066b8:	690b      	ldr	r3, [r1, #16]
 80066ba:	b963      	cbnz	r3, 80066d6 <_svfiprintf_r+0x32>
 80066bc:	2140      	movs	r1, #64	; 0x40
 80066be:	f000 fb0b 	bl	8006cd8 <_malloc_r>
 80066c2:	6028      	str	r0, [r5, #0]
 80066c4:	6128      	str	r0, [r5, #16]
 80066c6:	b920      	cbnz	r0, 80066d2 <_svfiprintf_r+0x2e>
 80066c8:	230c      	movs	r3, #12
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295
 80066d0:	e0d1      	b.n	8006876 <_svfiprintf_r+0x1d2>
 80066d2:	2340      	movs	r3, #64	; 0x40
 80066d4:	616b      	str	r3, [r5, #20]
 80066d6:	2300      	movs	r3, #0
 80066d8:	9309      	str	r3, [sp, #36]	; 0x24
 80066da:	2320      	movs	r3, #32
 80066dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e4:	2330      	movs	r3, #48	; 0x30
 80066e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006890 <_svfiprintf_r+0x1ec>
 80066ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ee:	f04f 0901 	mov.w	r9, #1
 80066f2:	4623      	mov	r3, r4
 80066f4:	469a      	mov	sl, r3
 80066f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066fa:	b10a      	cbz	r2, 8006700 <_svfiprintf_r+0x5c>
 80066fc:	2a25      	cmp	r2, #37	; 0x25
 80066fe:	d1f9      	bne.n	80066f4 <_svfiprintf_r+0x50>
 8006700:	ebba 0b04 	subs.w	fp, sl, r4
 8006704:	d00b      	beq.n	800671e <_svfiprintf_r+0x7a>
 8006706:	465b      	mov	r3, fp
 8006708:	4622      	mov	r2, r4
 800670a:	4629      	mov	r1, r5
 800670c:	4638      	mov	r0, r7
 800670e:	f7ff ff6d 	bl	80065ec <__ssputs_r>
 8006712:	3001      	adds	r0, #1
 8006714:	f000 80aa 	beq.w	800686c <_svfiprintf_r+0x1c8>
 8006718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800671a:	445a      	add	r2, fp
 800671c:	9209      	str	r2, [sp, #36]	; 0x24
 800671e:	f89a 3000 	ldrb.w	r3, [sl]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80a2 	beq.w	800686c <_svfiprintf_r+0x1c8>
 8006728:	2300      	movs	r3, #0
 800672a:	f04f 32ff 	mov.w	r2, #4294967295
 800672e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006732:	f10a 0a01 	add.w	sl, sl, #1
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	9307      	str	r3, [sp, #28]
 800673a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800673e:	931a      	str	r3, [sp, #104]	; 0x68
 8006740:	4654      	mov	r4, sl
 8006742:	2205      	movs	r2, #5
 8006744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006748:	4851      	ldr	r0, [pc, #324]	; (8006890 <_svfiprintf_r+0x1ec>)
 800674a:	f7f9 fd51 	bl	80001f0 <memchr>
 800674e:	9a04      	ldr	r2, [sp, #16]
 8006750:	b9d8      	cbnz	r0, 800678a <_svfiprintf_r+0xe6>
 8006752:	06d0      	lsls	r0, r2, #27
 8006754:	bf44      	itt	mi
 8006756:	2320      	movmi	r3, #32
 8006758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800675c:	0711      	lsls	r1, r2, #28
 800675e:	bf44      	itt	mi
 8006760:	232b      	movmi	r3, #43	; 0x2b
 8006762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006766:	f89a 3000 	ldrb.w	r3, [sl]
 800676a:	2b2a      	cmp	r3, #42	; 0x2a
 800676c:	d015      	beq.n	800679a <_svfiprintf_r+0xf6>
 800676e:	9a07      	ldr	r2, [sp, #28]
 8006770:	4654      	mov	r4, sl
 8006772:	2000      	movs	r0, #0
 8006774:	f04f 0c0a 	mov.w	ip, #10
 8006778:	4621      	mov	r1, r4
 800677a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800677e:	3b30      	subs	r3, #48	; 0x30
 8006780:	2b09      	cmp	r3, #9
 8006782:	d94e      	bls.n	8006822 <_svfiprintf_r+0x17e>
 8006784:	b1b0      	cbz	r0, 80067b4 <_svfiprintf_r+0x110>
 8006786:	9207      	str	r2, [sp, #28]
 8006788:	e014      	b.n	80067b4 <_svfiprintf_r+0x110>
 800678a:	eba0 0308 	sub.w	r3, r0, r8
 800678e:	fa09 f303 	lsl.w	r3, r9, r3
 8006792:	4313      	orrs	r3, r2
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	46a2      	mov	sl, r4
 8006798:	e7d2      	b.n	8006740 <_svfiprintf_r+0x9c>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	1d19      	adds	r1, r3, #4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	9103      	str	r1, [sp, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bfbb      	ittet	lt
 80067a6:	425b      	neglt	r3, r3
 80067a8:	f042 0202 	orrlt.w	r2, r2, #2
 80067ac:	9307      	strge	r3, [sp, #28]
 80067ae:	9307      	strlt	r3, [sp, #28]
 80067b0:	bfb8      	it	lt
 80067b2:	9204      	strlt	r2, [sp, #16]
 80067b4:	7823      	ldrb	r3, [r4, #0]
 80067b6:	2b2e      	cmp	r3, #46	; 0x2e
 80067b8:	d10c      	bne.n	80067d4 <_svfiprintf_r+0x130>
 80067ba:	7863      	ldrb	r3, [r4, #1]
 80067bc:	2b2a      	cmp	r3, #42	; 0x2a
 80067be:	d135      	bne.n	800682c <_svfiprintf_r+0x188>
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	9203      	str	r2, [sp, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bfb8      	it	lt
 80067cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80067d0:	3402      	adds	r4, #2
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80068a0 <_svfiprintf_r+0x1fc>
 80067d8:	7821      	ldrb	r1, [r4, #0]
 80067da:	2203      	movs	r2, #3
 80067dc:	4650      	mov	r0, sl
 80067de:	f7f9 fd07 	bl	80001f0 <memchr>
 80067e2:	b140      	cbz	r0, 80067f6 <_svfiprintf_r+0x152>
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	eba0 000a 	sub.w	r0, r0, sl
 80067ea:	fa03 f000 	lsl.w	r0, r3, r0
 80067ee:	9b04      	ldr	r3, [sp, #16]
 80067f0:	4303      	orrs	r3, r0
 80067f2:	3401      	adds	r4, #1
 80067f4:	9304      	str	r3, [sp, #16]
 80067f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fa:	4826      	ldr	r0, [pc, #152]	; (8006894 <_svfiprintf_r+0x1f0>)
 80067fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006800:	2206      	movs	r2, #6
 8006802:	f7f9 fcf5 	bl	80001f0 <memchr>
 8006806:	2800      	cmp	r0, #0
 8006808:	d038      	beq.n	800687c <_svfiprintf_r+0x1d8>
 800680a:	4b23      	ldr	r3, [pc, #140]	; (8006898 <_svfiprintf_r+0x1f4>)
 800680c:	bb1b      	cbnz	r3, 8006856 <_svfiprintf_r+0x1b2>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	3307      	adds	r3, #7
 8006812:	f023 0307 	bic.w	r3, r3, #7
 8006816:	3308      	adds	r3, #8
 8006818:	9303      	str	r3, [sp, #12]
 800681a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681c:	4433      	add	r3, r6
 800681e:	9309      	str	r3, [sp, #36]	; 0x24
 8006820:	e767      	b.n	80066f2 <_svfiprintf_r+0x4e>
 8006822:	fb0c 3202 	mla	r2, ip, r2, r3
 8006826:	460c      	mov	r4, r1
 8006828:	2001      	movs	r0, #1
 800682a:	e7a5      	b.n	8006778 <_svfiprintf_r+0xd4>
 800682c:	2300      	movs	r3, #0
 800682e:	3401      	adds	r4, #1
 8006830:	9305      	str	r3, [sp, #20]
 8006832:	4619      	mov	r1, r3
 8006834:	f04f 0c0a 	mov.w	ip, #10
 8006838:	4620      	mov	r0, r4
 800683a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800683e:	3a30      	subs	r2, #48	; 0x30
 8006840:	2a09      	cmp	r2, #9
 8006842:	d903      	bls.n	800684c <_svfiprintf_r+0x1a8>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0c5      	beq.n	80067d4 <_svfiprintf_r+0x130>
 8006848:	9105      	str	r1, [sp, #20]
 800684a:	e7c3      	b.n	80067d4 <_svfiprintf_r+0x130>
 800684c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006850:	4604      	mov	r4, r0
 8006852:	2301      	movs	r3, #1
 8006854:	e7f0      	b.n	8006838 <_svfiprintf_r+0x194>
 8006856:	ab03      	add	r3, sp, #12
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	462a      	mov	r2, r5
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <_svfiprintf_r+0x1f8>)
 800685e:	a904      	add	r1, sp, #16
 8006860:	4638      	mov	r0, r7
 8006862:	f3af 8000 	nop.w
 8006866:	1c42      	adds	r2, r0, #1
 8006868:	4606      	mov	r6, r0
 800686a:	d1d6      	bne.n	800681a <_svfiprintf_r+0x176>
 800686c:	89ab      	ldrh	r3, [r5, #12]
 800686e:	065b      	lsls	r3, r3, #25
 8006870:	f53f af2c 	bmi.w	80066cc <_svfiprintf_r+0x28>
 8006874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006876:	b01d      	add	sp, #116	; 0x74
 8006878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687c:	ab03      	add	r3, sp, #12
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	462a      	mov	r2, r5
 8006882:	4b06      	ldr	r3, [pc, #24]	; (800689c <_svfiprintf_r+0x1f8>)
 8006884:	a904      	add	r1, sp, #16
 8006886:	4638      	mov	r0, r7
 8006888:	f000 f87a 	bl	8006980 <_printf_i>
 800688c:	e7eb      	b.n	8006866 <_svfiprintf_r+0x1c2>
 800688e:	bf00      	nop
 8006890:	08006fe0 	.word	0x08006fe0
 8006894:	08006fea 	.word	0x08006fea
 8006898:	00000000 	.word	0x00000000
 800689c:	080065ed 	.word	0x080065ed
 80068a0:	08006fe6 	.word	0x08006fe6

080068a4 <_printf_common>:
 80068a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	4616      	mov	r6, r2
 80068aa:	4699      	mov	r9, r3
 80068ac:	688a      	ldr	r2, [r1, #8]
 80068ae:	690b      	ldr	r3, [r1, #16]
 80068b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068b4:	4293      	cmp	r3, r2
 80068b6:	bfb8      	it	lt
 80068b8:	4613      	movlt	r3, r2
 80068ba:	6033      	str	r3, [r6, #0]
 80068bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068c0:	4607      	mov	r7, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	b10a      	cbz	r2, 80068ca <_printf_common+0x26>
 80068c6:	3301      	adds	r3, #1
 80068c8:	6033      	str	r3, [r6, #0]
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	0699      	lsls	r1, r3, #26
 80068ce:	bf42      	ittt	mi
 80068d0:	6833      	ldrmi	r3, [r6, #0]
 80068d2:	3302      	addmi	r3, #2
 80068d4:	6033      	strmi	r3, [r6, #0]
 80068d6:	6825      	ldr	r5, [r4, #0]
 80068d8:	f015 0506 	ands.w	r5, r5, #6
 80068dc:	d106      	bne.n	80068ec <_printf_common+0x48>
 80068de:	f104 0a19 	add.w	sl, r4, #25
 80068e2:	68e3      	ldr	r3, [r4, #12]
 80068e4:	6832      	ldr	r2, [r6, #0]
 80068e6:	1a9b      	subs	r3, r3, r2
 80068e8:	42ab      	cmp	r3, r5
 80068ea:	dc26      	bgt.n	800693a <_printf_common+0x96>
 80068ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068f0:	1e13      	subs	r3, r2, #0
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	bf18      	it	ne
 80068f6:	2301      	movne	r3, #1
 80068f8:	0692      	lsls	r2, r2, #26
 80068fa:	d42b      	bmi.n	8006954 <_printf_common+0xb0>
 80068fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006900:	4649      	mov	r1, r9
 8006902:	4638      	mov	r0, r7
 8006904:	47c0      	blx	r8
 8006906:	3001      	adds	r0, #1
 8006908:	d01e      	beq.n	8006948 <_printf_common+0xa4>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	68e5      	ldr	r5, [r4, #12]
 800690e:	6832      	ldr	r2, [r6, #0]
 8006910:	f003 0306 	and.w	r3, r3, #6
 8006914:	2b04      	cmp	r3, #4
 8006916:	bf08      	it	eq
 8006918:	1aad      	subeq	r5, r5, r2
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	6922      	ldr	r2, [r4, #16]
 800691e:	bf0c      	ite	eq
 8006920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006924:	2500      	movne	r5, #0
 8006926:	4293      	cmp	r3, r2
 8006928:	bfc4      	itt	gt
 800692a:	1a9b      	subgt	r3, r3, r2
 800692c:	18ed      	addgt	r5, r5, r3
 800692e:	2600      	movs	r6, #0
 8006930:	341a      	adds	r4, #26
 8006932:	42b5      	cmp	r5, r6
 8006934:	d11a      	bne.n	800696c <_printf_common+0xc8>
 8006936:	2000      	movs	r0, #0
 8006938:	e008      	b.n	800694c <_printf_common+0xa8>
 800693a:	2301      	movs	r3, #1
 800693c:	4652      	mov	r2, sl
 800693e:	4649      	mov	r1, r9
 8006940:	4638      	mov	r0, r7
 8006942:	47c0      	blx	r8
 8006944:	3001      	adds	r0, #1
 8006946:	d103      	bne.n	8006950 <_printf_common+0xac>
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006950:	3501      	adds	r5, #1
 8006952:	e7c6      	b.n	80068e2 <_printf_common+0x3e>
 8006954:	18e1      	adds	r1, r4, r3
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	2030      	movs	r0, #48	; 0x30
 800695a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800695e:	4422      	add	r2, r4
 8006960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006968:	3302      	adds	r3, #2
 800696a:	e7c7      	b.n	80068fc <_printf_common+0x58>
 800696c:	2301      	movs	r3, #1
 800696e:	4622      	mov	r2, r4
 8006970:	4649      	mov	r1, r9
 8006972:	4638      	mov	r0, r7
 8006974:	47c0      	blx	r8
 8006976:	3001      	adds	r0, #1
 8006978:	d0e6      	beq.n	8006948 <_printf_common+0xa4>
 800697a:	3601      	adds	r6, #1
 800697c:	e7d9      	b.n	8006932 <_printf_common+0x8e>
	...

08006980 <_printf_i>:
 8006980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006984:	7e0f      	ldrb	r7, [r1, #24]
 8006986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006988:	2f78      	cmp	r7, #120	; 0x78
 800698a:	4691      	mov	r9, r2
 800698c:	4680      	mov	r8, r0
 800698e:	460c      	mov	r4, r1
 8006990:	469a      	mov	sl, r3
 8006992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006996:	d807      	bhi.n	80069a8 <_printf_i+0x28>
 8006998:	2f62      	cmp	r7, #98	; 0x62
 800699a:	d80a      	bhi.n	80069b2 <_printf_i+0x32>
 800699c:	2f00      	cmp	r7, #0
 800699e:	f000 80d8 	beq.w	8006b52 <_printf_i+0x1d2>
 80069a2:	2f58      	cmp	r7, #88	; 0x58
 80069a4:	f000 80a3 	beq.w	8006aee <_printf_i+0x16e>
 80069a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069b0:	e03a      	b.n	8006a28 <_printf_i+0xa8>
 80069b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069b6:	2b15      	cmp	r3, #21
 80069b8:	d8f6      	bhi.n	80069a8 <_printf_i+0x28>
 80069ba:	a101      	add	r1, pc, #4	; (adr r1, 80069c0 <_printf_i+0x40>)
 80069bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a2d 	.word	0x08006a2d
 80069c8:	080069a9 	.word	0x080069a9
 80069cc:	080069a9 	.word	0x080069a9
 80069d0:	080069a9 	.word	0x080069a9
 80069d4:	080069a9 	.word	0x080069a9
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	080069a9 	.word	0x080069a9
 80069e0:	080069a9 	.word	0x080069a9
 80069e4:	080069a9 	.word	0x080069a9
 80069e8:	080069a9 	.word	0x080069a9
 80069ec:	08006b39 	.word	0x08006b39
 80069f0:	08006a5d 	.word	0x08006a5d
 80069f4:	08006b1b 	.word	0x08006b1b
 80069f8:	080069a9 	.word	0x080069a9
 80069fc:	080069a9 	.word	0x080069a9
 8006a00:	08006b5b 	.word	0x08006b5b
 8006a04:	080069a9 	.word	0x080069a9
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	080069a9 	.word	0x080069a9
 8006a10:	080069a9 	.word	0x080069a9
 8006a14:	08006b23 	.word	0x08006b23
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	1d1a      	adds	r2, r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	602a      	str	r2, [r5, #0]
 8006a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0a3      	b.n	8006b74 <_printf_i+0x1f4>
 8006a2c:	6820      	ldr	r0, [r4, #0]
 8006a2e:	6829      	ldr	r1, [r5, #0]
 8006a30:	0606      	lsls	r6, r0, #24
 8006a32:	f101 0304 	add.w	r3, r1, #4
 8006a36:	d50a      	bpl.n	8006a4e <_printf_i+0xce>
 8006a38:	680e      	ldr	r6, [r1, #0]
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	2e00      	cmp	r6, #0
 8006a3e:	da03      	bge.n	8006a48 <_printf_i+0xc8>
 8006a40:	232d      	movs	r3, #45	; 0x2d
 8006a42:	4276      	negs	r6, r6
 8006a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a48:	485e      	ldr	r0, [pc, #376]	; (8006bc4 <_printf_i+0x244>)
 8006a4a:	230a      	movs	r3, #10
 8006a4c:	e019      	b.n	8006a82 <_printf_i+0x102>
 8006a4e:	680e      	ldr	r6, [r1, #0]
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a56:	bf18      	it	ne
 8006a58:	b236      	sxthne	r6, r6
 8006a5a:	e7ef      	b.n	8006a3c <_printf_i+0xbc>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	6820      	ldr	r0, [r4, #0]
 8006a60:	1d19      	adds	r1, r3, #4
 8006a62:	6029      	str	r1, [r5, #0]
 8006a64:	0601      	lsls	r1, r0, #24
 8006a66:	d501      	bpl.n	8006a6c <_printf_i+0xec>
 8006a68:	681e      	ldr	r6, [r3, #0]
 8006a6a:	e002      	b.n	8006a72 <_printf_i+0xf2>
 8006a6c:	0646      	lsls	r6, r0, #25
 8006a6e:	d5fb      	bpl.n	8006a68 <_printf_i+0xe8>
 8006a70:	881e      	ldrh	r6, [r3, #0]
 8006a72:	4854      	ldr	r0, [pc, #336]	; (8006bc4 <_printf_i+0x244>)
 8006a74:	2f6f      	cmp	r7, #111	; 0x6f
 8006a76:	bf0c      	ite	eq
 8006a78:	2308      	moveq	r3, #8
 8006a7a:	230a      	movne	r3, #10
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a82:	6865      	ldr	r5, [r4, #4]
 8006a84:	60a5      	str	r5, [r4, #8]
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	bfa2      	ittt	ge
 8006a8a:	6821      	ldrge	r1, [r4, #0]
 8006a8c:	f021 0104 	bicge.w	r1, r1, #4
 8006a90:	6021      	strge	r1, [r4, #0]
 8006a92:	b90e      	cbnz	r6, 8006a98 <_printf_i+0x118>
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	d04d      	beq.n	8006b34 <_printf_i+0x1b4>
 8006a98:	4615      	mov	r5, r2
 8006a9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006aa2:	5dc7      	ldrb	r7, [r0, r7]
 8006aa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006aa8:	4637      	mov	r7, r6
 8006aaa:	42bb      	cmp	r3, r7
 8006aac:	460e      	mov	r6, r1
 8006aae:	d9f4      	bls.n	8006a9a <_printf_i+0x11a>
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d10b      	bne.n	8006acc <_printf_i+0x14c>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	07de      	lsls	r6, r3, #31
 8006ab8:	d508      	bpl.n	8006acc <_printf_i+0x14c>
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	6861      	ldr	r1, [r4, #4]
 8006abe:	4299      	cmp	r1, r3
 8006ac0:	bfde      	ittt	le
 8006ac2:	2330      	movle	r3, #48	; 0x30
 8006ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006acc:	1b52      	subs	r2, r2, r5
 8006ace:	6122      	str	r2, [r4, #16]
 8006ad0:	f8cd a000 	str.w	sl, [sp]
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	aa03      	add	r2, sp, #12
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4640      	mov	r0, r8
 8006adc:	f7ff fee2 	bl	80068a4 <_printf_common>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d14c      	bne.n	8006b7e <_printf_i+0x1fe>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	b004      	add	sp, #16
 8006aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aee:	4835      	ldr	r0, [pc, #212]	; (8006bc4 <_printf_i+0x244>)
 8006af0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006af4:	6829      	ldr	r1, [r5, #0]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006afc:	6029      	str	r1, [r5, #0]
 8006afe:	061d      	lsls	r5, r3, #24
 8006b00:	d514      	bpl.n	8006b2c <_printf_i+0x1ac>
 8006b02:	07df      	lsls	r7, r3, #31
 8006b04:	bf44      	itt	mi
 8006b06:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0a:	6023      	strmi	r3, [r4, #0]
 8006b0c:	b91e      	cbnz	r6, 8006b16 <_printf_i+0x196>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	f023 0320 	bic.w	r3, r3, #32
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	2310      	movs	r3, #16
 8006b18:	e7b0      	b.n	8006a7c <_printf_i+0xfc>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	f043 0320 	orr.w	r3, r3, #32
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	2378      	movs	r3, #120	; 0x78
 8006b24:	4828      	ldr	r0, [pc, #160]	; (8006bc8 <_printf_i+0x248>)
 8006b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b2a:	e7e3      	b.n	8006af4 <_printf_i+0x174>
 8006b2c:	0659      	lsls	r1, r3, #25
 8006b2e:	bf48      	it	mi
 8006b30:	b2b6      	uxthmi	r6, r6
 8006b32:	e7e6      	b.n	8006b02 <_printf_i+0x182>
 8006b34:	4615      	mov	r5, r2
 8006b36:	e7bb      	b.n	8006ab0 <_printf_i+0x130>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	6826      	ldr	r6, [r4, #0]
 8006b3c:	6961      	ldr	r1, [r4, #20]
 8006b3e:	1d18      	adds	r0, r3, #4
 8006b40:	6028      	str	r0, [r5, #0]
 8006b42:	0635      	lsls	r5, r6, #24
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	d501      	bpl.n	8006b4c <_printf_i+0x1cc>
 8006b48:	6019      	str	r1, [r3, #0]
 8006b4a:	e002      	b.n	8006b52 <_printf_i+0x1d2>
 8006b4c:	0670      	lsls	r0, r6, #25
 8006b4e:	d5fb      	bpl.n	8006b48 <_printf_i+0x1c8>
 8006b50:	8019      	strh	r1, [r3, #0]
 8006b52:	2300      	movs	r3, #0
 8006b54:	6123      	str	r3, [r4, #16]
 8006b56:	4615      	mov	r5, r2
 8006b58:	e7ba      	b.n	8006ad0 <_printf_i+0x150>
 8006b5a:	682b      	ldr	r3, [r5, #0]
 8006b5c:	1d1a      	adds	r2, r3, #4
 8006b5e:	602a      	str	r2, [r5, #0]
 8006b60:	681d      	ldr	r5, [r3, #0]
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	2100      	movs	r1, #0
 8006b66:	4628      	mov	r0, r5
 8006b68:	f7f9 fb42 	bl	80001f0 <memchr>
 8006b6c:	b108      	cbz	r0, 8006b72 <_printf_i+0x1f2>
 8006b6e:	1b40      	subs	r0, r0, r5
 8006b70:	6060      	str	r0, [r4, #4]
 8006b72:	6863      	ldr	r3, [r4, #4]
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	2300      	movs	r3, #0
 8006b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b7c:	e7a8      	b.n	8006ad0 <_printf_i+0x150>
 8006b7e:	6923      	ldr	r3, [r4, #16]
 8006b80:	462a      	mov	r2, r5
 8006b82:	4649      	mov	r1, r9
 8006b84:	4640      	mov	r0, r8
 8006b86:	47d0      	blx	sl
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d0ab      	beq.n	8006ae4 <_printf_i+0x164>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	079b      	lsls	r3, r3, #30
 8006b90:	d413      	bmi.n	8006bba <_printf_i+0x23a>
 8006b92:	68e0      	ldr	r0, [r4, #12]
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	4298      	cmp	r0, r3
 8006b98:	bfb8      	it	lt
 8006b9a:	4618      	movlt	r0, r3
 8006b9c:	e7a4      	b.n	8006ae8 <_printf_i+0x168>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	47d0      	blx	sl
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d09b      	beq.n	8006ae4 <_printf_i+0x164>
 8006bac:	3501      	adds	r5, #1
 8006bae:	68e3      	ldr	r3, [r4, #12]
 8006bb0:	9903      	ldr	r1, [sp, #12]
 8006bb2:	1a5b      	subs	r3, r3, r1
 8006bb4:	42ab      	cmp	r3, r5
 8006bb6:	dcf2      	bgt.n	8006b9e <_printf_i+0x21e>
 8006bb8:	e7eb      	b.n	8006b92 <_printf_i+0x212>
 8006bba:	2500      	movs	r5, #0
 8006bbc:	f104 0619 	add.w	r6, r4, #25
 8006bc0:	e7f5      	b.n	8006bae <_printf_i+0x22e>
 8006bc2:	bf00      	nop
 8006bc4:	08006ff1 	.word	0x08006ff1
 8006bc8:	08007002 	.word	0x08007002

08006bcc <memmove>:
 8006bcc:	4288      	cmp	r0, r1
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	eb01 0402 	add.w	r4, r1, r2
 8006bd4:	d902      	bls.n	8006bdc <memmove+0x10>
 8006bd6:	4284      	cmp	r4, r0
 8006bd8:	4623      	mov	r3, r4
 8006bda:	d807      	bhi.n	8006bec <memmove+0x20>
 8006bdc:	1e43      	subs	r3, r0, #1
 8006bde:	42a1      	cmp	r1, r4
 8006be0:	d008      	beq.n	8006bf4 <memmove+0x28>
 8006be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bea:	e7f8      	b.n	8006bde <memmove+0x12>
 8006bec:	4402      	add	r2, r0
 8006bee:	4601      	mov	r1, r0
 8006bf0:	428a      	cmp	r2, r1
 8006bf2:	d100      	bne.n	8006bf6 <memmove+0x2a>
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bfe:	e7f7      	b.n	8006bf0 <memmove+0x24>

08006c00 <_free_r>:
 8006c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d044      	beq.n	8006c90 <_free_r+0x90>
 8006c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c0a:	9001      	str	r0, [sp, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c12:	bfb8      	it	lt
 8006c14:	18e4      	addlt	r4, r4, r3
 8006c16:	f000 f913 	bl	8006e40 <__malloc_lock>
 8006c1a:	4a1e      	ldr	r2, [pc, #120]	; (8006c94 <_free_r+0x94>)
 8006c1c:	9801      	ldr	r0, [sp, #4]
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	b933      	cbnz	r3, 8006c30 <_free_r+0x30>
 8006c22:	6063      	str	r3, [r4, #4]
 8006c24:	6014      	str	r4, [r2, #0]
 8006c26:	b003      	add	sp, #12
 8006c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c2c:	f000 b90e 	b.w	8006e4c <__malloc_unlock>
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d908      	bls.n	8006c46 <_free_r+0x46>
 8006c34:	6825      	ldr	r5, [r4, #0]
 8006c36:	1961      	adds	r1, r4, r5
 8006c38:	428b      	cmp	r3, r1
 8006c3a:	bf01      	itttt	eq
 8006c3c:	6819      	ldreq	r1, [r3, #0]
 8006c3e:	685b      	ldreq	r3, [r3, #4]
 8006c40:	1949      	addeq	r1, r1, r5
 8006c42:	6021      	streq	r1, [r4, #0]
 8006c44:	e7ed      	b.n	8006c22 <_free_r+0x22>
 8006c46:	461a      	mov	r2, r3
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	b10b      	cbz	r3, 8006c50 <_free_r+0x50>
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	d9fa      	bls.n	8006c46 <_free_r+0x46>
 8006c50:	6811      	ldr	r1, [r2, #0]
 8006c52:	1855      	adds	r5, r2, r1
 8006c54:	42a5      	cmp	r5, r4
 8006c56:	d10b      	bne.n	8006c70 <_free_r+0x70>
 8006c58:	6824      	ldr	r4, [r4, #0]
 8006c5a:	4421      	add	r1, r4
 8006c5c:	1854      	adds	r4, r2, r1
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	6011      	str	r1, [r2, #0]
 8006c62:	d1e0      	bne.n	8006c26 <_free_r+0x26>
 8006c64:	681c      	ldr	r4, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	6053      	str	r3, [r2, #4]
 8006c6a:	4421      	add	r1, r4
 8006c6c:	6011      	str	r1, [r2, #0]
 8006c6e:	e7da      	b.n	8006c26 <_free_r+0x26>
 8006c70:	d902      	bls.n	8006c78 <_free_r+0x78>
 8006c72:	230c      	movs	r3, #12
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	e7d6      	b.n	8006c26 <_free_r+0x26>
 8006c78:	6825      	ldr	r5, [r4, #0]
 8006c7a:	1961      	adds	r1, r4, r5
 8006c7c:	428b      	cmp	r3, r1
 8006c7e:	bf04      	itt	eq
 8006c80:	6819      	ldreq	r1, [r3, #0]
 8006c82:	685b      	ldreq	r3, [r3, #4]
 8006c84:	6063      	str	r3, [r4, #4]
 8006c86:	bf04      	itt	eq
 8006c88:	1949      	addeq	r1, r1, r5
 8006c8a:	6021      	streq	r1, [r4, #0]
 8006c8c:	6054      	str	r4, [r2, #4]
 8006c8e:	e7ca      	b.n	8006c26 <_free_r+0x26>
 8006c90:	b003      	add	sp, #12
 8006c92:	bd30      	pop	{r4, r5, pc}
 8006c94:	20004a8c 	.word	0x20004a8c

08006c98 <sbrk_aligned>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4e0e      	ldr	r6, [pc, #56]	; (8006cd4 <sbrk_aligned+0x3c>)
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	6831      	ldr	r1, [r6, #0]
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	b911      	cbnz	r1, 8006caa <sbrk_aligned+0x12>
 8006ca4:	f000 f8bc 	bl	8006e20 <_sbrk_r>
 8006ca8:	6030      	str	r0, [r6, #0]
 8006caa:	4621      	mov	r1, r4
 8006cac:	4628      	mov	r0, r5
 8006cae:	f000 f8b7 	bl	8006e20 <_sbrk_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	d00a      	beq.n	8006ccc <sbrk_aligned+0x34>
 8006cb6:	1cc4      	adds	r4, r0, #3
 8006cb8:	f024 0403 	bic.w	r4, r4, #3
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d007      	beq.n	8006cd0 <sbrk_aligned+0x38>
 8006cc0:	1a21      	subs	r1, r4, r0
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f8ac 	bl	8006e20 <_sbrk_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d101      	bne.n	8006cd0 <sbrk_aligned+0x38>
 8006ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	20004a90 	.word	0x20004a90

08006cd8 <_malloc_r>:
 8006cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cdc:	1ccd      	adds	r5, r1, #3
 8006cde:	f025 0503 	bic.w	r5, r5, #3
 8006ce2:	3508      	adds	r5, #8
 8006ce4:	2d0c      	cmp	r5, #12
 8006ce6:	bf38      	it	cc
 8006ce8:	250c      	movcc	r5, #12
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	4607      	mov	r7, r0
 8006cee:	db01      	blt.n	8006cf4 <_malloc_r+0x1c>
 8006cf0:	42a9      	cmp	r1, r5
 8006cf2:	d905      	bls.n	8006d00 <_malloc_r+0x28>
 8006cf4:	230c      	movs	r3, #12
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	4e2e      	ldr	r6, [pc, #184]	; (8006dbc <_malloc_r+0xe4>)
 8006d02:	f000 f89d 	bl	8006e40 <__malloc_lock>
 8006d06:	6833      	ldr	r3, [r6, #0]
 8006d08:	461c      	mov	r4, r3
 8006d0a:	bb34      	cbnz	r4, 8006d5a <_malloc_r+0x82>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7ff ffc2 	bl	8006c98 <sbrk_aligned>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	4604      	mov	r4, r0
 8006d18:	d14d      	bne.n	8006db6 <_malloc_r+0xde>
 8006d1a:	6834      	ldr	r4, [r6, #0]
 8006d1c:	4626      	mov	r6, r4
 8006d1e:	2e00      	cmp	r6, #0
 8006d20:	d140      	bne.n	8006da4 <_malloc_r+0xcc>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	4631      	mov	r1, r6
 8006d26:	4638      	mov	r0, r7
 8006d28:	eb04 0803 	add.w	r8, r4, r3
 8006d2c:	f000 f878 	bl	8006e20 <_sbrk_r>
 8006d30:	4580      	cmp	r8, r0
 8006d32:	d13a      	bne.n	8006daa <_malloc_r+0xd2>
 8006d34:	6821      	ldr	r1, [r4, #0]
 8006d36:	3503      	adds	r5, #3
 8006d38:	1a6d      	subs	r5, r5, r1
 8006d3a:	f025 0503 	bic.w	r5, r5, #3
 8006d3e:	3508      	adds	r5, #8
 8006d40:	2d0c      	cmp	r5, #12
 8006d42:	bf38      	it	cc
 8006d44:	250c      	movcc	r5, #12
 8006d46:	4629      	mov	r1, r5
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ffa5 	bl	8006c98 <sbrk_aligned>
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d02b      	beq.n	8006daa <_malloc_r+0xd2>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	442b      	add	r3, r5
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	e00e      	b.n	8006d78 <_malloc_r+0xa0>
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	1b52      	subs	r2, r2, r5
 8006d5e:	d41e      	bmi.n	8006d9e <_malloc_r+0xc6>
 8006d60:	2a0b      	cmp	r2, #11
 8006d62:	d916      	bls.n	8006d92 <_malloc_r+0xba>
 8006d64:	1961      	adds	r1, r4, r5
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	6025      	str	r5, [r4, #0]
 8006d6a:	bf18      	it	ne
 8006d6c:	6059      	strne	r1, [r3, #4]
 8006d6e:	6863      	ldr	r3, [r4, #4]
 8006d70:	bf08      	it	eq
 8006d72:	6031      	streq	r1, [r6, #0]
 8006d74:	5162      	str	r2, [r4, r5]
 8006d76:	604b      	str	r3, [r1, #4]
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f104 060b 	add.w	r6, r4, #11
 8006d7e:	f000 f865 	bl	8006e4c <__malloc_unlock>
 8006d82:	f026 0607 	bic.w	r6, r6, #7
 8006d86:	1d23      	adds	r3, r4, #4
 8006d88:	1af2      	subs	r2, r6, r3
 8006d8a:	d0b6      	beq.n	8006cfa <_malloc_r+0x22>
 8006d8c:	1b9b      	subs	r3, r3, r6
 8006d8e:	50a3      	str	r3, [r4, r2]
 8006d90:	e7b3      	b.n	8006cfa <_malloc_r+0x22>
 8006d92:	6862      	ldr	r2, [r4, #4]
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	bf0c      	ite	eq
 8006d98:	6032      	streq	r2, [r6, #0]
 8006d9a:	605a      	strne	r2, [r3, #4]
 8006d9c:	e7ec      	b.n	8006d78 <_malloc_r+0xa0>
 8006d9e:	4623      	mov	r3, r4
 8006da0:	6864      	ldr	r4, [r4, #4]
 8006da2:	e7b2      	b.n	8006d0a <_malloc_r+0x32>
 8006da4:	4634      	mov	r4, r6
 8006da6:	6876      	ldr	r6, [r6, #4]
 8006da8:	e7b9      	b.n	8006d1e <_malloc_r+0x46>
 8006daa:	230c      	movs	r3, #12
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	4638      	mov	r0, r7
 8006db0:	f000 f84c 	bl	8006e4c <__malloc_unlock>
 8006db4:	e7a1      	b.n	8006cfa <_malloc_r+0x22>
 8006db6:	6025      	str	r5, [r4, #0]
 8006db8:	e7de      	b.n	8006d78 <_malloc_r+0xa0>
 8006dba:	bf00      	nop
 8006dbc:	20004a8c 	.word	0x20004a8c

08006dc0 <_realloc_r>:
 8006dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	460e      	mov	r6, r1
 8006dca:	b921      	cbnz	r1, 8006dd6 <_realloc_r+0x16>
 8006dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	f7ff bf81 	b.w	8006cd8 <_malloc_r>
 8006dd6:	b92a      	cbnz	r2, 8006de4 <_realloc_r+0x24>
 8006dd8:	f7ff ff12 	bl	8006c00 <_free_r>
 8006ddc:	4625      	mov	r5, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de4:	f000 f838 	bl	8006e58 <_malloc_usable_size_r>
 8006de8:	4284      	cmp	r4, r0
 8006dea:	4607      	mov	r7, r0
 8006dec:	d802      	bhi.n	8006df4 <_realloc_r+0x34>
 8006dee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006df2:	d812      	bhi.n	8006e1a <_realloc_r+0x5a>
 8006df4:	4621      	mov	r1, r4
 8006df6:	4640      	mov	r0, r8
 8006df8:	f7ff ff6e 	bl	8006cd8 <_malloc_r>
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d0ed      	beq.n	8006dde <_realloc_r+0x1e>
 8006e02:	42bc      	cmp	r4, r7
 8006e04:	4622      	mov	r2, r4
 8006e06:	4631      	mov	r1, r6
 8006e08:	bf28      	it	cs
 8006e0a:	463a      	movcs	r2, r7
 8006e0c:	f7ff fbb8 	bl	8006580 <memcpy>
 8006e10:	4631      	mov	r1, r6
 8006e12:	4640      	mov	r0, r8
 8006e14:	f7ff fef4 	bl	8006c00 <_free_r>
 8006e18:	e7e1      	b.n	8006dde <_realloc_r+0x1e>
 8006e1a:	4635      	mov	r5, r6
 8006e1c:	e7df      	b.n	8006dde <_realloc_r+0x1e>
	...

08006e20 <_sbrk_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d06      	ldr	r5, [pc, #24]	; (8006e3c <_sbrk_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	f7f9 fee0 	bl	8000bf0 <_sbrk>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_sbrk_r+0x1a>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_sbrk_r+0x1a>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20004a94 	.word	0x20004a94

08006e40 <__malloc_lock>:
 8006e40:	4801      	ldr	r0, [pc, #4]	; (8006e48 <__malloc_lock+0x8>)
 8006e42:	f000 b811 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006e46:	bf00      	nop
 8006e48:	20004a98 	.word	0x20004a98

08006e4c <__malloc_unlock>:
 8006e4c:	4801      	ldr	r0, [pc, #4]	; (8006e54 <__malloc_unlock+0x8>)
 8006e4e:	f000 b80c 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006e52:	bf00      	nop
 8006e54:	20004a98 	.word	0x20004a98

08006e58 <_malloc_usable_size_r>:
 8006e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5c:	1f18      	subs	r0, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bfbc      	itt	lt
 8006e62:	580b      	ldrlt	r3, [r1, r0]
 8006e64:	18c0      	addlt	r0, r0, r3
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_acquire_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <__retarget_lock_release_recursive>:
 8006e6a:	4770      	bx	lr

08006e6c <_init>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	bf00      	nop
 8006e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e72:	bc08      	pop	{r3}
 8006e74:	469e      	mov	lr, r3
 8006e76:	4770      	bx	lr

08006e78 <_fini>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr
