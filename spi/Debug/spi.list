
spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000060c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007a4  080007a4  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007a4  080007a4  00020404  2**0
                  CONTENTS
  4 .ARM          00000000  080007a4  080007a4  00020404  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a4  080007a4  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a4  080007a4  000107a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007a8  080007a8  000107a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000400  080007ac  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000404  080007b0  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  080007b0  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016e4  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000061f  00000000  00000000  00021b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00022138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  00022360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014400  00000000  00000000  00022540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a77  00000000  00000000  00036940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081566  00000000  00000000  000393b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba91d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000750  00000000  00000000  000ba970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000404 	.word	0x20000404
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800078c 	.word	0x0800078c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000408 	.word	0x20000408
 80001d4:	0800078c 	.word	0x0800078c

080001d8 <main>:
 *\param[in]
 *\param[out]
 *\retval
 */
int
main() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	vectortable_move();
 80001dc:	f000 f814 	bl	8000208 <vectortable_move>
	tim_systick_init();
 80001e0:	f000 f82e 	bl	8000240 <tim_systick_init>
	spi_init();
 80001e4:	f000 f8f0 	bl	80003c8 <spi_init>
	dma_init();
 80001e8:	f000 f894 	bl	8000314 <dma_init>
	interrupt_init();
 80001ec:	f000 f848 	bl	8000280 <interrupt_init>

	while (1) {
		spi_ss_enable();
 80001f0:	f000 f98e 	bl	8000510 <spi_ss_enable>
		spi_send_data(0x0F|0x80);
 80001f4:	208f      	movs	r0, #143	; 0x8f
 80001f6:	f000 f9b3 	bl	8000560 <spi_send_data>
		spi_send_data(0xFF);
 80001fa:	20ff      	movs	r0, #255	; 0xff
 80001fc:	f000 f9b0 	bl	8000560 <spi_send_data>
		spi_ss_disable();
 8000200:	f000 f99a 	bl	8000538 <spi_ss_disable>
		spi_ss_enable();
 8000204:	e7f4      	b.n	80001f0 <main+0x18>
	...

08000208 <vectortable_move>:
 *\param[out]
 *\retval
 */
void
vectortable_move()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *volatile)0x20000000;
 800020e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000212:	60bb      	str	r3, [r7, #8]
	void *volatile flash = (void *volatile)0x08000000;
 8000214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000218:	607b      	str	r3, [r7, #4]
	memcpy(ram, flash, 0x198);
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	6879      	ldr	r1, [r7, #4]
 800021e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000222:	4618      	mov	r0, r3
 8000224:	f000 faa4 	bl	8000770 <memcpy>

	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <vectortable_move+0x34>)
 800022a:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	e000ed08 	.word	0xe000ed08

08000240 <tim_systick_init>:
 *\param[out]
 *\retval
 */
void
tim_systick_init()
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
	uint32_t *SYS_CSR = (uint32_t *)(0xe000e010 + 0x00);
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <tim_systick_init+0x38>)
 8000248:	607b      	str	r3, [r7, #4]
	uint32_t *SYS_RVR = (uint32_t *)(0xe000e010 + 0x00);
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <tim_systick_init+0x38>)
 800024c:	603b      	str	r3, [r7, #0]

	/*clock source: processor clock*/
	*SYS_CSR |= (1 << 2);	// bit CLKSOURCE
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 0204 	orr.w	r2, r3, #4
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	601a      	str	r2, [r3, #0]

	/*set count*/
	*SYS_RVR = 160000 - 1;
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	4a07      	ldr	r2, [pc, #28]	; (800027c <tim_systick_init+0x3c>)
 800025e:	601a      	str	r2, [r3, #0]

	/*enable the counter*/
	*SYS_CSR |= (1 << 0);	// bit ENABLE
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f043 0201 	orr.w	r2, r3, #1
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	601a      	str	r2, [r3, #0]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e010 	.word	0xe000e010
 800027c:	000270ff 	.word	0x000270ff

08000280 <interrupt_init>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
interrupt_init() {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
	/*-----------------------SPI Receive complete Interrupt-----------------------*/
	uint32_t volatile *const SPI1_CR2   = (uint32_t *)(0x40013000 + 0x04);
 8000286:	4b1b      	ldr	r3, [pc, #108]	; (80002f4 <interrupt_init+0x74>)
 8000288:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const NVIC_ISER1 = (uint32_t *)(0xe000e100 + 0x04);
 800028a:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <interrupt_init+0x78>)
 800028c:	60bb      	str	r3, [r7, #8]
	//enable vector interrupt position 35
	*NVIC_ISER1 |= (1 << (35 - 32));
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f043 0208 	orr.w	r2, r3, #8
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	601a      	str	r2, [r3, #0]
	/*change uart-interrupt handler*/
	*((volatile uint32_t *const)(0x20000000 + 0xCC)) = ((uint32_t)spi_receive_handler | 1);
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <interrupt_init+0x7c>)
 800029c:	4a18      	ldr	r2, [pc, #96]	; (8000300 <interrupt_init+0x80>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
	/*enable interrupt Rx*/
	*SPI1_CR2 |= (1 << 6);	// bit RXNEIE
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	601a      	str	r2, [r3, #0]


	/*-----------------------DMA Transfer complete Interrupt-----------------------*/
	uint32_t volatile *const DMA2_LIFCR   = (uint32_t *)(0x40026400 + 0x08);
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <interrupt_init+0x84>)
 80002b2:	607b      	str	r3, [r7, #4]
	uint32_t volatile *const DMA2_S0CR    = (uint32_t *)(0x40026400 + 0x10 + (0x18 * 0));
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <interrupt_init+0x88>)
 80002b6:	603b      	str	r3, [r7, #0]
	/*clear stream 0 transfer complete interrupt flag*/
	*DMA2_LIFCR |= (1 << 5);	// bit CTCIF0
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f043 0220 	orr.w	r2, r3, #32
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	601a      	str	r2, [r3, #0]
	/*enable vector interrupt position 56*/
	*NVIC_ISER1 |= (1 << (56 - 32));
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	601a      	str	r2, [r3, #0]
	/*change dma-interrupt handler*/
	*((volatile uint32_t *const)(0x20000000 + 0x120)) = ((uint32_t)dma_transfer_handler | 1);
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <interrupt_init+0x8c>)
 80002d2:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <interrupt_init+0x90>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]
	/*enable transfer complete enable*/
	*DMA2_S0CR |= (1 << 4);		// bit TCIE
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0210 	orr.w	r2, r3, #16
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	601a      	str	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40013004 	.word	0x40013004
 80002f8:	e000e104 	.word	0xe000e104
 80002fc:	080005b1 	.word	0x080005b1
 8000300:	200000cc 	.word	0x200000cc
 8000304:	40026408 	.word	0x40026408
 8000308:	40026410 	.word	0x40026410
 800030c:	0800060d 	.word	0x0800060d
 8000310:	20000120 	.word	0x20000120

08000314 <dma_init>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
dma_init() {
 8000314:	b480      	push	{r7}
 8000316:	b089      	sub	sp, #36	; 0x24
 8000318:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 800031a:	2300      	movs	r3, #0
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <dma_init+0x94>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000322:	4a21      	ldr	r2, [pc, #132]	; (80003a8 <dma_init+0x94>)
 8000324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000328:	6313      	str	r3, [r2, #48]	; 0x30
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <dma_init+0x94>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

	/*-----------------------Rx SPI-----------------------*/
	uint32_t volatile* const SPI1_CR2	  = (uint32_t*)(0x40013000 + 0x04);
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <dma_init+0x98>)
 8000338:	61fb      	str	r3, [r7, #28]
	uint32_t volatile* const SPI1_DR      = (uint32_t*)(0x40013000 + 0x0c);
 800033a:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <dma_init+0x9c>)
 800033c:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const DMA2_S0CR    = (uint32_t *)(0x40026400 + 0x10 + (0x18 * 0));
 800033e:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <dma_init+0xa0>)
 8000340:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const DMA2_S0NDTR  = (uint32_t *)(0x40026400 + 0x14 + (0x18 * 0));
 8000342:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <dma_init+0xa4>)
 8000344:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const DMA2_S0PAR   = (uint32_t *)(0x40026400 + 0x18 + (0x18 * 0));
 8000346:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <dma_init+0xa8>)
 8000348:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const DMA2_S0M0AR  = (uint32_t *)(0x40026400 + 0x1c + (0x18 * 0));
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <dma_init+0xac>)
 800034c:	60bb      	str	r3, [r7, #8]
	/*Rx SPI enable*/
	*SPI1_CR2 |= (1 << 0);	//bit RXDMAEN
 800034e:	69fb      	ldr	r3, [r7, #28]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f043 0201 	orr.w	r2, r3, #1
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	601a      	str	r2, [r3, #0]
	/*channel 3*/
	*DMA2_S0CR |= (3 << 25);
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f043 62c0 	orr.w	r2, r3, #100663296	; 0x6000000
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	601a      	str	r2, [r3, #0]
	/*number of data*/
	*DMA2_S0NDTR = sizeof(rx_dma_buffer);
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	220a      	movs	r2, #10
 800036a:	601a      	str	r2, [r3, #0]
	/*peripheral address*/
	*DMA2_S0PAR = (uint32_t)SPI1_DR;
 800036c:	69ba      	ldr	r2, [r7, #24]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	601a      	str	r2, [r3, #0]
	/*memory address*/
	*DMA2_S0M0AR = (uint32_t)rx_dma_buffer;
 8000372:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <dma_init+0xb0>)
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	601a      	str	r2, [r3, #0]
	/*circular mode*/
	*DMA2_S0CR |= (1 << 8);
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	601a      	str	r2, [r3, #0]
	/*memory increment mode*/
	*DMA2_S0CR |= (1 << 10);
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	601a      	str	r2, [r3, #0]
	/*DMA stream enable*/
	*DMA2_S0CR |= (1 << 0);
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f043 0201 	orr.w	r2, r3, #1
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	601a      	str	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	3724      	adds	r7, #36	; 0x24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40013004 	.word	0x40013004
 80003b0:	4001300c 	.word	0x4001300c
 80003b4:	40026410 	.word	0x40026410
 80003b8:	40026414 	.word	0x40026414
 80003bc:	40026418 	.word	0x40026418
 80003c0:	4002641c 	.word	0x4002641c
 80003c4:	20000420 	.word	0x20000420

080003c8 <spi_init>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_init() {
 80003c8:	b480      	push	{r7}
 80003ca:	b08b      	sub	sp, #44	; 0x2c
 80003cc:	af00      	add	r7, sp, #0
	/*enable peripherals clock*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	4b48      	ldr	r3, [pc, #288]	; (80004f4 <spi_init+0x12c>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a47      	ldr	r2, [pc, #284]	; (80004f4 <spi_init+0x12c>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
 80003de:	4b45      	ldr	r3, [pc, #276]	; (80004f4 <spi_init+0x12c>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	4b41      	ldr	r3, [pc, #260]	; (80004f4 <spi_init+0x12c>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a40      	ldr	r2, [pc, #256]	; (80004f4 <spi_init+0x12c>)
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
 80003fa:	4b3e      	ldr	r3, [pc, #248]	; (80004f4 <spi_init+0x12c>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	f003 0310 	and.w	r3, r3, #16
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	4b3a      	ldr	r3, [pc, #232]	; (80004f4 <spi_init+0x12c>)
 800040c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800040e:	4a39      	ldr	r2, [pc, #228]	; (80004f4 <spi_init+0x12c>)
 8000410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000414:	6453      	str	r3, [r2, #68]	; 0x44
 8000416:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <spi_init+0x12c>)
 8000418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800041a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]


	uint32_t volatile* const GPIOA_MODER  = (uint32_t*)(0x40020000 + 0x00);
 8000422:	4b35      	ldr	r3, [pc, #212]	; (80004f8 <spi_init+0x130>)
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t volatile* const GPIOA_AFLR	  = (uint32_t*)(0x40020000 + 0x20);
 8000426:	4b35      	ldr	r3, [pc, #212]	; (80004fc <spi_init+0x134>)
 8000428:	623b      	str	r3, [r7, #32]
	uint32_t volatile* const GPIOE_MODER  = (uint32_t*)(0x40021000 + 0x00);
 800042a:	4b35      	ldr	r3, [pc, #212]	; (8000500 <spi_init+0x138>)
 800042c:	61fb      	str	r3, [r7, #28]
	uint32_t volatile* const GPIOE_OTYPER = (uint32_t*)(0x40021000 + 0x04);
 800042e:	4b35      	ldr	r3, [pc, #212]	; (8000504 <spi_init+0x13c>)
 8000430:	61bb      	str	r3, [r7, #24]
	uint32_t volatile* const GPIOE_ODR	  = (uint32_t*)(0x40021000 + 0x14);
 8000432:	4b35      	ldr	r3, [pc, #212]	; (8000508 <spi_init+0x140>)
 8000434:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const SPI1_CR1	  = (uint32_t*)(0x40013000 + 0x00);
 8000436:	4b35      	ldr	r3, [pc, #212]	; (800050c <spi_init+0x144>)
 8000438:	613b      	str	r3, [r7, #16]

	/*PA5 PA6 PA7 as alternate function mode*/
	*GPIOA_MODER &= ~((0b10 << (2 * 5)) | (0b10 << (2 * 6)) | (0b10 << (2 * 7)));
 800043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f423 4228 	bic.w	r2, r3, #43008	; 0xa800
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |=   (0b10 << (2 * 5)) | (0b10 << (2 * 6)) | (0b10 << (2 * 7));
 8000446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f443 4228 	orr.w	r2, r3, #43008	; 0xa800
 800044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000450:	601a      	str	r2, [r3, #0]
	/*alternate function 5*/
	*GPIOA_AFLR  |= (5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7));
 8000452:	6a3b      	ldr	r3, [r7, #32]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800045a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800045e:	6a3a      	ldr	r2, [r7, #32]
 8000460:	6013      	str	r3, [r2, #0]

	/*PE3 as output mode*/
	*GPIOE_MODER  |= (0b01 << (2 * 3));
 8000462:	69fb      	ldr	r3, [r7, #28]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	601a      	str	r2, [r3, #0]
	*GPIOE_OTYPER &= ~(1 << 3);
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f023 0208 	bic.w	r2, r3, #8
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	601a      	str	r2, [r3, #0]
	*GPIOE_ODR    |= (1 << 3);
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f043 0208 	orr.w	r2, r3, #8
 8000482:	697b      	ldr	r3, [r7, #20]
 8000484:	601a      	str	r2, [r3, #0]

	/*spi baudrate = Fpclk/16*/
	*SPI1_CR1 |= (0b011 << 3);
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f043 0218 	orr.w	r2, r3, #24
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	601a      	str	r2, [r3, #0]

	/*clock pin mode 0*/
	*SPI1_CR1 |= (1 << 1);	//CPOL
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f043 0202 	orr.w	r2, r3, #2
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	601a      	str	r2, [r3, #0]
	*SPI1_CR1 |= (1 << 0);	//CPHA
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f043 0201 	orr.w	r2, r3, #1
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	601a      	str	r2, [r3, #0]

	/*spi master config*/
	*SPI1_CR1 |= (1 <<2 );
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f043 0204 	orr.w	r2, r3, #4
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	601a      	str	r2, [r3, #0]

	/*data frame: 8bit*/
	*SPI1_CR1 &= ~(1 << 11);
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	601a      	str	r2, [r3, #0]
	*SPI1_CR1 |= (1 << 11);
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	601a      	str	r2, [r3, #0]

	/*SS pin mode : software*/
	*SPI1_CR1 |= (1 << 8) |(1 << 9);
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	601a      	str	r2, [r3, #0]


	//*SPI1_CR1 |= (1 << 7);

	/*enable spi*/
	*SPI1_CR1 |= (1 << 6);
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	372c      	adds	r7, #44	; 0x2c
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40020000 	.word	0x40020000
 80004fc:	40020020 	.word	0x40020020
 8000500:	40021000 	.word	0x40021000
 8000504:	40021004 	.word	0x40021004
 8000508:	40021014 	.word	0x40021014
 800050c:	40013000 	.word	0x40013000

08000510 <spi_ss_enable>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_ss_enable() {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	uint32_t volatile* const GPIOE_ODR = (uint32_t*)(0x40021000 + 0x14);
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <spi_ss_enable+0x24>)
 8000518:	607b      	str	r3, [r7, #4]
	*GPIOE_ODR &= ~(1 << 3);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f023 0208 	bic.w	r2, r3, #8
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021014 	.word	0x40021014

08000538 <spi_ss_disable>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_ss_disable() {
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
	uint32_t volatile* const GPIOE_ODR = (uint32_t*)(0x40021000 + 0x14);
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <spi_ss_disable+0x24>)
 8000540:	607b      	str	r3, [r7, #4]
	*GPIOE_ODR |= (1 << 3);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f043 0208 	orr.w	r2, r3, #8
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	601a      	str	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021014 	.word	0x40021014

08000560 <spi_send_data>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
spi_send_data(uint8_t data) {
 8000560:	b480      	push	{r7}
 8000562:	b087      	sub	sp, #28
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	uint32_t volatile* const SPI1_SR   = (uint32_t*)(0x40013000 + 0x08);
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <spi_send_data+0x48>)
 800056c:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const SPI1_DR   = (uint32_t*)(0x40013000 + 0x0c);
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <spi_send_data+0x4c>)
 8000570:	613b      	str	r3, [r7, #16]
	uint8_t tmp;


	//check TXE
	while (0 == ((*SPI1_SR >> 1) & 1));
 8000572:	bf00      	nop
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	085b      	lsrs	r3, r3, #1
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f8      	beq.n	8000574 <spi_send_data+0x14>
	//send data
	*SPI1_DR = (uint32_t)data;
 8000582:	79fa      	ldrb	r2, [r7, #7]
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	601a      	str	r2, [r3, #0]
	//*SPI1_DR = ((uint32_t)data << 8)|0xFF;
	//check RXNE
	while (0 == ((*SPI1_SR >> 0) & 1));
 8000588:	bf00      	nop
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <spi_send_data+0x2a>
	//clear trash
	tmp = (uint8_t)*SPI1_DR;
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	73fb      	strb	r3, [r7, #15]
}
 800059c:	bf00      	nop
 800059e:	371c      	adds	r7, #28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40013008 	.word	0x40013008
 80005ac:	4001300c 	.word	0x4001300c

080005b0 <spi_receive_handler>:
 * \param[out]
 * \retval
 */
void
spi_receive_handler()
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
	uint32_t volatile *const SPI1_SR = (uint32_t *)(0x40013000 + 0x08);
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <spi_receive_handler+0x4c>)
 80005b8:	607b      	str	r3, [r7, #4]
	uint32_t volatile *const SPI1_DR = (uint32_t *)(0x40013000 + 0x0c);
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <spi_receive_handler+0x50>)
 80005bc:	603b      	str	r3, [r7, #0]

	/*read data*/
	rx_int_buffer[rx_index] = *SPI1_DR;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <spi_receive_handler+0x54>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	b2d1      	uxtb	r1, r2
 80005c8:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <spi_receive_handler+0x58>)
 80005ca:	54d1      	strb	r1, [r2, r3]
	rx_index++;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <spi_receive_handler+0x54>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <spi_receive_handler+0x54>)
 80005d4:	6013      	str	r3, [r2, #0]

	if (rx_index >= 128) {
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <spi_receive_handler+0x54>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b7f      	cmp	r3, #127	; 0x7f
 80005dc:	d902      	bls.n	80005e4 <spi_receive_handler+0x34>
		rx_index = 0;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <spi_receive_handler+0x54>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
	}

	/*clear RXNE*/
	*SPI1_SR &= ~(1 << 0);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f023 0201 	bic.w	r2, r3, #1
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	601a      	str	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40013008 	.word	0x40013008
 8000600:	4001300c 	.word	0x4001300c
 8000604:	200004ac 	.word	0x200004ac
 8000608:	2000042c 	.word	0x2000042c

0800060c <dma_transfer_handler>:
 * \param[in]
 * \param[out]
 * \retval
 */
void
dma_transfer_handler() {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
	uint32_t volatile *const DMA2_LIFCR    = (uint32_t *)(0x40026400 + 0x08);
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <dma_transfer_handler+0x24>)
 8000614:	607b      	str	r3, [r7, #4]

	/*handler*/
	__asm("NOP");
 8000616:	bf00      	nop

	/*clear stream 0 transfer complete interrupt flag*/
	*DMA2_LIFCR |= (1 << 5);	// bit CTCIF0
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f043 0220 	orr.w	r2, r3, #32
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40026408 	.word	0x40026408

08000634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <NMI_Handler+0x4>

0800063a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <HardFault_Handler+0x4>

08000640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <MemManage_Handler+0x4>

08000646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <UsageFault_Handler+0x4>

08000652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000680:	f000 f83e 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <SystemInit+0x20>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <SystemInit+0x20>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006b2:	490e      	ldr	r1, [pc, #56]	; (80006ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006c8:	4c0b      	ldr	r4, [pc, #44]	; (80006f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006d6:	f7ff ffd7 	bl	8000688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006da:	f000 f825 	bl	8000728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006de:	f7ff fd7b 	bl	80001d8 <main>
  bx  lr    
 80006e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000400 	.word	0x20000400
  ldr r1, =_edata
 80006ec:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 80006f0:	080007ac 	.word	0x080007ac
  ldr r2, =_sbss
 80006f4:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 80006f8:	200004b4 	.word	0x200004b4

080006fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_IncTick+0x20>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_IncTick+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_IncTick+0x24>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000400 	.word	0x20000400
 8000724:	200004b0 	.word	0x200004b0

08000728 <__libc_init_array>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	4d0d      	ldr	r5, [pc, #52]	; (8000760 <__libc_init_array+0x38>)
 800072c:	4c0d      	ldr	r4, [pc, #52]	; (8000764 <__libc_init_array+0x3c>)
 800072e:	1b64      	subs	r4, r4, r5
 8000730:	10a4      	asrs	r4, r4, #2
 8000732:	2600      	movs	r6, #0
 8000734:	42a6      	cmp	r6, r4
 8000736:	d109      	bne.n	800074c <__libc_init_array+0x24>
 8000738:	4d0b      	ldr	r5, [pc, #44]	; (8000768 <__libc_init_array+0x40>)
 800073a:	4c0c      	ldr	r4, [pc, #48]	; (800076c <__libc_init_array+0x44>)
 800073c:	f000 f826 	bl	800078c <_init>
 8000740:	1b64      	subs	r4, r4, r5
 8000742:	10a4      	asrs	r4, r4, #2
 8000744:	2600      	movs	r6, #0
 8000746:	42a6      	cmp	r6, r4
 8000748:	d105      	bne.n	8000756 <__libc_init_array+0x2e>
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000750:	4798      	blx	r3
 8000752:	3601      	adds	r6, #1
 8000754:	e7ee      	b.n	8000734 <__libc_init_array+0xc>
 8000756:	f855 3b04 	ldr.w	r3, [r5], #4
 800075a:	4798      	blx	r3
 800075c:	3601      	adds	r6, #1
 800075e:	e7f2      	b.n	8000746 <__libc_init_array+0x1e>
 8000760:	080007a4 	.word	0x080007a4
 8000764:	080007a4 	.word	0x080007a4
 8000768:	080007a4 	.word	0x080007a4
 800076c:	080007a8 	.word	0x080007a8

08000770 <memcpy>:
 8000770:	440a      	add	r2, r1
 8000772:	4291      	cmp	r1, r2
 8000774:	f100 33ff 	add.w	r3, r0, #4294967295
 8000778:	d100      	bne.n	800077c <memcpy+0xc>
 800077a:	4770      	bx	lr
 800077c:	b510      	push	{r4, lr}
 800077e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000786:	4291      	cmp	r1, r2
 8000788:	d1f9      	bne.n	800077e <memcpy+0xe>
 800078a:	bd10      	pop	{r4, pc}

0800078c <_init>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr

08000798 <_fini>:
 8000798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079a:	bf00      	nop
 800079c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079e:	bc08      	pop	{r3}
 80007a0:	469e      	mov	lr, r3
 80007a2:	4770      	bx	lr
