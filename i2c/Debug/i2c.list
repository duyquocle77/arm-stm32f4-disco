
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ad0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08001c70  08001c70  00011c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d24  08001d24  00020468  2**0
                  CONTENTS
  4 .ARM          00000000  08001d24  08001d24  00020468  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d24  08001d24  00020468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d24  08001d24  00011d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d28  08001d28  00011d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000400  08001d2c  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000468  08001d94  00020468  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08001d94  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f03  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000822  00000000  00000000  0002239b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b8  00000000  00000000  00022bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000250  00000000  00000000  00022e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015611  00000000  00000000  000230c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e1c  00000000  00000000  000386d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c70  00000000  00000000  0003c4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000129c  00000000  00000000  000c01b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000468 	.word	0x20000468
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001c58 	.word	0x08001c58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000046c 	.word	0x2000046c
 80001dc:	08001c58 	.word	0x08001c58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
 *\param[in]
 *\param[out]
 *\retval
 */
int
main() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
	vectortable_move();
 8000286:	f000 f88d 	bl	80003a4 <vectortable_move>
	tim_systick_init();
 800028a:	f000 f8a7 	bl	80003dc <tim_systick_init>
	i2c_init();
 800028e:	f000 f8c5 	bl	800041c <i2c_init>

	while (1) {
		//acc_id = i2c_read_data(ACC_ADDRESS_7BIT, 0x0F);
		//mag_id = i2c_read_data(MAG_ADDRESS_7BIT, 0x4F);

		i2c_write_data(ACC_ADDRESS_7BIT, 0x20, 0x57);
 8000292:	2257      	movs	r2, #87	; 0x57
 8000294:	2120      	movs	r1, #32
 8000296:	2019      	movs	r0, #25
 8000298:	f000 f9b4 	bl	8000604 <i2c_write_data>
		i2c_read_data(ACC_ADDRESS_7BIT, 0x20);
 800029c:	2120      	movs	r1, #32
 800029e:	2019      	movs	r0, #25
 80002a0:	f000 f932 	bl	8000508 <i2c_read_data>

		x_l = i2c_read_data(ACC_ADDRESS_7BIT, 0x28);
 80002a4:	2128      	movs	r1, #40	; 0x28
 80002a6:	2019      	movs	r0, #25
 80002a8:	f000 f92e 	bl	8000508 <i2c_read_data>
 80002ac:	4603      	mov	r3, r0
 80002ae:	461a      	mov	r2, r3
 80002b0:	4b31      	ldr	r3, [pc, #196]	; (8000378 <main+0xf8>)
 80002b2:	701a      	strb	r2, [r3, #0]
		x_h = i2c_read_data(ACC_ADDRESS_7BIT, 0x29);
 80002b4:	2129      	movs	r1, #41	; 0x29
 80002b6:	2019      	movs	r0, #25
 80002b8:	f000 f926 	bl	8000508 <i2c_read_data>
 80002bc:	4603      	mov	r3, r0
 80002be:	461a      	mov	r2, r3
 80002c0:	4b2e      	ldr	r3, [pc, #184]	; (800037c <main+0xfc>)
 80002c2:	701a      	strb	r2, [r3, #0]
		y_l = i2c_read_data(ACC_ADDRESS_7BIT, 0x2A);
 80002c4:	212a      	movs	r1, #42	; 0x2a
 80002c6:	2019      	movs	r0, #25
 80002c8:	f000 f91e 	bl	8000508 <i2c_read_data>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b2b      	ldr	r3, [pc, #172]	; (8000380 <main+0x100>)
 80002d2:	701a      	strb	r2, [r3, #0]
		y_h = i2c_read_data(ACC_ADDRESS_7BIT, 0x2B);
 80002d4:	212b      	movs	r1, #43	; 0x2b
 80002d6:	2019      	movs	r0, #25
 80002d8:	f000 f916 	bl	8000508 <i2c_read_data>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b28      	ldr	r3, [pc, #160]	; (8000384 <main+0x104>)
 80002e2:	701a      	strb	r2, [r3, #0]
		z_l = i2c_read_data(ACC_ADDRESS_7BIT, 0x2C);
 80002e4:	212c      	movs	r1, #44	; 0x2c
 80002e6:	2019      	movs	r0, #25
 80002e8:	f000 f90e 	bl	8000508 <i2c_read_data>
 80002ec:	4603      	mov	r3, r0
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <main+0x108>)
 80002f2:	701a      	strb	r2, [r3, #0]
		z_h = i2c_read_data(ACC_ADDRESS_7BIT, 0x2D);
 80002f4:	212d      	movs	r1, #45	; 0x2d
 80002f6:	2019      	movs	r0, #25
 80002f8:	f000 f906 	bl	8000508 <i2c_read_data>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	4b22      	ldr	r3, [pc, #136]	; (800038c <main+0x10c>)
 8000302:	701a      	strb	r2, [r3, #0]

		x = (x_h << 8) | x_l;
 8000304:	4b1d      	ldr	r3, [pc, #116]	; (800037c <main+0xfc>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	021b      	lsls	r3, r3, #8
 800030a:	b21a      	sxth	r2, r3
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <main+0xf8>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	b21b      	sxth	r3, r3
 8000312:	4313      	orrs	r3, r2
 8000314:	b21a      	sxth	r2, r3
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <main+0x110>)
 8000318:	801a      	strh	r2, [r3, #0]
		y = (y_h << 8) | y_l;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <main+0x104>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	b21a      	sxth	r2, r3
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <main+0x100>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b21b      	sxth	r3, r3
 8000328:	4313      	orrs	r3, r2
 800032a:	b21a      	sxth	r2, r3
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <main+0x114>)
 800032e:	801a      	strh	r2, [r3, #0]
		z = (z_h << 8) | z_l;
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <main+0x10c>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	021b      	lsls	r3, r3, #8
 8000336:	b21a      	sxth	r2, r3
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <main+0x108>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	b21b      	sxth	r3, r3
 800033e:	4313      	orrs	r3, r2
 8000340:	b21a      	sxth	r2, r3
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <main+0x118>)
 8000344:	801a      	strh	r2, [r3, #0]

		sprintf(data_buffer, "x = %d\t\ty = %d\t\tz = %d\t\t", x, y, z);
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <main+0x11c>)
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <main+0x110>)
 800034c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000350:	461a      	mov	r2, r3
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <main+0x114>)
 8000354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000358:	4619      	mov	r1, r3
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <main+0x118>)
 800035c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	460b      	mov	r3, r1
 8000364:	490e      	ldr	r1, [pc, #56]	; (80003a0 <main+0x120>)
 8000366:	f000 fb33 	bl	80009d0 <siprintf>
		printf(data_buffer);
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <main+0x11c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fb16 	bl	80009a0 <iprintf>
		i2c_write_data(ACC_ADDRESS_7BIT, 0x20, 0x57);
 8000374:	e78d      	b.n	8000292 <main+0x12>
 8000376:	bf00      	nop
 8000378:	20000485 	.word	0x20000485
 800037c:	20000484 	.word	0x20000484
 8000380:	20000487 	.word	0x20000487
 8000384:	20000486 	.word	0x20000486
 8000388:	20000489 	.word	0x20000489
 800038c:	20000488 	.word	0x20000488
 8000390:	2000048a 	.word	0x2000048a
 8000394:	2000048c 	.word	0x2000048c
 8000398:	2000048e 	.word	0x2000048e
 800039c:	20000490 	.word	0x20000490
 80003a0:	08001c70 	.word	0x08001c70

080003a4 <vectortable_move>:
 *\param[out]
 *\retval
 */
void
vectortable_move()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *volatile)0x20000000;
 80003aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80003ae:	60bb      	str	r3, [r7, #8]
	void *volatile flash = (void *volatile)0x08000000;
 80003b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b4:	607b      	str	r3, [r7, #4]
	memcpy(ram, flash, 0x198);
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	6879      	ldr	r1, [r7, #4]
 80003ba:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 fad8 	bl	8000974 <memcpy>

	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <vectortable_move+0x34>)
 80003c6:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80003ce:	601a      	str	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	e000ed08 	.word	0xe000ed08

080003dc <tim_systick_init>:
 *\param[out]
 *\retval
 */
void
tim_systick_init()
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
	uint32_t *SYS_CSR = (uint32_t *)(0xe000e010 + 0x00);
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <tim_systick_init+0x38>)
 80003e4:	607b      	str	r3, [r7, #4]
	uint32_t *SYS_RVR = (uint32_t *)(0xe000e010 + 0x00);
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <tim_systick_init+0x38>)
 80003e8:	603b      	str	r3, [r7, #0]

	/*clock source: processor clock*/
	*SYS_CSR |= (1 << 2);	// bit CLKSOURCE
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f043 0204 	orr.w	r2, r3, #4
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]

	/*set count*/
	*SYS_RVR = 160000 - 1;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	4a07      	ldr	r2, [pc, #28]	; (8000418 <tim_systick_init+0x3c>)
 80003fa:	601a      	str	r2, [r3, #0]

	/*enable the counter*/
	*SYS_CSR |= (1 << 0);	// bit ENABLE
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f043 0201 	orr.w	r2, r3, #1
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	601a      	str	r2, [r3, #0]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	e000e010 	.word	0xe000e010
 8000418:	000270ff 	.word	0x000270ff

0800041c <i2c_init>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
i2c_init() {
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
	/*enable peripherals clock*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <i2c_init+0xcc>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a2f      	ldr	r2, [pc, #188]	; (80004e8 <i2c_init+0xcc>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <i2c_init+0xcc>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_I2C1_CLK_ENABLE();
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <i2c_init+0xcc>)
 8000444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000446:	4a28      	ldr	r2, [pc, #160]	; (80004e8 <i2c_init+0xcc>)
 8000448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800044c:	6413      	str	r3, [r2, #64]	; 0x40
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <i2c_init+0xcc>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

	uint32_t volatile* const GPIOB_MODER  = (uint32_t*)(0x40020400 + 0x00);
 800045a:	4b24      	ldr	r3, [pc, #144]	; (80004ec <i2c_init+0xd0>)
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t volatile* const GPIOB_PUPDR  = (uint32_t*)(0x40020400 + 0x0c);
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <i2c_init+0xd4>)
 8000460:	623b      	str	r3, [r7, #32]
	uint32_t volatile* const GPIOB_AFLR	  = (uint32_t*)(0x40020400 + 0x20);
 8000462:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <i2c_init+0xd8>)
 8000464:	61fb      	str	r3, [r7, #28]
	uint32_t volatile* const GPIOB_AFHR	  = (uint32_t*)(0x40020400 + 0x24);
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <i2c_init+0xdc>)
 8000468:	61bb      	str	r3, [r7, #24]
	uint32_t volatile* const I2C1_CR1	  = (uint32_t*)(0x40005400 + 0x00);
 800046a:	4b24      	ldr	r3, [pc, #144]	; (80004fc <i2c_init+0xe0>)
 800046c:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const I2C1_CR2	  = (uint32_t*)(0x40005400 + 0x04);
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <i2c_init+0xe4>)
 8000470:	613b      	str	r3, [r7, #16]
	uint32_t volatile* const I2C1_CCR	  = (uint32_t*)(0x40005400 + 0x1c);
 8000472:	4b24      	ldr	r3, [pc, #144]	; (8000504 <i2c_init+0xe8>)
 8000474:	60fb      	str	r3, [r7, #12]

	/*PB6 PB9 as alternate function mode*/
	*GPIOB_MODER &= ~((0b11 << (2 * 6)) | (0b11 << (2 * 9)));
 8000476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f423 2243 	bic.w	r2, r3, #798720	; 0xc3000
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |=   (0b10 << (2 * 6)) | (0b10 << (2 * 9));
 8000482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f443 2202 	orr.w	r2, r3, #532480	; 0x82000
 800048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800048c:	601a      	str	r2, [r3, #0]

	*GPIOB_PUPDR |=   (0b01 << (2 * 6)) | (0b01 << (2 * 9));
 800048e:	6a3b      	ldr	r3, [r7, #32]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f443 2282 	orr.w	r2, r3, #266240	; 0x41000
 8000496:	6a3b      	ldr	r3, [r7, #32]
 8000498:	601a      	str	r2, [r3, #0]

	/*alternate function 4*/
	*GPIOB_AFLR  |= (4 << (4 * 6));
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	601a      	str	r2, [r3, #0]
	*GPIOB_AFHR  |= (4 << (4 * (9 - 8)));
 80004a6:	69bb      	ldr	r3, [r7, #24]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80004ae:	69bb      	ldr	r3, [r7, #24]
 80004b0:	601a      	str	r2, [r3, #0]

	/*disable i2c*/
	*I2C1_CR1 &= ~(1 << 0);
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f023 0201 	bic.w	r2, r3, #1
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	601a      	str	r2, [r3, #0]

	/*peripheral clock : 16 MHz*/
	*I2C1_CR2 |= (16 << 0);
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f043 0210 	orr.w	r2, r3, #16
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	601a      	str	r2, [r3, #0]

	/*prescale : 100 kHz*/
	*I2C1_CCR = 160;
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	22a0      	movs	r2, #160	; 0xa0
 80004ce:	601a      	str	r2, [r3, #0]

	/*enable i2c*/
	*I2C1_CR1 |= (1 << 0);
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	372c      	adds	r7, #44	; 0x2c
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40023800 	.word	0x40023800
 80004ec:	40020400 	.word	0x40020400
 80004f0:	4002040c 	.word	0x4002040c
 80004f4:	40020420 	.word	0x40020420
 80004f8:	40020424 	.word	0x40020424
 80004fc:	40005400 	.word	0x40005400
 8000500:	40005404 	.word	0x40005404
 8000504:	4000541c 	.word	0x4000541c

08000508 <i2c_read_data>:
 *\param[in]
 *\param[out]
 *\retval
 */
uint8_t
i2c_read_data(uint8_t SAD_7bit, uint8_t SUB) {
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	460a      	mov	r2, r1
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	4613      	mov	r3, r2
 8000516:	71bb      	strb	r3, [r7, #6]
	uint32_t volatile* const I2C1_CR1   = (uint32_t*)(0x40005400 + 0x00);
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <i2c_read_data+0xec>)
 800051a:	61fb      	str	r3, [r7, #28]
	uint32_t volatile* const I2C1_DR    = (uint32_t*)(0x40005400 + 0x10);
 800051c:	4b36      	ldr	r3, [pc, #216]	; (80005f8 <i2c_read_data+0xf0>)
 800051e:	61bb      	str	r3, [r7, #24]
	uint32_t volatile* const I2C1_SR1   = (uint32_t*)(0x40005400 + 0x14);
 8000520:	4b36      	ldr	r3, [pc, #216]	; (80005fc <i2c_read_data+0xf4>)
 8000522:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const I2C1_SR2   = (uint32_t*)(0x40005400 + 0x18);
 8000524:	4b36      	ldr	r3, [pc, #216]	; (8000600 <i2c_read_data+0xf8>)
 8000526:	613b      	str	r3, [r7, #16]
	uint8_t data;

	SAD_7bit = SAD_7bit << 1;
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]

	/*wait BUSY flag*/
	while (((*I2C1_SR2 >> 1) & 1) == 1);
 800052e:	bf00      	nop
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	085b      	lsrs	r3, r3, #1
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	2b01      	cmp	r3, #1
 800053c:	d0f8      	beq.n	8000530 <i2c_read_data+0x28>

	/*START condition*/
	*I2C1_CR1 |= (1 << 8);
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	601a      	str	r2, [r3, #0]

	/*wait start bit generate*/
	while (((*I2C1_SR1 >> 0) & 1) == 0);
 800054a:	bf00      	nop
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f9      	beq.n	800054c <i2c_read_data+0x44>
	/*send slave address - write mode*/
	*I2C1_DR = SAD_7bit | 0;
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	601a      	str	r2, [r3, #0]
	/*wait ADĐR bit*/
	while (((*I2C1_SR1 >> 1) & 1) == 0);
 800055e:	bf00      	nop
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	085b      	lsrs	r3, r3, #1
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f8      	beq.n	8000560 <i2c_read_data+0x58>
	/*clear ADDR flag*/
	(void)*(I2C1_SR2);
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	681b      	ldr	r3, [r3, #0]

	/*send register address*/
	*I2C1_DR = SUB;
 8000572:	79ba      	ldrb	r2, [r7, #6]
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	601a      	str	r2, [r3, #0]
	/*wait tranfer finish*/
	while (((*I2C1_SR1 >> 2) & 1) == 0);
 8000578:	bf00      	nop
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f8      	beq.n	800057a <i2c_read_data+0x72>
	/*wait ACK bit*/
	while (((*I2C1_SR1 >> 10) & 1) == 1);
 8000588:	bf00      	nop
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	0a9b      	lsrs	r3, r3, #10
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b01      	cmp	r3, #1
 8000596:	d0f8      	beq.n	800058a <i2c_read_data+0x82>

	/*Re-START condition*/
	*I2C1_CR1 |= (1 << 8);
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	601a      	str	r2, [r3, #0]

	/*wait start bit generate*/
	while (((*I2C1_SR1 >> 0) & 1) == 0);
 80005a4:	bf00      	nop
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <i2c_read_data+0x9e>
	/*send slave address - read mode*/
	*I2C1_DR = SAD_7bit | 1;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	601a      	str	r2, [r3, #0]
	/*wait ADĐR bit*/
	while (((*I2C1_SR1 >> 1) & 1) == 0);
 80005c0:	bf00      	nop
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	085b      	lsrs	r3, r3, #1
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f8      	beq.n	80005c2 <i2c_read_data+0xba>
	/*clear ADDR flag*/
	(void)*(I2C1_SR2);
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	681b      	ldr	r3, [r3, #0]

	/*read data*/
	data = *I2C1_DR;
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	73fb      	strb	r3, [r7, #15]

	/*STOP bit*/
	*I2C1_CR1 |= (1 << 9);
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	601a      	str	r2, [r3, #0]

	return data;
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3724      	adds	r7, #36	; 0x24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	40005400 	.word	0x40005400
 80005f8:	40005410 	.word	0x40005410
 80005fc:	40005414 	.word	0x40005414
 8000600:	40005418 	.word	0x40005418

08000604 <i2c_write_data>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
i2c_write_data(uint8_t SAD_7bit, uint8_t SUB, uint8_t data) {
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	460b      	mov	r3, r1
 8000610:	71bb      	strb	r3, [r7, #6]
 8000612:	4613      	mov	r3, r2
 8000614:	717b      	strb	r3, [r7, #5]
	uint32_t volatile* const I2C1_CR1   = (uint32_t*)(0x40005400 + 0x00);
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <i2c_write_data+0xd0>)
 8000618:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const I2C1_DR    = (uint32_t*)(0x40005400 + 0x10);
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <i2c_write_data+0xd4>)
 800061c:	613b      	str	r3, [r7, #16]
	uint32_t volatile* const I2C1_SR1   = (uint32_t*)(0x40005400 + 0x14);
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <i2c_write_data+0xd8>)
 8000620:	60fb      	str	r3, [r7, #12]
	uint32_t volatile* const I2C1_SR2   = (uint32_t*)(0x40005400 + 0x18);
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <i2c_write_data+0xdc>)
 8000624:	60bb      	str	r3, [r7, #8]

	SAD_7bit = SAD_7bit << 1;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]

	/*wait BUSY flag*/
	while (((*I2C1_SR2 >> 1) & 1) == 1);
 800062c:	bf00      	nop
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	085b      	lsrs	r3, r3, #1
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	2b01      	cmp	r3, #1
 800063a:	d0f8      	beq.n	800062e <i2c_write_data+0x2a>

	/*START condition*/
	*I2C1_CR1 |= (1 << 8);
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	601a      	str	r2, [r3, #0]

	/*wait start bit generate*/
	while (((*I2C1_SR1 >> 0) & 1) == 0);
 8000648:	bf00      	nop
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f9      	beq.n	800064a <i2c_write_data+0x46>
	/*send slave address - write mode*/
	*I2C1_DR = SAD_7bit | 0;
 8000656:	79fa      	ldrb	r2, [r7, #7]
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	601a      	str	r2, [r3, #0]
	/*wait ADĐR bit*/
	while (((*I2C1_SR1 >> 1) & 1) == 0);
 800065c:	bf00      	nop
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	085b      	lsrs	r3, r3, #1
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0f8      	beq.n	800065e <i2c_write_data+0x5a>
	/*clear ADDR flag*/
	(void)*(I2C1_SR2);
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	681b      	ldr	r3, [r3, #0]

	/*send register address*/
	*I2C1_DR = SUB;
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	601a      	str	r2, [r3, #0]
	/*wait tranfer finish*/
	while (((*I2C1_SR1 >> 2) & 1) == 0);
 8000676:	bf00      	nop
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	089b      	lsrs	r3, r3, #2
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f8      	beq.n	8000678 <i2c_write_data+0x74>
	/*wait ACK bit*/
	while (((*I2C1_SR1 >> 10) & 1) == 1);
 8000686:	bf00      	nop
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	0a9b      	lsrs	r3, r3, #10
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	2b01      	cmp	r3, #1
 8000694:	d0f8      	beq.n	8000688 <i2c_write_data+0x84>

	/*write data*/
	*I2C1_DR = data;
 8000696:	797a      	ldrb	r2, [r7, #5]
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	601a      	str	r2, [r3, #0]
	/*wait tranfer finish*/
	while (((*I2C1_SR1 >> 2) & 1) == 0);
 800069c:	bf00      	nop
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f8      	beq.n	800069e <i2c_write_data+0x9a>
	/*wait ACK bit*/
	while (((*I2C1_SR1 >> 10) & 1) == 1);
 80006ac:	bf00      	nop
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	0a9b      	lsrs	r3, r3, #10
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d0f8      	beq.n	80006ae <i2c_write_data+0xaa>

	/*STOP bit*/
	*I2C1_CR1 |= (1 << 9);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	371c      	adds	r7, #28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40005400 	.word	0x40005400
 80006d8:	40005410 	.word	0x40005410
 80006dc:	40005414 	.word	0x40005414
 80006e0:	40005418 	.word	0x40005418

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f8e2 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e00a      	b.n	8000760 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800074a:	f3af 8000 	nop.w
 800074e:	4601      	mov	r1, r0
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	60ba      	str	r2, [r7, #8]
 8000756:	b2ca      	uxtb	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	429a      	cmp	r2, r3
 8000766:	dbf0      	blt.n	800074a <_read+0x12>
	}

return len;
 8000768:	687b      	ldr	r3, [r7, #4]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	60f8      	str	r0, [r7, #12]
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	e009      	b.n	8000798 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	60ba      	str	r2, [r7, #8]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbf1      	blt.n	8000784 <_write+0x12>
	}
	return len;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_close>:

int _close(int file)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	return -1;
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d2:	605a      	str	r2, [r3, #4]
	return 0;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <_isatty>:

int _isatty(int file)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
	return 1;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
	return 0;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f000 f86c 	bl	8000920 <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20020000 	.word	0x20020000
 8000874:	00000400 	.word	0x00000400
 8000878:	20000494 	.word	0x20000494
 800087c:	200004b0 	.word	0x200004b0

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008aa:	490e      	ldr	r1, [pc, #56]	; (80008e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c0:	4c0b      	ldr	r4, [pc, #44]	; (80008f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ce:	f7ff ffd7 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f000 f82b 	bl	800092c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fcd3 	bl	8000280 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000400 	.word	0x20000400
  ldr r1, =_edata
 80008e4:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80008e8:	08001d2c 	.word	0x08001d2c
  ldr r2, =_sbss
 80008ec:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80008f0:	200004ac 	.word	0x200004ac

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_IncTick+0x20>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_IncTick+0x24>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_IncTick+0x24>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000400 	.word	0x20000400
 800091c:	20000498 	.word	0x20000498

08000920 <__errno>:
 8000920:	4b01      	ldr	r3, [pc, #4]	; (8000928 <__errno+0x8>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000404 	.word	0x20000404

0800092c <__libc_init_array>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4d0d      	ldr	r5, [pc, #52]	; (8000964 <__libc_init_array+0x38>)
 8000930:	4c0d      	ldr	r4, [pc, #52]	; (8000968 <__libc_init_array+0x3c>)
 8000932:	1b64      	subs	r4, r4, r5
 8000934:	10a4      	asrs	r4, r4, #2
 8000936:	2600      	movs	r6, #0
 8000938:	42a6      	cmp	r6, r4
 800093a:	d109      	bne.n	8000950 <__libc_init_array+0x24>
 800093c:	4d0b      	ldr	r5, [pc, #44]	; (800096c <__libc_init_array+0x40>)
 800093e:	4c0c      	ldr	r4, [pc, #48]	; (8000970 <__libc_init_array+0x44>)
 8000940:	f001 f98a 	bl	8001c58 <_init>
 8000944:	1b64      	subs	r4, r4, r5
 8000946:	10a4      	asrs	r4, r4, #2
 8000948:	2600      	movs	r6, #0
 800094a:	42a6      	cmp	r6, r4
 800094c:	d105      	bne.n	800095a <__libc_init_array+0x2e>
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f855 3b04 	ldr.w	r3, [r5], #4
 8000954:	4798      	blx	r3
 8000956:	3601      	adds	r6, #1
 8000958:	e7ee      	b.n	8000938 <__libc_init_array+0xc>
 800095a:	f855 3b04 	ldr.w	r3, [r5], #4
 800095e:	4798      	blx	r3
 8000960:	3601      	adds	r6, #1
 8000962:	e7f2      	b.n	800094a <__libc_init_array+0x1e>
 8000964:	08001d24 	.word	0x08001d24
 8000968:	08001d24 	.word	0x08001d24
 800096c:	08001d24 	.word	0x08001d24
 8000970:	08001d28 	.word	0x08001d28

08000974 <memcpy>:
 8000974:	440a      	add	r2, r1
 8000976:	4291      	cmp	r1, r2
 8000978:	f100 33ff 	add.w	r3, r0, #4294967295
 800097c:	d100      	bne.n	8000980 <memcpy+0xc>
 800097e:	4770      	bx	lr
 8000980:	b510      	push	{r4, lr}
 8000982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800098a:	4291      	cmp	r1, r2
 800098c:	d1f9      	bne.n	8000982 <memcpy+0xe>
 800098e:	bd10      	pop	{r4, pc}

08000990 <memset>:
 8000990:	4402      	add	r2, r0
 8000992:	4603      	mov	r3, r0
 8000994:	4293      	cmp	r3, r2
 8000996:	d100      	bne.n	800099a <memset+0xa>
 8000998:	4770      	bx	lr
 800099a:	f803 1b01 	strb.w	r1, [r3], #1
 800099e:	e7f9      	b.n	8000994 <memset+0x4>

080009a0 <iprintf>:
 80009a0:	b40f      	push	{r0, r1, r2, r3}
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <iprintf+0x2c>)
 80009a4:	b513      	push	{r0, r1, r4, lr}
 80009a6:	681c      	ldr	r4, [r3, #0]
 80009a8:	b124      	cbz	r4, 80009b4 <iprintf+0x14>
 80009aa:	69a3      	ldr	r3, [r4, #24]
 80009ac:	b913      	cbnz	r3, 80009b4 <iprintf+0x14>
 80009ae:	4620      	mov	r0, r4
 80009b0:	f000 f886 	bl	8000ac0 <__sinit>
 80009b4:	ab05      	add	r3, sp, #20
 80009b6:	9a04      	ldr	r2, [sp, #16]
 80009b8:	68a1      	ldr	r1, [r4, #8]
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	4620      	mov	r0, r4
 80009be:	f000 fb39 	bl	8001034 <_vfiprintf_r>
 80009c2:	b002      	add	sp, #8
 80009c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr
 80009cc:	20000404 	.word	0x20000404

080009d0 <siprintf>:
 80009d0:	b40e      	push	{r1, r2, r3}
 80009d2:	b500      	push	{lr}
 80009d4:	b09c      	sub	sp, #112	; 0x70
 80009d6:	ab1d      	add	r3, sp, #116	; 0x74
 80009d8:	9002      	str	r0, [sp, #8]
 80009da:	9006      	str	r0, [sp, #24]
 80009dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <siprintf+0x38>)
 80009e2:	9107      	str	r1, [sp, #28]
 80009e4:	9104      	str	r1, [sp, #16]
 80009e6:	4909      	ldr	r1, [pc, #36]	; (8000a0c <siprintf+0x3c>)
 80009e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80009ec:	9105      	str	r1, [sp, #20]
 80009ee:	6800      	ldr	r0, [r0, #0]
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	a902      	add	r1, sp, #8
 80009f4:	f000 f9f4 	bl	8000de0 <_svfiprintf_r>
 80009f8:	9b02      	ldr	r3, [sp, #8]
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	b01c      	add	sp, #112	; 0x70
 8000a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a04:	b003      	add	sp, #12
 8000a06:	4770      	bx	lr
 8000a08:	20000404 	.word	0x20000404
 8000a0c:	ffff0208 	.word	0xffff0208

08000a10 <std>:
 8000a10:	2300      	movs	r3, #0
 8000a12:	b510      	push	{r4, lr}
 8000a14:	4604      	mov	r4, r0
 8000a16:	e9c0 3300 	strd	r3, r3, [r0]
 8000a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a1e:	6083      	str	r3, [r0, #8]
 8000a20:	8181      	strh	r1, [r0, #12]
 8000a22:	6643      	str	r3, [r0, #100]	; 0x64
 8000a24:	81c2      	strh	r2, [r0, #14]
 8000a26:	6183      	str	r3, [r0, #24]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	305c      	adds	r0, #92	; 0x5c
 8000a2e:	f7ff ffaf 	bl	8000990 <memset>
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <std+0x38>)
 8000a34:	6263      	str	r3, [r4, #36]	; 0x24
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <std+0x3c>)
 8000a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <std+0x40>)
 8000a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <std+0x44>)
 8000a40:	6224      	str	r4, [r4, #32]
 8000a42:	6323      	str	r3, [r4, #48]	; 0x30
 8000a44:	bd10      	pop	{r4, pc}
 8000a46:	bf00      	nop
 8000a48:	080015dd 	.word	0x080015dd
 8000a4c:	080015ff 	.word	0x080015ff
 8000a50:	08001637 	.word	0x08001637
 8000a54:	0800165b 	.word	0x0800165b

08000a58 <_cleanup_r>:
 8000a58:	4901      	ldr	r1, [pc, #4]	; (8000a60 <_cleanup_r+0x8>)
 8000a5a:	f000 b8af 	b.w	8000bbc <_fwalk_reent>
 8000a5e:	bf00      	nop
 8000a60:	08001935 	.word	0x08001935

08000a64 <__sfmoreglue>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	2268      	movs	r2, #104	; 0x68
 8000a68:	1e4d      	subs	r5, r1, #1
 8000a6a:	4355      	muls	r5, r2
 8000a6c:	460e      	mov	r6, r1
 8000a6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a72:	f000 f8e5 	bl	8000c40 <_malloc_r>
 8000a76:	4604      	mov	r4, r0
 8000a78:	b140      	cbz	r0, 8000a8c <__sfmoreglue+0x28>
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	e9c0 1600 	strd	r1, r6, [r0]
 8000a80:	300c      	adds	r0, #12
 8000a82:	60a0      	str	r0, [r4, #8]
 8000a84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a88:	f7ff ff82 	bl	8000990 <memset>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}

08000a90 <__sfp_lock_acquire>:
 8000a90:	4801      	ldr	r0, [pc, #4]	; (8000a98 <__sfp_lock_acquire+0x8>)
 8000a92:	f000 b8b3 	b.w	8000bfc <__retarget_lock_acquire_recursive>
 8000a96:	bf00      	nop
 8000a98:	2000049d 	.word	0x2000049d

08000a9c <__sfp_lock_release>:
 8000a9c:	4801      	ldr	r0, [pc, #4]	; (8000aa4 <__sfp_lock_release+0x8>)
 8000a9e:	f000 b8ae 	b.w	8000bfe <__retarget_lock_release_recursive>
 8000aa2:	bf00      	nop
 8000aa4:	2000049d 	.word	0x2000049d

08000aa8 <__sinit_lock_acquire>:
 8000aa8:	4801      	ldr	r0, [pc, #4]	; (8000ab0 <__sinit_lock_acquire+0x8>)
 8000aaa:	f000 b8a7 	b.w	8000bfc <__retarget_lock_acquire_recursive>
 8000aae:	bf00      	nop
 8000ab0:	2000049e 	.word	0x2000049e

08000ab4 <__sinit_lock_release>:
 8000ab4:	4801      	ldr	r0, [pc, #4]	; (8000abc <__sinit_lock_release+0x8>)
 8000ab6:	f000 b8a2 	b.w	8000bfe <__retarget_lock_release_recursive>
 8000aba:	bf00      	nop
 8000abc:	2000049e 	.word	0x2000049e

08000ac0 <__sinit>:
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	f7ff fff0 	bl	8000aa8 <__sinit_lock_acquire>
 8000ac8:	69a3      	ldr	r3, [r4, #24]
 8000aca:	b11b      	cbz	r3, 8000ad4 <__sinit+0x14>
 8000acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ad0:	f7ff bff0 	b.w	8000ab4 <__sinit_lock_release>
 8000ad4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ad8:	6523      	str	r3, [r4, #80]	; 0x50
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <__sinit+0x68>)
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <__sinit+0x6c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	bf04      	itt	eq
 8000ae6:	2301      	moveq	r3, #1
 8000ae8:	61a3      	streq	r3, [r4, #24]
 8000aea:	4620      	mov	r0, r4
 8000aec:	f000 f820 	bl	8000b30 <__sfp>
 8000af0:	6060      	str	r0, [r4, #4]
 8000af2:	4620      	mov	r0, r4
 8000af4:	f000 f81c 	bl	8000b30 <__sfp>
 8000af8:	60a0      	str	r0, [r4, #8]
 8000afa:	4620      	mov	r0, r4
 8000afc:	f000 f818 	bl	8000b30 <__sfp>
 8000b00:	2200      	movs	r2, #0
 8000b02:	60e0      	str	r0, [r4, #12]
 8000b04:	2104      	movs	r1, #4
 8000b06:	6860      	ldr	r0, [r4, #4]
 8000b08:	f7ff ff82 	bl	8000a10 <std>
 8000b0c:	68a0      	ldr	r0, [r4, #8]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2109      	movs	r1, #9
 8000b12:	f7ff ff7d 	bl	8000a10 <std>
 8000b16:	68e0      	ldr	r0, [r4, #12]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	2112      	movs	r1, #18
 8000b1c:	f7ff ff78 	bl	8000a10 <std>
 8000b20:	2301      	movs	r3, #1
 8000b22:	61a3      	str	r3, [r4, #24]
 8000b24:	e7d2      	b.n	8000acc <__sinit+0xc>
 8000b26:	bf00      	nop
 8000b28:	08001c8c 	.word	0x08001c8c
 8000b2c:	08000a59 	.word	0x08000a59

08000b30 <__sfp>:
 8000b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b32:	4607      	mov	r7, r0
 8000b34:	f7ff ffac 	bl	8000a90 <__sfp_lock_acquire>
 8000b38:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <__sfp+0x84>)
 8000b3a:	681e      	ldr	r6, [r3, #0]
 8000b3c:	69b3      	ldr	r3, [r6, #24]
 8000b3e:	b913      	cbnz	r3, 8000b46 <__sfp+0x16>
 8000b40:	4630      	mov	r0, r6
 8000b42:	f7ff ffbd 	bl	8000ac0 <__sinit>
 8000b46:	3648      	adds	r6, #72	; 0x48
 8000b48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	d503      	bpl.n	8000b58 <__sfp+0x28>
 8000b50:	6833      	ldr	r3, [r6, #0]
 8000b52:	b30b      	cbz	r3, 8000b98 <__sfp+0x68>
 8000b54:	6836      	ldr	r6, [r6, #0]
 8000b56:	e7f7      	b.n	8000b48 <__sfp+0x18>
 8000b58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b5c:	b9d5      	cbnz	r5, 8000b94 <__sfp+0x64>
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <__sfp+0x88>)
 8000b60:	60e3      	str	r3, [r4, #12]
 8000b62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b66:	6665      	str	r5, [r4, #100]	; 0x64
 8000b68:	f000 f847 	bl	8000bfa <__retarget_lock_init_recursive>
 8000b6c:	f7ff ff96 	bl	8000a9c <__sfp_lock_release>
 8000b70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b78:	6025      	str	r5, [r4, #0]
 8000b7a:	61a5      	str	r5, [r4, #24]
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	4629      	mov	r1, r5
 8000b80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b84:	f7ff ff04 	bl	8000990 <memset>
 8000b88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b90:	4620      	mov	r0, r4
 8000b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b94:	3468      	adds	r4, #104	; 0x68
 8000b96:	e7d9      	b.n	8000b4c <__sfp+0x1c>
 8000b98:	2104      	movs	r1, #4
 8000b9a:	4638      	mov	r0, r7
 8000b9c:	f7ff ff62 	bl	8000a64 <__sfmoreglue>
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	6030      	str	r0, [r6, #0]
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d1d5      	bne.n	8000b54 <__sfp+0x24>
 8000ba8:	f7ff ff78 	bl	8000a9c <__sfp_lock_release>
 8000bac:	230c      	movs	r3, #12
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	e7ee      	b.n	8000b90 <__sfp+0x60>
 8000bb2:	bf00      	nop
 8000bb4:	08001c8c 	.word	0x08001c8c
 8000bb8:	ffff0001 	.word	0xffff0001

08000bbc <_fwalk_reent>:
 8000bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bc0:	4606      	mov	r6, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bce:	f1b9 0901 	subs.w	r9, r9, #1
 8000bd2:	d505      	bpl.n	8000be0 <_fwalk_reent+0x24>
 8000bd4:	6824      	ldr	r4, [r4, #0]
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d1f7      	bne.n	8000bca <_fwalk_reent+0xe>
 8000bda:	4638      	mov	r0, r7
 8000bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000be0:	89ab      	ldrh	r3, [r5, #12]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d907      	bls.n	8000bf6 <_fwalk_reent+0x3a>
 8000be6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bea:	3301      	adds	r3, #1
 8000bec:	d003      	beq.n	8000bf6 <_fwalk_reent+0x3a>
 8000bee:	4629      	mov	r1, r5
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	47c0      	blx	r8
 8000bf4:	4307      	orrs	r7, r0
 8000bf6:	3568      	adds	r5, #104	; 0x68
 8000bf8:	e7e9      	b.n	8000bce <_fwalk_reent+0x12>

08000bfa <__retarget_lock_init_recursive>:
 8000bfa:	4770      	bx	lr

08000bfc <__retarget_lock_acquire_recursive>:
 8000bfc:	4770      	bx	lr

08000bfe <__retarget_lock_release_recursive>:
 8000bfe:	4770      	bx	lr

08000c00 <sbrk_aligned>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	4e0e      	ldr	r6, [pc, #56]	; (8000c3c <sbrk_aligned+0x3c>)
 8000c04:	460c      	mov	r4, r1
 8000c06:	6831      	ldr	r1, [r6, #0]
 8000c08:	4605      	mov	r5, r0
 8000c0a:	b911      	cbnz	r1, 8000c12 <sbrk_aligned+0x12>
 8000c0c:	f000 fcd6 	bl	80015bc <_sbrk_r>
 8000c10:	6030      	str	r0, [r6, #0]
 8000c12:	4621      	mov	r1, r4
 8000c14:	4628      	mov	r0, r5
 8000c16:	f000 fcd1 	bl	80015bc <_sbrk_r>
 8000c1a:	1c43      	adds	r3, r0, #1
 8000c1c:	d00a      	beq.n	8000c34 <sbrk_aligned+0x34>
 8000c1e:	1cc4      	adds	r4, r0, #3
 8000c20:	f024 0403 	bic.w	r4, r4, #3
 8000c24:	42a0      	cmp	r0, r4
 8000c26:	d007      	beq.n	8000c38 <sbrk_aligned+0x38>
 8000c28:	1a21      	subs	r1, r4, r0
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	f000 fcc6 	bl	80015bc <_sbrk_r>
 8000c30:	3001      	adds	r0, #1
 8000c32:	d101      	bne.n	8000c38 <sbrk_aligned+0x38>
 8000c34:	f04f 34ff 	mov.w	r4, #4294967295
 8000c38:	4620      	mov	r0, r4
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	200004a4 	.word	0x200004a4

08000c40 <_malloc_r>:
 8000c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c44:	1ccd      	adds	r5, r1, #3
 8000c46:	f025 0503 	bic.w	r5, r5, #3
 8000c4a:	3508      	adds	r5, #8
 8000c4c:	2d0c      	cmp	r5, #12
 8000c4e:	bf38      	it	cc
 8000c50:	250c      	movcc	r5, #12
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	4607      	mov	r7, r0
 8000c56:	db01      	blt.n	8000c5c <_malloc_r+0x1c>
 8000c58:	42a9      	cmp	r1, r5
 8000c5a:	d905      	bls.n	8000c68 <_malloc_r+0x28>
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	2600      	movs	r6, #0
 8000c62:	4630      	mov	r0, r6
 8000c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c68:	4e2e      	ldr	r6, [pc, #184]	; (8000d24 <_malloc_r+0xe4>)
 8000c6a:	f000 ff31 	bl	8001ad0 <__malloc_lock>
 8000c6e:	6833      	ldr	r3, [r6, #0]
 8000c70:	461c      	mov	r4, r3
 8000c72:	bb34      	cbnz	r4, 8000cc2 <_malloc_r+0x82>
 8000c74:	4629      	mov	r1, r5
 8000c76:	4638      	mov	r0, r7
 8000c78:	f7ff ffc2 	bl	8000c00 <sbrk_aligned>
 8000c7c:	1c43      	adds	r3, r0, #1
 8000c7e:	4604      	mov	r4, r0
 8000c80:	d14d      	bne.n	8000d1e <_malloc_r+0xde>
 8000c82:	6834      	ldr	r4, [r6, #0]
 8000c84:	4626      	mov	r6, r4
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d140      	bne.n	8000d0c <_malloc_r+0xcc>
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	4638      	mov	r0, r7
 8000c90:	eb04 0803 	add.w	r8, r4, r3
 8000c94:	f000 fc92 	bl	80015bc <_sbrk_r>
 8000c98:	4580      	cmp	r8, r0
 8000c9a:	d13a      	bne.n	8000d12 <_malloc_r+0xd2>
 8000c9c:	6821      	ldr	r1, [r4, #0]
 8000c9e:	3503      	adds	r5, #3
 8000ca0:	1a6d      	subs	r5, r5, r1
 8000ca2:	f025 0503 	bic.w	r5, r5, #3
 8000ca6:	3508      	adds	r5, #8
 8000ca8:	2d0c      	cmp	r5, #12
 8000caa:	bf38      	it	cc
 8000cac:	250c      	movcc	r5, #12
 8000cae:	4629      	mov	r1, r5
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	f7ff ffa5 	bl	8000c00 <sbrk_aligned>
 8000cb6:	3001      	adds	r0, #1
 8000cb8:	d02b      	beq.n	8000d12 <_malloc_r+0xd2>
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	442b      	add	r3, r5
 8000cbe:	6023      	str	r3, [r4, #0]
 8000cc0:	e00e      	b.n	8000ce0 <_malloc_r+0xa0>
 8000cc2:	6822      	ldr	r2, [r4, #0]
 8000cc4:	1b52      	subs	r2, r2, r5
 8000cc6:	d41e      	bmi.n	8000d06 <_malloc_r+0xc6>
 8000cc8:	2a0b      	cmp	r2, #11
 8000cca:	d916      	bls.n	8000cfa <_malloc_r+0xba>
 8000ccc:	1961      	adds	r1, r4, r5
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	6025      	str	r5, [r4, #0]
 8000cd2:	bf18      	it	ne
 8000cd4:	6059      	strne	r1, [r3, #4]
 8000cd6:	6863      	ldr	r3, [r4, #4]
 8000cd8:	bf08      	it	eq
 8000cda:	6031      	streq	r1, [r6, #0]
 8000cdc:	5162      	str	r2, [r4, r5]
 8000cde:	604b      	str	r3, [r1, #4]
 8000ce0:	4638      	mov	r0, r7
 8000ce2:	f104 060b 	add.w	r6, r4, #11
 8000ce6:	f000 fef9 	bl	8001adc <__malloc_unlock>
 8000cea:	f026 0607 	bic.w	r6, r6, #7
 8000cee:	1d23      	adds	r3, r4, #4
 8000cf0:	1af2      	subs	r2, r6, r3
 8000cf2:	d0b6      	beq.n	8000c62 <_malloc_r+0x22>
 8000cf4:	1b9b      	subs	r3, r3, r6
 8000cf6:	50a3      	str	r3, [r4, r2]
 8000cf8:	e7b3      	b.n	8000c62 <_malloc_r+0x22>
 8000cfa:	6862      	ldr	r2, [r4, #4]
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	bf0c      	ite	eq
 8000d00:	6032      	streq	r2, [r6, #0]
 8000d02:	605a      	strne	r2, [r3, #4]
 8000d04:	e7ec      	b.n	8000ce0 <_malloc_r+0xa0>
 8000d06:	4623      	mov	r3, r4
 8000d08:	6864      	ldr	r4, [r4, #4]
 8000d0a:	e7b2      	b.n	8000c72 <_malloc_r+0x32>
 8000d0c:	4634      	mov	r4, r6
 8000d0e:	6876      	ldr	r6, [r6, #4]
 8000d10:	e7b9      	b.n	8000c86 <_malloc_r+0x46>
 8000d12:	230c      	movs	r3, #12
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4638      	mov	r0, r7
 8000d18:	f000 fee0 	bl	8001adc <__malloc_unlock>
 8000d1c:	e7a1      	b.n	8000c62 <_malloc_r+0x22>
 8000d1e:	6025      	str	r5, [r4, #0]
 8000d20:	e7de      	b.n	8000ce0 <_malloc_r+0xa0>
 8000d22:	bf00      	nop
 8000d24:	200004a0 	.word	0x200004a0

08000d28 <__ssputs_r>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	688e      	ldr	r6, [r1, #8]
 8000d2e:	429e      	cmp	r6, r3
 8000d30:	4682      	mov	sl, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	4690      	mov	r8, r2
 8000d36:	461f      	mov	r7, r3
 8000d38:	d838      	bhi.n	8000dac <__ssputs_r+0x84>
 8000d3a:	898a      	ldrh	r2, [r1, #12]
 8000d3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d40:	d032      	beq.n	8000da8 <__ssputs_r+0x80>
 8000d42:	6825      	ldr	r5, [r4, #0]
 8000d44:	6909      	ldr	r1, [r1, #16]
 8000d46:	eba5 0901 	sub.w	r9, r5, r1
 8000d4a:	6965      	ldr	r5, [r4, #20]
 8000d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d54:	3301      	adds	r3, #1
 8000d56:	444b      	add	r3, r9
 8000d58:	106d      	asrs	r5, r5, #1
 8000d5a:	429d      	cmp	r5, r3
 8000d5c:	bf38      	it	cc
 8000d5e:	461d      	movcc	r5, r3
 8000d60:	0553      	lsls	r3, r2, #21
 8000d62:	d531      	bpl.n	8000dc8 <__ssputs_r+0xa0>
 8000d64:	4629      	mov	r1, r5
 8000d66:	f7ff ff6b 	bl	8000c40 <_malloc_r>
 8000d6a:	4606      	mov	r6, r0
 8000d6c:	b950      	cbnz	r0, 8000d84 <__ssputs_r+0x5c>
 8000d6e:	230c      	movs	r3, #12
 8000d70:	f8ca 3000 	str.w	r3, [sl]
 8000d74:	89a3      	ldrh	r3, [r4, #12]
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	81a3      	strh	r3, [r4, #12]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	6921      	ldr	r1, [r4, #16]
 8000d86:	464a      	mov	r2, r9
 8000d88:	f7ff fdf4 	bl	8000974 <memcpy>
 8000d8c:	89a3      	ldrh	r3, [r4, #12]
 8000d8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d96:	81a3      	strh	r3, [r4, #12]
 8000d98:	6126      	str	r6, [r4, #16]
 8000d9a:	6165      	str	r5, [r4, #20]
 8000d9c:	444e      	add	r6, r9
 8000d9e:	eba5 0509 	sub.w	r5, r5, r9
 8000da2:	6026      	str	r6, [r4, #0]
 8000da4:	60a5      	str	r5, [r4, #8]
 8000da6:	463e      	mov	r6, r7
 8000da8:	42be      	cmp	r6, r7
 8000daa:	d900      	bls.n	8000dae <__ssputs_r+0x86>
 8000dac:	463e      	mov	r6, r7
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	4632      	mov	r2, r6
 8000db2:	4641      	mov	r1, r8
 8000db4:	f000 fe72 	bl	8001a9c <memmove>
 8000db8:	68a3      	ldr	r3, [r4, #8]
 8000dba:	1b9b      	subs	r3, r3, r6
 8000dbc:	60a3      	str	r3, [r4, #8]
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	4433      	add	r3, r6
 8000dc2:	6023      	str	r3, [r4, #0]
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	e7db      	b.n	8000d80 <__ssputs_r+0x58>
 8000dc8:	462a      	mov	r2, r5
 8000dca:	f000 fed9 	bl	8001b80 <_realloc_r>
 8000dce:	4606      	mov	r6, r0
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d1e1      	bne.n	8000d98 <__ssputs_r+0x70>
 8000dd4:	6921      	ldr	r1, [r4, #16]
 8000dd6:	4650      	mov	r0, sl
 8000dd8:	f000 fe86 	bl	8001ae8 <_free_r>
 8000ddc:	e7c7      	b.n	8000d6e <__ssputs_r+0x46>
	...

08000de0 <_svfiprintf_r>:
 8000de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	4698      	mov	r8, r3
 8000de6:	898b      	ldrh	r3, [r1, #12]
 8000de8:	061b      	lsls	r3, r3, #24
 8000dea:	b09d      	sub	sp, #116	; 0x74
 8000dec:	4607      	mov	r7, r0
 8000dee:	460d      	mov	r5, r1
 8000df0:	4614      	mov	r4, r2
 8000df2:	d50e      	bpl.n	8000e12 <_svfiprintf_r+0x32>
 8000df4:	690b      	ldr	r3, [r1, #16]
 8000df6:	b963      	cbnz	r3, 8000e12 <_svfiprintf_r+0x32>
 8000df8:	2140      	movs	r1, #64	; 0x40
 8000dfa:	f7ff ff21 	bl	8000c40 <_malloc_r>
 8000dfe:	6028      	str	r0, [r5, #0]
 8000e00:	6128      	str	r0, [r5, #16]
 8000e02:	b920      	cbnz	r0, 8000e0e <_svfiprintf_r+0x2e>
 8000e04:	230c      	movs	r3, #12
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	e0d1      	b.n	8000fb2 <_svfiprintf_r+0x1d2>
 8000e0e:	2340      	movs	r3, #64	; 0x40
 8000e10:	616b      	str	r3, [r5, #20]
 8000e12:	2300      	movs	r3, #0
 8000e14:	9309      	str	r3, [sp, #36]	; 0x24
 8000e16:	2320      	movs	r3, #32
 8000e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e20:	2330      	movs	r3, #48	; 0x30
 8000e22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000fcc <_svfiprintf_r+0x1ec>
 8000e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e2a:	f04f 0901 	mov.w	r9, #1
 8000e2e:	4623      	mov	r3, r4
 8000e30:	469a      	mov	sl, r3
 8000e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e36:	b10a      	cbz	r2, 8000e3c <_svfiprintf_r+0x5c>
 8000e38:	2a25      	cmp	r2, #37	; 0x25
 8000e3a:	d1f9      	bne.n	8000e30 <_svfiprintf_r+0x50>
 8000e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8000e40:	d00b      	beq.n	8000e5a <_svfiprintf_r+0x7a>
 8000e42:	465b      	mov	r3, fp
 8000e44:	4622      	mov	r2, r4
 8000e46:	4629      	mov	r1, r5
 8000e48:	4638      	mov	r0, r7
 8000e4a:	f7ff ff6d 	bl	8000d28 <__ssputs_r>
 8000e4e:	3001      	adds	r0, #1
 8000e50:	f000 80aa 	beq.w	8000fa8 <_svfiprintf_r+0x1c8>
 8000e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e56:	445a      	add	r2, fp
 8000e58:	9209      	str	r2, [sp, #36]	; 0x24
 8000e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 80a2 	beq.w	8000fa8 <_svfiprintf_r+0x1c8>
 8000e64:	2300      	movs	r3, #0
 8000e66:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e6e:	f10a 0a01 	add.w	sl, sl, #1
 8000e72:	9304      	str	r3, [sp, #16]
 8000e74:	9307      	str	r3, [sp, #28]
 8000e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8000e7c:	4654      	mov	r4, sl
 8000e7e:	2205      	movs	r2, #5
 8000e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e84:	4851      	ldr	r0, [pc, #324]	; (8000fcc <_svfiprintf_r+0x1ec>)
 8000e86:	f7ff f9ab 	bl	80001e0 <memchr>
 8000e8a:	9a04      	ldr	r2, [sp, #16]
 8000e8c:	b9d8      	cbnz	r0, 8000ec6 <_svfiprintf_r+0xe6>
 8000e8e:	06d0      	lsls	r0, r2, #27
 8000e90:	bf44      	itt	mi
 8000e92:	2320      	movmi	r3, #32
 8000e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e98:	0711      	lsls	r1, r2, #28
 8000e9a:	bf44      	itt	mi
 8000e9c:	232b      	movmi	r3, #43	; 0x2b
 8000e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8000ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8000ea8:	d015      	beq.n	8000ed6 <_svfiprintf_r+0xf6>
 8000eaa:	9a07      	ldr	r2, [sp, #28]
 8000eac:	4654      	mov	r4, sl
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f04f 0c0a 	mov.w	ip, #10
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000eba:	3b30      	subs	r3, #48	; 0x30
 8000ebc:	2b09      	cmp	r3, #9
 8000ebe:	d94e      	bls.n	8000f5e <_svfiprintf_r+0x17e>
 8000ec0:	b1b0      	cbz	r0, 8000ef0 <_svfiprintf_r+0x110>
 8000ec2:	9207      	str	r2, [sp, #28]
 8000ec4:	e014      	b.n	8000ef0 <_svfiprintf_r+0x110>
 8000ec6:	eba0 0308 	sub.w	r3, r0, r8
 8000eca:	fa09 f303 	lsl.w	r3, r9, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	9304      	str	r3, [sp, #16]
 8000ed2:	46a2      	mov	sl, r4
 8000ed4:	e7d2      	b.n	8000e7c <_svfiprintf_r+0x9c>
 8000ed6:	9b03      	ldr	r3, [sp, #12]
 8000ed8:	1d19      	adds	r1, r3, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	9103      	str	r1, [sp, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bfbb      	ittet	lt
 8000ee2:	425b      	neglt	r3, r3
 8000ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8000ee8:	9307      	strge	r3, [sp, #28]
 8000eea:	9307      	strlt	r3, [sp, #28]
 8000eec:	bfb8      	it	lt
 8000eee:	9204      	strlt	r2, [sp, #16]
 8000ef0:	7823      	ldrb	r3, [r4, #0]
 8000ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8000ef4:	d10c      	bne.n	8000f10 <_svfiprintf_r+0x130>
 8000ef6:	7863      	ldrb	r3, [r4, #1]
 8000ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8000efa:	d135      	bne.n	8000f68 <_svfiprintf_r+0x188>
 8000efc:	9b03      	ldr	r3, [sp, #12]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	9203      	str	r2, [sp, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bfb8      	it	lt
 8000f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f0c:	3402      	adds	r4, #2
 8000f0e:	9305      	str	r3, [sp, #20]
 8000f10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000fdc <_svfiprintf_r+0x1fc>
 8000f14:	7821      	ldrb	r1, [r4, #0]
 8000f16:	2203      	movs	r2, #3
 8000f18:	4650      	mov	r0, sl
 8000f1a:	f7ff f961 	bl	80001e0 <memchr>
 8000f1e:	b140      	cbz	r0, 8000f32 <_svfiprintf_r+0x152>
 8000f20:	2340      	movs	r3, #64	; 0x40
 8000f22:	eba0 000a 	sub.w	r0, r0, sl
 8000f26:	fa03 f000 	lsl.w	r0, r3, r0
 8000f2a:	9b04      	ldr	r3, [sp, #16]
 8000f2c:	4303      	orrs	r3, r0
 8000f2e:	3401      	adds	r4, #1
 8000f30:	9304      	str	r3, [sp, #16]
 8000f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f36:	4826      	ldr	r0, [pc, #152]	; (8000fd0 <_svfiprintf_r+0x1f0>)
 8000f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	f7ff f94f 	bl	80001e0 <memchr>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d038      	beq.n	8000fb8 <_svfiprintf_r+0x1d8>
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <_svfiprintf_r+0x1f4>)
 8000f48:	bb1b      	cbnz	r3, 8000f92 <_svfiprintf_r+0x1b2>
 8000f4a:	9b03      	ldr	r3, [sp, #12]
 8000f4c:	3307      	adds	r3, #7
 8000f4e:	f023 0307 	bic.w	r3, r3, #7
 8000f52:	3308      	adds	r3, #8
 8000f54:	9303      	str	r3, [sp, #12]
 8000f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f58:	4433      	add	r3, r6
 8000f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f5c:	e767      	b.n	8000e2e <_svfiprintf_r+0x4e>
 8000f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f62:	460c      	mov	r4, r1
 8000f64:	2001      	movs	r0, #1
 8000f66:	e7a5      	b.n	8000eb4 <_svfiprintf_r+0xd4>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	3401      	adds	r4, #1
 8000f6c:	9305      	str	r3, [sp, #20]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 0c0a 	mov.w	ip, #10
 8000f74:	4620      	mov	r0, r4
 8000f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f7a:	3a30      	subs	r2, #48	; 0x30
 8000f7c:	2a09      	cmp	r2, #9
 8000f7e:	d903      	bls.n	8000f88 <_svfiprintf_r+0x1a8>
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0c5      	beq.n	8000f10 <_svfiprintf_r+0x130>
 8000f84:	9105      	str	r1, [sp, #20]
 8000f86:	e7c3      	b.n	8000f10 <_svfiprintf_r+0x130>
 8000f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e7f0      	b.n	8000f74 <_svfiprintf_r+0x194>
 8000f92:	ab03      	add	r3, sp, #12
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	462a      	mov	r2, r5
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <_svfiprintf_r+0x1f8>)
 8000f9a:	a904      	add	r1, sp, #16
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	f3af 8000 	nop.w
 8000fa2:	1c42      	adds	r2, r0, #1
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	d1d6      	bne.n	8000f56 <_svfiprintf_r+0x176>
 8000fa8:	89ab      	ldrh	r3, [r5, #12]
 8000faa:	065b      	lsls	r3, r3, #25
 8000fac:	f53f af2c 	bmi.w	8000e08 <_svfiprintf_r+0x28>
 8000fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000fb2:	b01d      	add	sp, #116	; 0x74
 8000fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb8:	ab03      	add	r3, sp, #12
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	462a      	mov	r2, r5
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <_svfiprintf_r+0x1f8>)
 8000fc0:	a904      	add	r1, sp, #16
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	f000 f9d4 	bl	8001370 <_printf_i>
 8000fc8:	e7eb      	b.n	8000fa2 <_svfiprintf_r+0x1c2>
 8000fca:	bf00      	nop
 8000fcc:	08001cf0 	.word	0x08001cf0
 8000fd0:	08001cfa 	.word	0x08001cfa
 8000fd4:	00000000 	.word	0x00000000
 8000fd8:	08000d29 	.word	0x08000d29
 8000fdc:	08001cf6 	.word	0x08001cf6

08000fe0 <__sfputc_r>:
 8000fe0:	6893      	ldr	r3, [r2, #8]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	b410      	push	{r4}
 8000fe8:	6093      	str	r3, [r2, #8]
 8000fea:	da08      	bge.n	8000ffe <__sfputc_r+0x1e>
 8000fec:	6994      	ldr	r4, [r2, #24]
 8000fee:	42a3      	cmp	r3, r4
 8000ff0:	db01      	blt.n	8000ff6 <__sfputc_r+0x16>
 8000ff2:	290a      	cmp	r1, #10
 8000ff4:	d103      	bne.n	8000ffe <__sfputc_r+0x1e>
 8000ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ffa:	f000 bb33 	b.w	8001664 <__swbuf_r>
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	1c58      	adds	r0, r3, #1
 8001002:	6010      	str	r0, [r2, #0]
 8001004:	7019      	strb	r1, [r3, #0]
 8001006:	4608      	mov	r0, r1
 8001008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800100c:	4770      	bx	lr

0800100e <__sfputs_r>:
 800100e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001010:	4606      	mov	r6, r0
 8001012:	460f      	mov	r7, r1
 8001014:	4614      	mov	r4, r2
 8001016:	18d5      	adds	r5, r2, r3
 8001018:	42ac      	cmp	r4, r5
 800101a:	d101      	bne.n	8001020 <__sfputs_r+0x12>
 800101c:	2000      	movs	r0, #0
 800101e:	e007      	b.n	8001030 <__sfputs_r+0x22>
 8001020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001024:	463a      	mov	r2, r7
 8001026:	4630      	mov	r0, r6
 8001028:	f7ff ffda 	bl	8000fe0 <__sfputc_r>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d1f3      	bne.n	8001018 <__sfputs_r+0xa>
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001034 <_vfiprintf_r>:
 8001034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001038:	460d      	mov	r5, r1
 800103a:	b09d      	sub	sp, #116	; 0x74
 800103c:	4614      	mov	r4, r2
 800103e:	4698      	mov	r8, r3
 8001040:	4606      	mov	r6, r0
 8001042:	b118      	cbz	r0, 800104c <_vfiprintf_r+0x18>
 8001044:	6983      	ldr	r3, [r0, #24]
 8001046:	b90b      	cbnz	r3, 800104c <_vfiprintf_r+0x18>
 8001048:	f7ff fd3a 	bl	8000ac0 <__sinit>
 800104c:	4b89      	ldr	r3, [pc, #548]	; (8001274 <_vfiprintf_r+0x240>)
 800104e:	429d      	cmp	r5, r3
 8001050:	d11b      	bne.n	800108a <_vfiprintf_r+0x56>
 8001052:	6875      	ldr	r5, [r6, #4]
 8001054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001056:	07d9      	lsls	r1, r3, #31
 8001058:	d405      	bmi.n	8001066 <_vfiprintf_r+0x32>
 800105a:	89ab      	ldrh	r3, [r5, #12]
 800105c:	059a      	lsls	r2, r3, #22
 800105e:	d402      	bmi.n	8001066 <_vfiprintf_r+0x32>
 8001060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001062:	f7ff fdcb 	bl	8000bfc <__retarget_lock_acquire_recursive>
 8001066:	89ab      	ldrh	r3, [r5, #12]
 8001068:	071b      	lsls	r3, r3, #28
 800106a:	d501      	bpl.n	8001070 <_vfiprintf_r+0x3c>
 800106c:	692b      	ldr	r3, [r5, #16]
 800106e:	b9eb      	cbnz	r3, 80010ac <_vfiprintf_r+0x78>
 8001070:	4629      	mov	r1, r5
 8001072:	4630      	mov	r0, r6
 8001074:	f000 fb5a 	bl	800172c <__swsetup_r>
 8001078:	b1c0      	cbz	r0, 80010ac <_vfiprintf_r+0x78>
 800107a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800107c:	07dc      	lsls	r4, r3, #31
 800107e:	d50e      	bpl.n	800109e <_vfiprintf_r+0x6a>
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	b01d      	add	sp, #116	; 0x74
 8001086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800108a:	4b7b      	ldr	r3, [pc, #492]	; (8001278 <_vfiprintf_r+0x244>)
 800108c:	429d      	cmp	r5, r3
 800108e:	d101      	bne.n	8001094 <_vfiprintf_r+0x60>
 8001090:	68b5      	ldr	r5, [r6, #8]
 8001092:	e7df      	b.n	8001054 <_vfiprintf_r+0x20>
 8001094:	4b79      	ldr	r3, [pc, #484]	; (800127c <_vfiprintf_r+0x248>)
 8001096:	429d      	cmp	r5, r3
 8001098:	bf08      	it	eq
 800109a:	68f5      	ldreq	r5, [r6, #12]
 800109c:	e7da      	b.n	8001054 <_vfiprintf_r+0x20>
 800109e:	89ab      	ldrh	r3, [r5, #12]
 80010a0:	0598      	lsls	r0, r3, #22
 80010a2:	d4ed      	bmi.n	8001080 <_vfiprintf_r+0x4c>
 80010a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010a6:	f7ff fdaa 	bl	8000bfe <__retarget_lock_release_recursive>
 80010aa:	e7e9      	b.n	8001080 <_vfiprintf_r+0x4c>
 80010ac:	2300      	movs	r3, #0
 80010ae:	9309      	str	r3, [sp, #36]	; 0x24
 80010b0:	2320      	movs	r3, #32
 80010b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80010ba:	2330      	movs	r3, #48	; 0x30
 80010bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001280 <_vfiprintf_r+0x24c>
 80010c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010c4:	f04f 0901 	mov.w	r9, #1
 80010c8:	4623      	mov	r3, r4
 80010ca:	469a      	mov	sl, r3
 80010cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010d0:	b10a      	cbz	r2, 80010d6 <_vfiprintf_r+0xa2>
 80010d2:	2a25      	cmp	r2, #37	; 0x25
 80010d4:	d1f9      	bne.n	80010ca <_vfiprintf_r+0x96>
 80010d6:	ebba 0b04 	subs.w	fp, sl, r4
 80010da:	d00b      	beq.n	80010f4 <_vfiprintf_r+0xc0>
 80010dc:	465b      	mov	r3, fp
 80010de:	4622      	mov	r2, r4
 80010e0:	4629      	mov	r1, r5
 80010e2:	4630      	mov	r0, r6
 80010e4:	f7ff ff93 	bl	800100e <__sfputs_r>
 80010e8:	3001      	adds	r0, #1
 80010ea:	f000 80aa 	beq.w	8001242 <_vfiprintf_r+0x20e>
 80010ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010f0:	445a      	add	r2, fp
 80010f2:	9209      	str	r2, [sp, #36]	; 0x24
 80010f4:	f89a 3000 	ldrb.w	r3, [sl]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80a2 	beq.w	8001242 <_vfiprintf_r+0x20e>
 80010fe:	2300      	movs	r3, #0
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001108:	f10a 0a01 	add.w	sl, sl, #1
 800110c:	9304      	str	r3, [sp, #16]
 800110e:	9307      	str	r3, [sp, #28]
 8001110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001114:	931a      	str	r3, [sp, #104]	; 0x68
 8001116:	4654      	mov	r4, sl
 8001118:	2205      	movs	r2, #5
 800111a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800111e:	4858      	ldr	r0, [pc, #352]	; (8001280 <_vfiprintf_r+0x24c>)
 8001120:	f7ff f85e 	bl	80001e0 <memchr>
 8001124:	9a04      	ldr	r2, [sp, #16]
 8001126:	b9d8      	cbnz	r0, 8001160 <_vfiprintf_r+0x12c>
 8001128:	06d1      	lsls	r1, r2, #27
 800112a:	bf44      	itt	mi
 800112c:	2320      	movmi	r3, #32
 800112e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001132:	0713      	lsls	r3, r2, #28
 8001134:	bf44      	itt	mi
 8001136:	232b      	movmi	r3, #43	; 0x2b
 8001138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800113c:	f89a 3000 	ldrb.w	r3, [sl]
 8001140:	2b2a      	cmp	r3, #42	; 0x2a
 8001142:	d015      	beq.n	8001170 <_vfiprintf_r+0x13c>
 8001144:	9a07      	ldr	r2, [sp, #28]
 8001146:	4654      	mov	r4, sl
 8001148:	2000      	movs	r0, #0
 800114a:	f04f 0c0a 	mov.w	ip, #10
 800114e:	4621      	mov	r1, r4
 8001150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001154:	3b30      	subs	r3, #48	; 0x30
 8001156:	2b09      	cmp	r3, #9
 8001158:	d94e      	bls.n	80011f8 <_vfiprintf_r+0x1c4>
 800115a:	b1b0      	cbz	r0, 800118a <_vfiprintf_r+0x156>
 800115c:	9207      	str	r2, [sp, #28]
 800115e:	e014      	b.n	800118a <_vfiprintf_r+0x156>
 8001160:	eba0 0308 	sub.w	r3, r0, r8
 8001164:	fa09 f303 	lsl.w	r3, r9, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	9304      	str	r3, [sp, #16]
 800116c:	46a2      	mov	sl, r4
 800116e:	e7d2      	b.n	8001116 <_vfiprintf_r+0xe2>
 8001170:	9b03      	ldr	r3, [sp, #12]
 8001172:	1d19      	adds	r1, r3, #4
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	9103      	str	r1, [sp, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	bfbb      	ittet	lt
 800117c:	425b      	neglt	r3, r3
 800117e:	f042 0202 	orrlt.w	r2, r2, #2
 8001182:	9307      	strge	r3, [sp, #28]
 8001184:	9307      	strlt	r3, [sp, #28]
 8001186:	bfb8      	it	lt
 8001188:	9204      	strlt	r2, [sp, #16]
 800118a:	7823      	ldrb	r3, [r4, #0]
 800118c:	2b2e      	cmp	r3, #46	; 0x2e
 800118e:	d10c      	bne.n	80011aa <_vfiprintf_r+0x176>
 8001190:	7863      	ldrb	r3, [r4, #1]
 8001192:	2b2a      	cmp	r3, #42	; 0x2a
 8001194:	d135      	bne.n	8001202 <_vfiprintf_r+0x1ce>
 8001196:	9b03      	ldr	r3, [sp, #12]
 8001198:	1d1a      	adds	r2, r3, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	9203      	str	r2, [sp, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bfb8      	it	lt
 80011a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80011a6:	3402      	adds	r4, #2
 80011a8:	9305      	str	r3, [sp, #20]
 80011aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001290 <_vfiprintf_r+0x25c>
 80011ae:	7821      	ldrb	r1, [r4, #0]
 80011b0:	2203      	movs	r2, #3
 80011b2:	4650      	mov	r0, sl
 80011b4:	f7ff f814 	bl	80001e0 <memchr>
 80011b8:	b140      	cbz	r0, 80011cc <_vfiprintf_r+0x198>
 80011ba:	2340      	movs	r3, #64	; 0x40
 80011bc:	eba0 000a 	sub.w	r0, r0, sl
 80011c0:	fa03 f000 	lsl.w	r0, r3, r0
 80011c4:	9b04      	ldr	r3, [sp, #16]
 80011c6:	4303      	orrs	r3, r0
 80011c8:	3401      	adds	r4, #1
 80011ca:	9304      	str	r3, [sp, #16]
 80011cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011d0:	482c      	ldr	r0, [pc, #176]	; (8001284 <_vfiprintf_r+0x250>)
 80011d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011d6:	2206      	movs	r2, #6
 80011d8:	f7ff f802 	bl	80001e0 <memchr>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d03f      	beq.n	8001260 <_vfiprintf_r+0x22c>
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <_vfiprintf_r+0x254>)
 80011e2:	bb1b      	cbnz	r3, 800122c <_vfiprintf_r+0x1f8>
 80011e4:	9b03      	ldr	r3, [sp, #12]
 80011e6:	3307      	adds	r3, #7
 80011e8:	f023 0307 	bic.w	r3, r3, #7
 80011ec:	3308      	adds	r3, #8
 80011ee:	9303      	str	r3, [sp, #12]
 80011f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011f2:	443b      	add	r3, r7
 80011f4:	9309      	str	r3, [sp, #36]	; 0x24
 80011f6:	e767      	b.n	80010c8 <_vfiprintf_r+0x94>
 80011f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80011fc:	460c      	mov	r4, r1
 80011fe:	2001      	movs	r0, #1
 8001200:	e7a5      	b.n	800114e <_vfiprintf_r+0x11a>
 8001202:	2300      	movs	r3, #0
 8001204:	3401      	adds	r4, #1
 8001206:	9305      	str	r3, [sp, #20]
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 0c0a 	mov.w	ip, #10
 800120e:	4620      	mov	r0, r4
 8001210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001214:	3a30      	subs	r2, #48	; 0x30
 8001216:	2a09      	cmp	r2, #9
 8001218:	d903      	bls.n	8001222 <_vfiprintf_r+0x1ee>
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0c5      	beq.n	80011aa <_vfiprintf_r+0x176>
 800121e:	9105      	str	r1, [sp, #20]
 8001220:	e7c3      	b.n	80011aa <_vfiprintf_r+0x176>
 8001222:	fb0c 2101 	mla	r1, ip, r1, r2
 8001226:	4604      	mov	r4, r0
 8001228:	2301      	movs	r3, #1
 800122a:	e7f0      	b.n	800120e <_vfiprintf_r+0x1da>
 800122c:	ab03      	add	r3, sp, #12
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	462a      	mov	r2, r5
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <_vfiprintf_r+0x258>)
 8001234:	a904      	add	r1, sp, #16
 8001236:	4630      	mov	r0, r6
 8001238:	f3af 8000 	nop.w
 800123c:	4607      	mov	r7, r0
 800123e:	1c78      	adds	r0, r7, #1
 8001240:	d1d6      	bne.n	80011f0 <_vfiprintf_r+0x1bc>
 8001242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001244:	07d9      	lsls	r1, r3, #31
 8001246:	d405      	bmi.n	8001254 <_vfiprintf_r+0x220>
 8001248:	89ab      	ldrh	r3, [r5, #12]
 800124a:	059a      	lsls	r2, r3, #22
 800124c:	d402      	bmi.n	8001254 <_vfiprintf_r+0x220>
 800124e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001250:	f7ff fcd5 	bl	8000bfe <__retarget_lock_release_recursive>
 8001254:	89ab      	ldrh	r3, [r5, #12]
 8001256:	065b      	lsls	r3, r3, #25
 8001258:	f53f af12 	bmi.w	8001080 <_vfiprintf_r+0x4c>
 800125c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800125e:	e711      	b.n	8001084 <_vfiprintf_r+0x50>
 8001260:	ab03      	add	r3, sp, #12
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	462a      	mov	r2, r5
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <_vfiprintf_r+0x258>)
 8001268:	a904      	add	r1, sp, #16
 800126a:	4630      	mov	r0, r6
 800126c:	f000 f880 	bl	8001370 <_printf_i>
 8001270:	e7e4      	b.n	800123c <_vfiprintf_r+0x208>
 8001272:	bf00      	nop
 8001274:	08001cb0 	.word	0x08001cb0
 8001278:	08001cd0 	.word	0x08001cd0
 800127c:	08001c90 	.word	0x08001c90
 8001280:	08001cf0 	.word	0x08001cf0
 8001284:	08001cfa 	.word	0x08001cfa
 8001288:	00000000 	.word	0x00000000
 800128c:	0800100f 	.word	0x0800100f
 8001290:	08001cf6 	.word	0x08001cf6

08001294 <_printf_common>:
 8001294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001298:	4616      	mov	r6, r2
 800129a:	4699      	mov	r9, r3
 800129c:	688a      	ldr	r2, [r1, #8]
 800129e:	690b      	ldr	r3, [r1, #16]
 80012a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bfb8      	it	lt
 80012a8:	4613      	movlt	r3, r2
 80012aa:	6033      	str	r3, [r6, #0]
 80012ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012b0:	4607      	mov	r7, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	b10a      	cbz	r2, 80012ba <_printf_common+0x26>
 80012b6:	3301      	adds	r3, #1
 80012b8:	6033      	str	r3, [r6, #0]
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	0699      	lsls	r1, r3, #26
 80012be:	bf42      	ittt	mi
 80012c0:	6833      	ldrmi	r3, [r6, #0]
 80012c2:	3302      	addmi	r3, #2
 80012c4:	6033      	strmi	r3, [r6, #0]
 80012c6:	6825      	ldr	r5, [r4, #0]
 80012c8:	f015 0506 	ands.w	r5, r5, #6
 80012cc:	d106      	bne.n	80012dc <_printf_common+0x48>
 80012ce:	f104 0a19 	add.w	sl, r4, #25
 80012d2:	68e3      	ldr	r3, [r4, #12]
 80012d4:	6832      	ldr	r2, [r6, #0]
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	42ab      	cmp	r3, r5
 80012da:	dc26      	bgt.n	800132a <_printf_common+0x96>
 80012dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012e0:	1e13      	subs	r3, r2, #0
 80012e2:	6822      	ldr	r2, [r4, #0]
 80012e4:	bf18      	it	ne
 80012e6:	2301      	movne	r3, #1
 80012e8:	0692      	lsls	r2, r2, #26
 80012ea:	d42b      	bmi.n	8001344 <_printf_common+0xb0>
 80012ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012f0:	4649      	mov	r1, r9
 80012f2:	4638      	mov	r0, r7
 80012f4:	47c0      	blx	r8
 80012f6:	3001      	adds	r0, #1
 80012f8:	d01e      	beq.n	8001338 <_printf_common+0xa4>
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	68e5      	ldr	r5, [r4, #12]
 80012fe:	6832      	ldr	r2, [r6, #0]
 8001300:	f003 0306 	and.w	r3, r3, #6
 8001304:	2b04      	cmp	r3, #4
 8001306:	bf08      	it	eq
 8001308:	1aad      	subeq	r5, r5, r2
 800130a:	68a3      	ldr	r3, [r4, #8]
 800130c:	6922      	ldr	r2, [r4, #16]
 800130e:	bf0c      	ite	eq
 8001310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001314:	2500      	movne	r5, #0
 8001316:	4293      	cmp	r3, r2
 8001318:	bfc4      	itt	gt
 800131a:	1a9b      	subgt	r3, r3, r2
 800131c:	18ed      	addgt	r5, r5, r3
 800131e:	2600      	movs	r6, #0
 8001320:	341a      	adds	r4, #26
 8001322:	42b5      	cmp	r5, r6
 8001324:	d11a      	bne.n	800135c <_printf_common+0xc8>
 8001326:	2000      	movs	r0, #0
 8001328:	e008      	b.n	800133c <_printf_common+0xa8>
 800132a:	2301      	movs	r3, #1
 800132c:	4652      	mov	r2, sl
 800132e:	4649      	mov	r1, r9
 8001330:	4638      	mov	r0, r7
 8001332:	47c0      	blx	r8
 8001334:	3001      	adds	r0, #1
 8001336:	d103      	bne.n	8001340 <_printf_common+0xac>
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001340:	3501      	adds	r5, #1
 8001342:	e7c6      	b.n	80012d2 <_printf_common+0x3e>
 8001344:	18e1      	adds	r1, r4, r3
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	2030      	movs	r0, #48	; 0x30
 800134a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800134e:	4422      	add	r2, r4
 8001350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001358:	3302      	adds	r3, #2
 800135a:	e7c7      	b.n	80012ec <_printf_common+0x58>
 800135c:	2301      	movs	r3, #1
 800135e:	4622      	mov	r2, r4
 8001360:	4649      	mov	r1, r9
 8001362:	4638      	mov	r0, r7
 8001364:	47c0      	blx	r8
 8001366:	3001      	adds	r0, #1
 8001368:	d0e6      	beq.n	8001338 <_printf_common+0xa4>
 800136a:	3601      	adds	r6, #1
 800136c:	e7d9      	b.n	8001322 <_printf_common+0x8e>
	...

08001370 <_printf_i>:
 8001370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001374:	7e0f      	ldrb	r7, [r1, #24]
 8001376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001378:	2f78      	cmp	r7, #120	; 0x78
 800137a:	4691      	mov	r9, r2
 800137c:	4680      	mov	r8, r0
 800137e:	460c      	mov	r4, r1
 8001380:	469a      	mov	sl, r3
 8001382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001386:	d807      	bhi.n	8001398 <_printf_i+0x28>
 8001388:	2f62      	cmp	r7, #98	; 0x62
 800138a:	d80a      	bhi.n	80013a2 <_printf_i+0x32>
 800138c:	2f00      	cmp	r7, #0
 800138e:	f000 80d8 	beq.w	8001542 <_printf_i+0x1d2>
 8001392:	2f58      	cmp	r7, #88	; 0x58
 8001394:	f000 80a3 	beq.w	80014de <_printf_i+0x16e>
 8001398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800139c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013a0:	e03a      	b.n	8001418 <_printf_i+0xa8>
 80013a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013a6:	2b15      	cmp	r3, #21
 80013a8:	d8f6      	bhi.n	8001398 <_printf_i+0x28>
 80013aa:	a101      	add	r1, pc, #4	; (adr r1, 80013b0 <_printf_i+0x40>)
 80013ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013b0:	08001409 	.word	0x08001409
 80013b4:	0800141d 	.word	0x0800141d
 80013b8:	08001399 	.word	0x08001399
 80013bc:	08001399 	.word	0x08001399
 80013c0:	08001399 	.word	0x08001399
 80013c4:	08001399 	.word	0x08001399
 80013c8:	0800141d 	.word	0x0800141d
 80013cc:	08001399 	.word	0x08001399
 80013d0:	08001399 	.word	0x08001399
 80013d4:	08001399 	.word	0x08001399
 80013d8:	08001399 	.word	0x08001399
 80013dc:	08001529 	.word	0x08001529
 80013e0:	0800144d 	.word	0x0800144d
 80013e4:	0800150b 	.word	0x0800150b
 80013e8:	08001399 	.word	0x08001399
 80013ec:	08001399 	.word	0x08001399
 80013f0:	0800154b 	.word	0x0800154b
 80013f4:	08001399 	.word	0x08001399
 80013f8:	0800144d 	.word	0x0800144d
 80013fc:	08001399 	.word	0x08001399
 8001400:	08001399 	.word	0x08001399
 8001404:	08001513 	.word	0x08001513
 8001408:	682b      	ldr	r3, [r5, #0]
 800140a:	1d1a      	adds	r2, r3, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	602a      	str	r2, [r5, #0]
 8001410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001418:	2301      	movs	r3, #1
 800141a:	e0a3      	b.n	8001564 <_printf_i+0x1f4>
 800141c:	6820      	ldr	r0, [r4, #0]
 800141e:	6829      	ldr	r1, [r5, #0]
 8001420:	0606      	lsls	r6, r0, #24
 8001422:	f101 0304 	add.w	r3, r1, #4
 8001426:	d50a      	bpl.n	800143e <_printf_i+0xce>
 8001428:	680e      	ldr	r6, [r1, #0]
 800142a:	602b      	str	r3, [r5, #0]
 800142c:	2e00      	cmp	r6, #0
 800142e:	da03      	bge.n	8001438 <_printf_i+0xc8>
 8001430:	232d      	movs	r3, #45	; 0x2d
 8001432:	4276      	negs	r6, r6
 8001434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001438:	485e      	ldr	r0, [pc, #376]	; (80015b4 <_printf_i+0x244>)
 800143a:	230a      	movs	r3, #10
 800143c:	e019      	b.n	8001472 <_printf_i+0x102>
 800143e:	680e      	ldr	r6, [r1, #0]
 8001440:	602b      	str	r3, [r5, #0]
 8001442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001446:	bf18      	it	ne
 8001448:	b236      	sxthne	r6, r6
 800144a:	e7ef      	b.n	800142c <_printf_i+0xbc>
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	1d19      	adds	r1, r3, #4
 8001452:	6029      	str	r1, [r5, #0]
 8001454:	0601      	lsls	r1, r0, #24
 8001456:	d501      	bpl.n	800145c <_printf_i+0xec>
 8001458:	681e      	ldr	r6, [r3, #0]
 800145a:	e002      	b.n	8001462 <_printf_i+0xf2>
 800145c:	0646      	lsls	r6, r0, #25
 800145e:	d5fb      	bpl.n	8001458 <_printf_i+0xe8>
 8001460:	881e      	ldrh	r6, [r3, #0]
 8001462:	4854      	ldr	r0, [pc, #336]	; (80015b4 <_printf_i+0x244>)
 8001464:	2f6f      	cmp	r7, #111	; 0x6f
 8001466:	bf0c      	ite	eq
 8001468:	2308      	moveq	r3, #8
 800146a:	230a      	movne	r3, #10
 800146c:	2100      	movs	r1, #0
 800146e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001472:	6865      	ldr	r5, [r4, #4]
 8001474:	60a5      	str	r5, [r4, #8]
 8001476:	2d00      	cmp	r5, #0
 8001478:	bfa2      	ittt	ge
 800147a:	6821      	ldrge	r1, [r4, #0]
 800147c:	f021 0104 	bicge.w	r1, r1, #4
 8001480:	6021      	strge	r1, [r4, #0]
 8001482:	b90e      	cbnz	r6, 8001488 <_printf_i+0x118>
 8001484:	2d00      	cmp	r5, #0
 8001486:	d04d      	beq.n	8001524 <_printf_i+0x1b4>
 8001488:	4615      	mov	r5, r2
 800148a:	fbb6 f1f3 	udiv	r1, r6, r3
 800148e:	fb03 6711 	mls	r7, r3, r1, r6
 8001492:	5dc7      	ldrb	r7, [r0, r7]
 8001494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001498:	4637      	mov	r7, r6
 800149a:	42bb      	cmp	r3, r7
 800149c:	460e      	mov	r6, r1
 800149e:	d9f4      	bls.n	800148a <_printf_i+0x11a>
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d10b      	bne.n	80014bc <_printf_i+0x14c>
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	07de      	lsls	r6, r3, #31
 80014a8:	d508      	bpl.n	80014bc <_printf_i+0x14c>
 80014aa:	6923      	ldr	r3, [r4, #16]
 80014ac:	6861      	ldr	r1, [r4, #4]
 80014ae:	4299      	cmp	r1, r3
 80014b0:	bfde      	ittt	le
 80014b2:	2330      	movle	r3, #48	; 0x30
 80014b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80014bc:	1b52      	subs	r2, r2, r5
 80014be:	6122      	str	r2, [r4, #16]
 80014c0:	f8cd a000 	str.w	sl, [sp]
 80014c4:	464b      	mov	r3, r9
 80014c6:	aa03      	add	r2, sp, #12
 80014c8:	4621      	mov	r1, r4
 80014ca:	4640      	mov	r0, r8
 80014cc:	f7ff fee2 	bl	8001294 <_printf_common>
 80014d0:	3001      	adds	r0, #1
 80014d2:	d14c      	bne.n	800156e <_printf_i+0x1fe>
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	b004      	add	sp, #16
 80014da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014de:	4835      	ldr	r0, [pc, #212]	; (80015b4 <_printf_i+0x244>)
 80014e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80014e4:	6829      	ldr	r1, [r5, #0]
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80014ec:	6029      	str	r1, [r5, #0]
 80014ee:	061d      	lsls	r5, r3, #24
 80014f0:	d514      	bpl.n	800151c <_printf_i+0x1ac>
 80014f2:	07df      	lsls	r7, r3, #31
 80014f4:	bf44      	itt	mi
 80014f6:	f043 0320 	orrmi.w	r3, r3, #32
 80014fa:	6023      	strmi	r3, [r4, #0]
 80014fc:	b91e      	cbnz	r6, 8001506 <_printf_i+0x196>
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	f023 0320 	bic.w	r3, r3, #32
 8001504:	6023      	str	r3, [r4, #0]
 8001506:	2310      	movs	r3, #16
 8001508:	e7b0      	b.n	800146c <_printf_i+0xfc>
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	2378      	movs	r3, #120	; 0x78
 8001514:	4828      	ldr	r0, [pc, #160]	; (80015b8 <_printf_i+0x248>)
 8001516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800151a:	e7e3      	b.n	80014e4 <_printf_i+0x174>
 800151c:	0659      	lsls	r1, r3, #25
 800151e:	bf48      	it	mi
 8001520:	b2b6      	uxthmi	r6, r6
 8001522:	e7e6      	b.n	80014f2 <_printf_i+0x182>
 8001524:	4615      	mov	r5, r2
 8001526:	e7bb      	b.n	80014a0 <_printf_i+0x130>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	6826      	ldr	r6, [r4, #0]
 800152c:	6961      	ldr	r1, [r4, #20]
 800152e:	1d18      	adds	r0, r3, #4
 8001530:	6028      	str	r0, [r5, #0]
 8001532:	0635      	lsls	r5, r6, #24
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	d501      	bpl.n	800153c <_printf_i+0x1cc>
 8001538:	6019      	str	r1, [r3, #0]
 800153a:	e002      	b.n	8001542 <_printf_i+0x1d2>
 800153c:	0670      	lsls	r0, r6, #25
 800153e:	d5fb      	bpl.n	8001538 <_printf_i+0x1c8>
 8001540:	8019      	strh	r1, [r3, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	6123      	str	r3, [r4, #16]
 8001546:	4615      	mov	r5, r2
 8001548:	e7ba      	b.n	80014c0 <_printf_i+0x150>
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	1d1a      	adds	r2, r3, #4
 800154e:	602a      	str	r2, [r5, #0]
 8001550:	681d      	ldr	r5, [r3, #0]
 8001552:	6862      	ldr	r2, [r4, #4]
 8001554:	2100      	movs	r1, #0
 8001556:	4628      	mov	r0, r5
 8001558:	f7fe fe42 	bl	80001e0 <memchr>
 800155c:	b108      	cbz	r0, 8001562 <_printf_i+0x1f2>
 800155e:	1b40      	subs	r0, r0, r5
 8001560:	6060      	str	r0, [r4, #4]
 8001562:	6863      	ldr	r3, [r4, #4]
 8001564:	6123      	str	r3, [r4, #16]
 8001566:	2300      	movs	r3, #0
 8001568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800156c:	e7a8      	b.n	80014c0 <_printf_i+0x150>
 800156e:	6923      	ldr	r3, [r4, #16]
 8001570:	462a      	mov	r2, r5
 8001572:	4649      	mov	r1, r9
 8001574:	4640      	mov	r0, r8
 8001576:	47d0      	blx	sl
 8001578:	3001      	adds	r0, #1
 800157a:	d0ab      	beq.n	80014d4 <_printf_i+0x164>
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	079b      	lsls	r3, r3, #30
 8001580:	d413      	bmi.n	80015aa <_printf_i+0x23a>
 8001582:	68e0      	ldr	r0, [r4, #12]
 8001584:	9b03      	ldr	r3, [sp, #12]
 8001586:	4298      	cmp	r0, r3
 8001588:	bfb8      	it	lt
 800158a:	4618      	movlt	r0, r3
 800158c:	e7a4      	b.n	80014d8 <_printf_i+0x168>
 800158e:	2301      	movs	r3, #1
 8001590:	4632      	mov	r2, r6
 8001592:	4649      	mov	r1, r9
 8001594:	4640      	mov	r0, r8
 8001596:	47d0      	blx	sl
 8001598:	3001      	adds	r0, #1
 800159a:	d09b      	beq.n	80014d4 <_printf_i+0x164>
 800159c:	3501      	adds	r5, #1
 800159e:	68e3      	ldr	r3, [r4, #12]
 80015a0:	9903      	ldr	r1, [sp, #12]
 80015a2:	1a5b      	subs	r3, r3, r1
 80015a4:	42ab      	cmp	r3, r5
 80015a6:	dcf2      	bgt.n	800158e <_printf_i+0x21e>
 80015a8:	e7eb      	b.n	8001582 <_printf_i+0x212>
 80015aa:	2500      	movs	r5, #0
 80015ac:	f104 0619 	add.w	r6, r4, #25
 80015b0:	e7f5      	b.n	800159e <_printf_i+0x22e>
 80015b2:	bf00      	nop
 80015b4:	08001d01 	.word	0x08001d01
 80015b8:	08001d12 	.word	0x08001d12

080015bc <_sbrk_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4d06      	ldr	r5, [pc, #24]	; (80015d8 <_sbrk_r+0x1c>)
 80015c0:	2300      	movs	r3, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	602b      	str	r3, [r5, #0]
 80015c8:	f7ff f924 	bl	8000814 <_sbrk>
 80015cc:	1c43      	adds	r3, r0, #1
 80015ce:	d102      	bne.n	80015d6 <_sbrk_r+0x1a>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	b103      	cbz	r3, 80015d6 <_sbrk_r+0x1a>
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	200004a8 	.word	0x200004a8

080015dc <__sread>:
 80015dc:	b510      	push	{r4, lr}
 80015de:	460c      	mov	r4, r1
 80015e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e4:	f000 fafc 	bl	8001be0 <_read_r>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	bfab      	itete	ge
 80015ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80015ee:	89a3      	ldrhlt	r3, [r4, #12]
 80015f0:	181b      	addge	r3, r3, r0
 80015f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80015f6:	bfac      	ite	ge
 80015f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80015fa:	81a3      	strhlt	r3, [r4, #12]
 80015fc:	bd10      	pop	{r4, pc}

080015fe <__swrite>:
 80015fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001602:	461f      	mov	r7, r3
 8001604:	898b      	ldrh	r3, [r1, #12]
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	4605      	mov	r5, r0
 800160a:	460c      	mov	r4, r1
 800160c:	4616      	mov	r6, r2
 800160e:	d505      	bpl.n	800161c <__swrite+0x1e>
 8001610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001614:	2302      	movs	r3, #2
 8001616:	2200      	movs	r2, #0
 8001618:	f000 f9c8 	bl	80019ac <_lseek_r>
 800161c:	89a3      	ldrh	r3, [r4, #12]
 800161e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001626:	81a3      	strh	r3, [r4, #12]
 8001628:	4632      	mov	r2, r6
 800162a:	463b      	mov	r3, r7
 800162c:	4628      	mov	r0, r5
 800162e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001632:	f000 b869 	b.w	8001708 <_write_r>

08001636 <__sseek>:
 8001636:	b510      	push	{r4, lr}
 8001638:	460c      	mov	r4, r1
 800163a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800163e:	f000 f9b5 	bl	80019ac <_lseek_r>
 8001642:	1c43      	adds	r3, r0, #1
 8001644:	89a3      	ldrh	r3, [r4, #12]
 8001646:	bf15      	itete	ne
 8001648:	6560      	strne	r0, [r4, #84]	; 0x54
 800164a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800164e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001652:	81a3      	strheq	r3, [r4, #12]
 8001654:	bf18      	it	ne
 8001656:	81a3      	strhne	r3, [r4, #12]
 8001658:	bd10      	pop	{r4, pc}

0800165a <__sclose>:
 800165a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800165e:	f000 b8d3 	b.w	8001808 <_close_r>
	...

08001664 <__swbuf_r>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	460e      	mov	r6, r1
 8001668:	4614      	mov	r4, r2
 800166a:	4605      	mov	r5, r0
 800166c:	b118      	cbz	r0, 8001676 <__swbuf_r+0x12>
 800166e:	6983      	ldr	r3, [r0, #24]
 8001670:	b90b      	cbnz	r3, 8001676 <__swbuf_r+0x12>
 8001672:	f7ff fa25 	bl	8000ac0 <__sinit>
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <__swbuf_r+0x98>)
 8001678:	429c      	cmp	r4, r3
 800167a:	d12b      	bne.n	80016d4 <__swbuf_r+0x70>
 800167c:	686c      	ldr	r4, [r5, #4]
 800167e:	69a3      	ldr	r3, [r4, #24]
 8001680:	60a3      	str	r3, [r4, #8]
 8001682:	89a3      	ldrh	r3, [r4, #12]
 8001684:	071a      	lsls	r2, r3, #28
 8001686:	d52f      	bpl.n	80016e8 <__swbuf_r+0x84>
 8001688:	6923      	ldr	r3, [r4, #16]
 800168a:	b36b      	cbz	r3, 80016e8 <__swbuf_r+0x84>
 800168c:	6923      	ldr	r3, [r4, #16]
 800168e:	6820      	ldr	r0, [r4, #0]
 8001690:	1ac0      	subs	r0, r0, r3
 8001692:	6963      	ldr	r3, [r4, #20]
 8001694:	b2f6      	uxtb	r6, r6
 8001696:	4283      	cmp	r3, r0
 8001698:	4637      	mov	r7, r6
 800169a:	dc04      	bgt.n	80016a6 <__swbuf_r+0x42>
 800169c:	4621      	mov	r1, r4
 800169e:	4628      	mov	r0, r5
 80016a0:	f000 f948 	bl	8001934 <_fflush_r>
 80016a4:	bb30      	cbnz	r0, 80016f4 <__swbuf_r+0x90>
 80016a6:	68a3      	ldr	r3, [r4, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	60a3      	str	r3, [r4, #8]
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	6022      	str	r2, [r4, #0]
 80016b2:	701e      	strb	r6, [r3, #0]
 80016b4:	6963      	ldr	r3, [r4, #20]
 80016b6:	3001      	adds	r0, #1
 80016b8:	4283      	cmp	r3, r0
 80016ba:	d004      	beq.n	80016c6 <__swbuf_r+0x62>
 80016bc:	89a3      	ldrh	r3, [r4, #12]
 80016be:	07db      	lsls	r3, r3, #31
 80016c0:	d506      	bpl.n	80016d0 <__swbuf_r+0x6c>
 80016c2:	2e0a      	cmp	r6, #10
 80016c4:	d104      	bne.n	80016d0 <__swbuf_r+0x6c>
 80016c6:	4621      	mov	r1, r4
 80016c8:	4628      	mov	r0, r5
 80016ca:	f000 f933 	bl	8001934 <_fflush_r>
 80016ce:	b988      	cbnz	r0, 80016f4 <__swbuf_r+0x90>
 80016d0:	4638      	mov	r0, r7
 80016d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <__swbuf_r+0x9c>)
 80016d6:	429c      	cmp	r4, r3
 80016d8:	d101      	bne.n	80016de <__swbuf_r+0x7a>
 80016da:	68ac      	ldr	r4, [r5, #8]
 80016dc:	e7cf      	b.n	800167e <__swbuf_r+0x1a>
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <__swbuf_r+0xa0>)
 80016e0:	429c      	cmp	r4, r3
 80016e2:	bf08      	it	eq
 80016e4:	68ec      	ldreq	r4, [r5, #12]
 80016e6:	e7ca      	b.n	800167e <__swbuf_r+0x1a>
 80016e8:	4621      	mov	r1, r4
 80016ea:	4628      	mov	r0, r5
 80016ec:	f000 f81e 	bl	800172c <__swsetup_r>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d0cb      	beq.n	800168c <__swbuf_r+0x28>
 80016f4:	f04f 37ff 	mov.w	r7, #4294967295
 80016f8:	e7ea      	b.n	80016d0 <__swbuf_r+0x6c>
 80016fa:	bf00      	nop
 80016fc:	08001cb0 	.word	0x08001cb0
 8001700:	08001cd0 	.word	0x08001cd0
 8001704:	08001c90 	.word	0x08001c90

08001708 <_write_r>:
 8001708:	b538      	push	{r3, r4, r5, lr}
 800170a:	4d07      	ldr	r5, [pc, #28]	; (8001728 <_write_r+0x20>)
 800170c:	4604      	mov	r4, r0
 800170e:	4608      	mov	r0, r1
 8001710:	4611      	mov	r1, r2
 8001712:	2200      	movs	r2, #0
 8001714:	602a      	str	r2, [r5, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	f7ff f82b 	bl	8000772 <_write>
 800171c:	1c43      	adds	r3, r0, #1
 800171e:	d102      	bne.n	8001726 <_write_r+0x1e>
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	b103      	cbz	r3, 8001726 <_write_r+0x1e>
 8001724:	6023      	str	r3, [r4, #0]
 8001726:	bd38      	pop	{r3, r4, r5, pc}
 8001728:	200004a8 	.word	0x200004a8

0800172c <__swsetup_r>:
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <__swsetup_r+0xcc>)
 800172e:	b570      	push	{r4, r5, r6, lr}
 8001730:	681d      	ldr	r5, [r3, #0]
 8001732:	4606      	mov	r6, r0
 8001734:	460c      	mov	r4, r1
 8001736:	b125      	cbz	r5, 8001742 <__swsetup_r+0x16>
 8001738:	69ab      	ldr	r3, [r5, #24]
 800173a:	b913      	cbnz	r3, 8001742 <__swsetup_r+0x16>
 800173c:	4628      	mov	r0, r5
 800173e:	f7ff f9bf 	bl	8000ac0 <__sinit>
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <__swsetup_r+0xd0>)
 8001744:	429c      	cmp	r4, r3
 8001746:	d10f      	bne.n	8001768 <__swsetup_r+0x3c>
 8001748:	686c      	ldr	r4, [r5, #4]
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001750:	0719      	lsls	r1, r3, #28
 8001752:	d42c      	bmi.n	80017ae <__swsetup_r+0x82>
 8001754:	06dd      	lsls	r5, r3, #27
 8001756:	d411      	bmi.n	800177c <__swsetup_r+0x50>
 8001758:	2309      	movs	r3, #9
 800175a:	6033      	str	r3, [r6, #0]
 800175c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001760:	81a3      	strh	r3, [r4, #12]
 8001762:	f04f 30ff 	mov.w	r0, #4294967295
 8001766:	e03e      	b.n	80017e6 <__swsetup_r+0xba>
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <__swsetup_r+0xd4>)
 800176a:	429c      	cmp	r4, r3
 800176c:	d101      	bne.n	8001772 <__swsetup_r+0x46>
 800176e:	68ac      	ldr	r4, [r5, #8]
 8001770:	e7eb      	b.n	800174a <__swsetup_r+0x1e>
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <__swsetup_r+0xd8>)
 8001774:	429c      	cmp	r4, r3
 8001776:	bf08      	it	eq
 8001778:	68ec      	ldreq	r4, [r5, #12]
 800177a:	e7e6      	b.n	800174a <__swsetup_r+0x1e>
 800177c:	0758      	lsls	r0, r3, #29
 800177e:	d512      	bpl.n	80017a6 <__swsetup_r+0x7a>
 8001780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001782:	b141      	cbz	r1, 8001796 <__swsetup_r+0x6a>
 8001784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001788:	4299      	cmp	r1, r3
 800178a:	d002      	beq.n	8001792 <__swsetup_r+0x66>
 800178c:	4630      	mov	r0, r6
 800178e:	f000 f9ab 	bl	8001ae8 <_free_r>
 8001792:	2300      	movs	r3, #0
 8001794:	6363      	str	r3, [r4, #52]	; 0x34
 8001796:	89a3      	ldrh	r3, [r4, #12]
 8001798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800179c:	81a3      	strh	r3, [r4, #12]
 800179e:	2300      	movs	r3, #0
 80017a0:	6063      	str	r3, [r4, #4]
 80017a2:	6923      	ldr	r3, [r4, #16]
 80017a4:	6023      	str	r3, [r4, #0]
 80017a6:	89a3      	ldrh	r3, [r4, #12]
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	81a3      	strh	r3, [r4, #12]
 80017ae:	6923      	ldr	r3, [r4, #16]
 80017b0:	b94b      	cbnz	r3, 80017c6 <__swsetup_r+0x9a>
 80017b2:	89a3      	ldrh	r3, [r4, #12]
 80017b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80017b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017bc:	d003      	beq.n	80017c6 <__swsetup_r+0x9a>
 80017be:	4621      	mov	r1, r4
 80017c0:	4630      	mov	r0, r6
 80017c2:	f000 f92b 	bl	8001a1c <__smakebuf_r>
 80017c6:	89a0      	ldrh	r0, [r4, #12]
 80017c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017cc:	f010 0301 	ands.w	r3, r0, #1
 80017d0:	d00a      	beq.n	80017e8 <__swsetup_r+0xbc>
 80017d2:	2300      	movs	r3, #0
 80017d4:	60a3      	str	r3, [r4, #8]
 80017d6:	6963      	ldr	r3, [r4, #20]
 80017d8:	425b      	negs	r3, r3
 80017da:	61a3      	str	r3, [r4, #24]
 80017dc:	6923      	ldr	r3, [r4, #16]
 80017de:	b943      	cbnz	r3, 80017f2 <__swsetup_r+0xc6>
 80017e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80017e4:	d1ba      	bne.n	800175c <__swsetup_r+0x30>
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
 80017e8:	0781      	lsls	r1, r0, #30
 80017ea:	bf58      	it	pl
 80017ec:	6963      	ldrpl	r3, [r4, #20]
 80017ee:	60a3      	str	r3, [r4, #8]
 80017f0:	e7f4      	b.n	80017dc <__swsetup_r+0xb0>
 80017f2:	2000      	movs	r0, #0
 80017f4:	e7f7      	b.n	80017e6 <__swsetup_r+0xba>
 80017f6:	bf00      	nop
 80017f8:	20000404 	.word	0x20000404
 80017fc:	08001cb0 	.word	0x08001cb0
 8001800:	08001cd0 	.word	0x08001cd0
 8001804:	08001c90 	.word	0x08001c90

08001808 <_close_r>:
 8001808:	b538      	push	{r3, r4, r5, lr}
 800180a:	4d06      	ldr	r5, [pc, #24]	; (8001824 <_close_r+0x1c>)
 800180c:	2300      	movs	r3, #0
 800180e:	4604      	mov	r4, r0
 8001810:	4608      	mov	r0, r1
 8001812:	602b      	str	r3, [r5, #0]
 8001814:	f7fe ffc9 	bl	80007aa <_close>
 8001818:	1c43      	adds	r3, r0, #1
 800181a:	d102      	bne.n	8001822 <_close_r+0x1a>
 800181c:	682b      	ldr	r3, [r5, #0]
 800181e:	b103      	cbz	r3, 8001822 <_close_r+0x1a>
 8001820:	6023      	str	r3, [r4, #0]
 8001822:	bd38      	pop	{r3, r4, r5, pc}
 8001824:	200004a8 	.word	0x200004a8

08001828 <__sflush_r>:
 8001828:	898a      	ldrh	r2, [r1, #12]
 800182a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800182e:	4605      	mov	r5, r0
 8001830:	0710      	lsls	r0, r2, #28
 8001832:	460c      	mov	r4, r1
 8001834:	d458      	bmi.n	80018e8 <__sflush_r+0xc0>
 8001836:	684b      	ldr	r3, [r1, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dc05      	bgt.n	8001848 <__sflush_r+0x20>
 800183c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	dc02      	bgt.n	8001848 <__sflush_r+0x20>
 8001842:	2000      	movs	r0, #0
 8001844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800184a:	2e00      	cmp	r6, #0
 800184c:	d0f9      	beq.n	8001842 <__sflush_r+0x1a>
 800184e:	2300      	movs	r3, #0
 8001850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001854:	682f      	ldr	r7, [r5, #0]
 8001856:	602b      	str	r3, [r5, #0]
 8001858:	d032      	beq.n	80018c0 <__sflush_r+0x98>
 800185a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800185c:	89a3      	ldrh	r3, [r4, #12]
 800185e:	075a      	lsls	r2, r3, #29
 8001860:	d505      	bpl.n	800186e <__sflush_r+0x46>
 8001862:	6863      	ldr	r3, [r4, #4]
 8001864:	1ac0      	subs	r0, r0, r3
 8001866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001868:	b10b      	cbz	r3, 800186e <__sflush_r+0x46>
 800186a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800186c:	1ac0      	subs	r0, r0, r3
 800186e:	2300      	movs	r3, #0
 8001870:	4602      	mov	r2, r0
 8001872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001874:	6a21      	ldr	r1, [r4, #32]
 8001876:	4628      	mov	r0, r5
 8001878:	47b0      	blx	r6
 800187a:	1c43      	adds	r3, r0, #1
 800187c:	89a3      	ldrh	r3, [r4, #12]
 800187e:	d106      	bne.n	800188e <__sflush_r+0x66>
 8001880:	6829      	ldr	r1, [r5, #0]
 8001882:	291d      	cmp	r1, #29
 8001884:	d82c      	bhi.n	80018e0 <__sflush_r+0xb8>
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <__sflush_r+0x108>)
 8001888:	40ca      	lsrs	r2, r1
 800188a:	07d6      	lsls	r6, r2, #31
 800188c:	d528      	bpl.n	80018e0 <__sflush_r+0xb8>
 800188e:	2200      	movs	r2, #0
 8001890:	6062      	str	r2, [r4, #4]
 8001892:	04d9      	lsls	r1, r3, #19
 8001894:	6922      	ldr	r2, [r4, #16]
 8001896:	6022      	str	r2, [r4, #0]
 8001898:	d504      	bpl.n	80018a4 <__sflush_r+0x7c>
 800189a:	1c42      	adds	r2, r0, #1
 800189c:	d101      	bne.n	80018a2 <__sflush_r+0x7a>
 800189e:	682b      	ldr	r3, [r5, #0]
 80018a0:	b903      	cbnz	r3, 80018a4 <__sflush_r+0x7c>
 80018a2:	6560      	str	r0, [r4, #84]	; 0x54
 80018a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018a6:	602f      	str	r7, [r5, #0]
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d0ca      	beq.n	8001842 <__sflush_r+0x1a>
 80018ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018b0:	4299      	cmp	r1, r3
 80018b2:	d002      	beq.n	80018ba <__sflush_r+0x92>
 80018b4:	4628      	mov	r0, r5
 80018b6:	f000 f917 	bl	8001ae8 <_free_r>
 80018ba:	2000      	movs	r0, #0
 80018bc:	6360      	str	r0, [r4, #52]	; 0x34
 80018be:	e7c1      	b.n	8001844 <__sflush_r+0x1c>
 80018c0:	6a21      	ldr	r1, [r4, #32]
 80018c2:	2301      	movs	r3, #1
 80018c4:	4628      	mov	r0, r5
 80018c6:	47b0      	blx	r6
 80018c8:	1c41      	adds	r1, r0, #1
 80018ca:	d1c7      	bne.n	800185c <__sflush_r+0x34>
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0c4      	beq.n	800185c <__sflush_r+0x34>
 80018d2:	2b1d      	cmp	r3, #29
 80018d4:	d001      	beq.n	80018da <__sflush_r+0xb2>
 80018d6:	2b16      	cmp	r3, #22
 80018d8:	d101      	bne.n	80018de <__sflush_r+0xb6>
 80018da:	602f      	str	r7, [r5, #0]
 80018dc:	e7b1      	b.n	8001842 <__sflush_r+0x1a>
 80018de:	89a3      	ldrh	r3, [r4, #12]
 80018e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e4:	81a3      	strh	r3, [r4, #12]
 80018e6:	e7ad      	b.n	8001844 <__sflush_r+0x1c>
 80018e8:	690f      	ldr	r7, [r1, #16]
 80018ea:	2f00      	cmp	r7, #0
 80018ec:	d0a9      	beq.n	8001842 <__sflush_r+0x1a>
 80018ee:	0793      	lsls	r3, r2, #30
 80018f0:	680e      	ldr	r6, [r1, #0]
 80018f2:	bf08      	it	eq
 80018f4:	694b      	ldreq	r3, [r1, #20]
 80018f6:	600f      	str	r7, [r1, #0]
 80018f8:	bf18      	it	ne
 80018fa:	2300      	movne	r3, #0
 80018fc:	eba6 0807 	sub.w	r8, r6, r7
 8001900:	608b      	str	r3, [r1, #8]
 8001902:	f1b8 0f00 	cmp.w	r8, #0
 8001906:	dd9c      	ble.n	8001842 <__sflush_r+0x1a>
 8001908:	6a21      	ldr	r1, [r4, #32]
 800190a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800190c:	4643      	mov	r3, r8
 800190e:	463a      	mov	r2, r7
 8001910:	4628      	mov	r0, r5
 8001912:	47b0      	blx	r6
 8001914:	2800      	cmp	r0, #0
 8001916:	dc06      	bgt.n	8001926 <__sflush_r+0xfe>
 8001918:	89a3      	ldrh	r3, [r4, #12]
 800191a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191e:	81a3      	strh	r3, [r4, #12]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	e78e      	b.n	8001844 <__sflush_r+0x1c>
 8001926:	4407      	add	r7, r0
 8001928:	eba8 0800 	sub.w	r8, r8, r0
 800192c:	e7e9      	b.n	8001902 <__sflush_r+0xda>
 800192e:	bf00      	nop
 8001930:	20400001 	.word	0x20400001

08001934 <_fflush_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	690b      	ldr	r3, [r1, #16]
 8001938:	4605      	mov	r5, r0
 800193a:	460c      	mov	r4, r1
 800193c:	b913      	cbnz	r3, 8001944 <_fflush_r+0x10>
 800193e:	2500      	movs	r5, #0
 8001940:	4628      	mov	r0, r5
 8001942:	bd38      	pop	{r3, r4, r5, pc}
 8001944:	b118      	cbz	r0, 800194e <_fflush_r+0x1a>
 8001946:	6983      	ldr	r3, [r0, #24]
 8001948:	b90b      	cbnz	r3, 800194e <_fflush_r+0x1a>
 800194a:	f7ff f8b9 	bl	8000ac0 <__sinit>
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <_fflush_r+0x6c>)
 8001950:	429c      	cmp	r4, r3
 8001952:	d11b      	bne.n	800198c <_fflush_r+0x58>
 8001954:	686c      	ldr	r4, [r5, #4]
 8001956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0ef      	beq.n	800193e <_fflush_r+0xa>
 800195e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001960:	07d0      	lsls	r0, r2, #31
 8001962:	d404      	bmi.n	800196e <_fflush_r+0x3a>
 8001964:	0599      	lsls	r1, r3, #22
 8001966:	d402      	bmi.n	800196e <_fflush_r+0x3a>
 8001968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800196a:	f7ff f947 	bl	8000bfc <__retarget_lock_acquire_recursive>
 800196e:	4628      	mov	r0, r5
 8001970:	4621      	mov	r1, r4
 8001972:	f7ff ff59 	bl	8001828 <__sflush_r>
 8001976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001978:	07da      	lsls	r2, r3, #31
 800197a:	4605      	mov	r5, r0
 800197c:	d4e0      	bmi.n	8001940 <_fflush_r+0xc>
 800197e:	89a3      	ldrh	r3, [r4, #12]
 8001980:	059b      	lsls	r3, r3, #22
 8001982:	d4dd      	bmi.n	8001940 <_fflush_r+0xc>
 8001984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001986:	f7ff f93a 	bl	8000bfe <__retarget_lock_release_recursive>
 800198a:	e7d9      	b.n	8001940 <_fflush_r+0xc>
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <_fflush_r+0x70>)
 800198e:	429c      	cmp	r4, r3
 8001990:	d101      	bne.n	8001996 <_fflush_r+0x62>
 8001992:	68ac      	ldr	r4, [r5, #8]
 8001994:	e7df      	b.n	8001956 <_fflush_r+0x22>
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <_fflush_r+0x74>)
 8001998:	429c      	cmp	r4, r3
 800199a:	bf08      	it	eq
 800199c:	68ec      	ldreq	r4, [r5, #12]
 800199e:	e7da      	b.n	8001956 <_fflush_r+0x22>
 80019a0:	08001cb0 	.word	0x08001cb0
 80019a4:	08001cd0 	.word	0x08001cd0
 80019a8:	08001c90 	.word	0x08001c90

080019ac <_lseek_r>:
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4d07      	ldr	r5, [pc, #28]	; (80019cc <_lseek_r+0x20>)
 80019b0:	4604      	mov	r4, r0
 80019b2:	4608      	mov	r0, r1
 80019b4:	4611      	mov	r1, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	602a      	str	r2, [r5, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f7fe ff1c 	bl	80007f8 <_lseek>
 80019c0:	1c43      	adds	r3, r0, #1
 80019c2:	d102      	bne.n	80019ca <_lseek_r+0x1e>
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	b103      	cbz	r3, 80019ca <_lseek_r+0x1e>
 80019c8:	6023      	str	r3, [r4, #0]
 80019ca:	bd38      	pop	{r3, r4, r5, pc}
 80019cc:	200004a8 	.word	0x200004a8

080019d0 <__swhatbuf_r>:
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	460e      	mov	r6, r1
 80019d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d8:	2900      	cmp	r1, #0
 80019da:	b096      	sub	sp, #88	; 0x58
 80019dc:	4614      	mov	r4, r2
 80019de:	461d      	mov	r5, r3
 80019e0:	da08      	bge.n	80019f4 <__swhatbuf_r+0x24>
 80019e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	602a      	str	r2, [r5, #0]
 80019ea:	061a      	lsls	r2, r3, #24
 80019ec:	d410      	bmi.n	8001a10 <__swhatbuf_r+0x40>
 80019ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f2:	e00e      	b.n	8001a12 <__swhatbuf_r+0x42>
 80019f4:	466a      	mov	r2, sp
 80019f6:	f000 f905 	bl	8001c04 <_fstat_r>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	dbf1      	blt.n	80019e2 <__swhatbuf_r+0x12>
 80019fe:	9a01      	ldr	r2, [sp, #4]
 8001a00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a08:	425a      	negs	r2, r3
 8001a0a:	415a      	adcs	r2, r3
 8001a0c:	602a      	str	r2, [r5, #0]
 8001a0e:	e7ee      	b.n	80019ee <__swhatbuf_r+0x1e>
 8001a10:	2340      	movs	r3, #64	; 0x40
 8001a12:	2000      	movs	r0, #0
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	b016      	add	sp, #88	; 0x58
 8001a18:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a1c <__smakebuf_r>:
 8001a1c:	898b      	ldrh	r3, [r1, #12]
 8001a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a20:	079d      	lsls	r5, r3, #30
 8001a22:	4606      	mov	r6, r0
 8001a24:	460c      	mov	r4, r1
 8001a26:	d507      	bpl.n	8001a38 <__smakebuf_r+0x1c>
 8001a28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a2c:	6023      	str	r3, [r4, #0]
 8001a2e:	6123      	str	r3, [r4, #16]
 8001a30:	2301      	movs	r3, #1
 8001a32:	6163      	str	r3, [r4, #20]
 8001a34:	b002      	add	sp, #8
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	ab01      	add	r3, sp, #4
 8001a3a:	466a      	mov	r2, sp
 8001a3c:	f7ff ffc8 	bl	80019d0 <__swhatbuf_r>
 8001a40:	9900      	ldr	r1, [sp, #0]
 8001a42:	4605      	mov	r5, r0
 8001a44:	4630      	mov	r0, r6
 8001a46:	f7ff f8fb 	bl	8000c40 <_malloc_r>
 8001a4a:	b948      	cbnz	r0, 8001a60 <__smakebuf_r+0x44>
 8001a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a50:	059a      	lsls	r2, r3, #22
 8001a52:	d4ef      	bmi.n	8001a34 <__smakebuf_r+0x18>
 8001a54:	f023 0303 	bic.w	r3, r3, #3
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	81a3      	strh	r3, [r4, #12]
 8001a5e:	e7e3      	b.n	8001a28 <__smakebuf_r+0xc>
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <__smakebuf_r+0x7c>)
 8001a62:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a64:	89a3      	ldrh	r3, [r4, #12]
 8001a66:	6020      	str	r0, [r4, #0]
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	81a3      	strh	r3, [r4, #12]
 8001a6e:	9b00      	ldr	r3, [sp, #0]
 8001a70:	6163      	str	r3, [r4, #20]
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	6120      	str	r0, [r4, #16]
 8001a76:	b15b      	cbz	r3, 8001a90 <__smakebuf_r+0x74>
 8001a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	f000 f8d3 	bl	8001c28 <_isatty_r>
 8001a82:	b128      	cbz	r0, 8001a90 <__smakebuf_r+0x74>
 8001a84:	89a3      	ldrh	r3, [r4, #12]
 8001a86:	f023 0303 	bic.w	r3, r3, #3
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	81a3      	strh	r3, [r4, #12]
 8001a90:	89a0      	ldrh	r0, [r4, #12]
 8001a92:	4305      	orrs	r5, r0
 8001a94:	81a5      	strh	r5, [r4, #12]
 8001a96:	e7cd      	b.n	8001a34 <__smakebuf_r+0x18>
 8001a98:	08000a59 	.word	0x08000a59

08001a9c <memmove>:
 8001a9c:	4288      	cmp	r0, r1
 8001a9e:	b510      	push	{r4, lr}
 8001aa0:	eb01 0402 	add.w	r4, r1, r2
 8001aa4:	d902      	bls.n	8001aac <memmove+0x10>
 8001aa6:	4284      	cmp	r4, r0
 8001aa8:	4623      	mov	r3, r4
 8001aaa:	d807      	bhi.n	8001abc <memmove+0x20>
 8001aac:	1e43      	subs	r3, r0, #1
 8001aae:	42a1      	cmp	r1, r4
 8001ab0:	d008      	beq.n	8001ac4 <memmove+0x28>
 8001ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001aba:	e7f8      	b.n	8001aae <memmove+0x12>
 8001abc:	4402      	add	r2, r0
 8001abe:	4601      	mov	r1, r0
 8001ac0:	428a      	cmp	r2, r1
 8001ac2:	d100      	bne.n	8001ac6 <memmove+0x2a>
 8001ac4:	bd10      	pop	{r4, pc}
 8001ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001ace:	e7f7      	b.n	8001ac0 <memmove+0x24>

08001ad0 <__malloc_lock>:
 8001ad0:	4801      	ldr	r0, [pc, #4]	; (8001ad8 <__malloc_lock+0x8>)
 8001ad2:	f7ff b893 	b.w	8000bfc <__retarget_lock_acquire_recursive>
 8001ad6:	bf00      	nop
 8001ad8:	2000049c 	.word	0x2000049c

08001adc <__malloc_unlock>:
 8001adc:	4801      	ldr	r0, [pc, #4]	; (8001ae4 <__malloc_unlock+0x8>)
 8001ade:	f7ff b88e 	b.w	8000bfe <__retarget_lock_release_recursive>
 8001ae2:	bf00      	nop
 8001ae4:	2000049c 	.word	0x2000049c

08001ae8 <_free_r>:
 8001ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001aea:	2900      	cmp	r1, #0
 8001aec:	d044      	beq.n	8001b78 <_free_r+0x90>
 8001aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001af2:	9001      	str	r0, [sp, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f1a1 0404 	sub.w	r4, r1, #4
 8001afa:	bfb8      	it	lt
 8001afc:	18e4      	addlt	r4, r4, r3
 8001afe:	f7ff ffe7 	bl	8001ad0 <__malloc_lock>
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <_free_r+0x94>)
 8001b04:	9801      	ldr	r0, [sp, #4]
 8001b06:	6813      	ldr	r3, [r2, #0]
 8001b08:	b933      	cbnz	r3, 8001b18 <_free_r+0x30>
 8001b0a:	6063      	str	r3, [r4, #4]
 8001b0c:	6014      	str	r4, [r2, #0]
 8001b0e:	b003      	add	sp, #12
 8001b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b14:	f7ff bfe2 	b.w	8001adc <__malloc_unlock>
 8001b18:	42a3      	cmp	r3, r4
 8001b1a:	d908      	bls.n	8001b2e <_free_r+0x46>
 8001b1c:	6825      	ldr	r5, [r4, #0]
 8001b1e:	1961      	adds	r1, r4, r5
 8001b20:	428b      	cmp	r3, r1
 8001b22:	bf01      	itttt	eq
 8001b24:	6819      	ldreq	r1, [r3, #0]
 8001b26:	685b      	ldreq	r3, [r3, #4]
 8001b28:	1949      	addeq	r1, r1, r5
 8001b2a:	6021      	streq	r1, [r4, #0]
 8001b2c:	e7ed      	b.n	8001b0a <_free_r+0x22>
 8001b2e:	461a      	mov	r2, r3
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	b10b      	cbz	r3, 8001b38 <_free_r+0x50>
 8001b34:	42a3      	cmp	r3, r4
 8001b36:	d9fa      	bls.n	8001b2e <_free_r+0x46>
 8001b38:	6811      	ldr	r1, [r2, #0]
 8001b3a:	1855      	adds	r5, r2, r1
 8001b3c:	42a5      	cmp	r5, r4
 8001b3e:	d10b      	bne.n	8001b58 <_free_r+0x70>
 8001b40:	6824      	ldr	r4, [r4, #0]
 8001b42:	4421      	add	r1, r4
 8001b44:	1854      	adds	r4, r2, r1
 8001b46:	42a3      	cmp	r3, r4
 8001b48:	6011      	str	r1, [r2, #0]
 8001b4a:	d1e0      	bne.n	8001b0e <_free_r+0x26>
 8001b4c:	681c      	ldr	r4, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	6053      	str	r3, [r2, #4]
 8001b52:	4421      	add	r1, r4
 8001b54:	6011      	str	r1, [r2, #0]
 8001b56:	e7da      	b.n	8001b0e <_free_r+0x26>
 8001b58:	d902      	bls.n	8001b60 <_free_r+0x78>
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	6003      	str	r3, [r0, #0]
 8001b5e:	e7d6      	b.n	8001b0e <_free_r+0x26>
 8001b60:	6825      	ldr	r5, [r4, #0]
 8001b62:	1961      	adds	r1, r4, r5
 8001b64:	428b      	cmp	r3, r1
 8001b66:	bf04      	itt	eq
 8001b68:	6819      	ldreq	r1, [r3, #0]
 8001b6a:	685b      	ldreq	r3, [r3, #4]
 8001b6c:	6063      	str	r3, [r4, #4]
 8001b6e:	bf04      	itt	eq
 8001b70:	1949      	addeq	r1, r1, r5
 8001b72:	6021      	streq	r1, [r4, #0]
 8001b74:	6054      	str	r4, [r2, #4]
 8001b76:	e7ca      	b.n	8001b0e <_free_r+0x26>
 8001b78:	b003      	add	sp, #12
 8001b7a:	bd30      	pop	{r4, r5, pc}
 8001b7c:	200004a0 	.word	0x200004a0

08001b80 <_realloc_r>:
 8001b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b84:	4680      	mov	r8, r0
 8001b86:	4614      	mov	r4, r2
 8001b88:	460e      	mov	r6, r1
 8001b8a:	b921      	cbnz	r1, 8001b96 <_realloc_r+0x16>
 8001b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b90:	4611      	mov	r1, r2
 8001b92:	f7ff b855 	b.w	8000c40 <_malloc_r>
 8001b96:	b92a      	cbnz	r2, 8001ba4 <_realloc_r+0x24>
 8001b98:	f7ff ffa6 	bl	8001ae8 <_free_r>
 8001b9c:	4625      	mov	r5, r4
 8001b9e:	4628      	mov	r0, r5
 8001ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ba4:	f000 f850 	bl	8001c48 <_malloc_usable_size_r>
 8001ba8:	4284      	cmp	r4, r0
 8001baa:	4607      	mov	r7, r0
 8001bac:	d802      	bhi.n	8001bb4 <_realloc_r+0x34>
 8001bae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001bb2:	d812      	bhi.n	8001bda <_realloc_r+0x5a>
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	f7ff f842 	bl	8000c40 <_malloc_r>
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d0ed      	beq.n	8001b9e <_realloc_r+0x1e>
 8001bc2:	42bc      	cmp	r4, r7
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	4631      	mov	r1, r6
 8001bc8:	bf28      	it	cs
 8001bca:	463a      	movcs	r2, r7
 8001bcc:	f7fe fed2 	bl	8000974 <memcpy>
 8001bd0:	4631      	mov	r1, r6
 8001bd2:	4640      	mov	r0, r8
 8001bd4:	f7ff ff88 	bl	8001ae8 <_free_r>
 8001bd8:	e7e1      	b.n	8001b9e <_realloc_r+0x1e>
 8001bda:	4635      	mov	r5, r6
 8001bdc:	e7df      	b.n	8001b9e <_realloc_r+0x1e>
	...

08001be0 <_read_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	4d07      	ldr	r5, [pc, #28]	; (8001c00 <_read_r+0x20>)
 8001be4:	4604      	mov	r4, r0
 8001be6:	4608      	mov	r0, r1
 8001be8:	4611      	mov	r1, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	602a      	str	r2, [r5, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f7fe fda2 	bl	8000738 <_read>
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	d102      	bne.n	8001bfe <_read_r+0x1e>
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	b103      	cbz	r3, 8001bfe <_read_r+0x1e>
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
 8001c00:	200004a8 	.word	0x200004a8

08001c04 <_fstat_r>:
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4d07      	ldr	r5, [pc, #28]	; (8001c24 <_fstat_r+0x20>)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	602b      	str	r3, [r5, #0]
 8001c12:	f7fe fdd6 	bl	80007c2 <_fstat>
 8001c16:	1c43      	adds	r3, r0, #1
 8001c18:	d102      	bne.n	8001c20 <_fstat_r+0x1c>
 8001c1a:	682b      	ldr	r3, [r5, #0]
 8001c1c:	b103      	cbz	r3, 8001c20 <_fstat_r+0x1c>
 8001c1e:	6023      	str	r3, [r4, #0]
 8001c20:	bd38      	pop	{r3, r4, r5, pc}
 8001c22:	bf00      	nop
 8001c24:	200004a8 	.word	0x200004a8

08001c28 <_isatty_r>:
 8001c28:	b538      	push	{r3, r4, r5, lr}
 8001c2a:	4d06      	ldr	r5, [pc, #24]	; (8001c44 <_isatty_r+0x1c>)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	4604      	mov	r4, r0
 8001c30:	4608      	mov	r0, r1
 8001c32:	602b      	str	r3, [r5, #0]
 8001c34:	f7fe fdd5 	bl	80007e2 <_isatty>
 8001c38:	1c43      	adds	r3, r0, #1
 8001c3a:	d102      	bne.n	8001c42 <_isatty_r+0x1a>
 8001c3c:	682b      	ldr	r3, [r5, #0]
 8001c3e:	b103      	cbz	r3, 8001c42 <_isatty_r+0x1a>
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	bd38      	pop	{r3, r4, r5, pc}
 8001c44:	200004a8 	.word	0x200004a8

08001c48 <_malloc_usable_size_r>:
 8001c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c4c:	1f18      	subs	r0, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bfbc      	itt	lt
 8001c52:	580b      	ldrlt	r3, [r1, r0]
 8001c54:	18c0      	addlt	r0, r0, r3
 8001c56:	4770      	bx	lr

08001c58 <_init>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	bf00      	nop
 8001c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5e:	bc08      	pop	{r3}
 8001c60:	469e      	mov	lr, r3
 8001c62:	4770      	bx	lr

08001c64 <_fini>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	bf00      	nop
 8001c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c6a:	bc08      	pop	{r3}
 8001c6c:	469e      	mov	lr, r3
 8001c6e:	4770      	bx	lr
