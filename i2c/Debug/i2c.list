
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012bc  080012bc  00020468  2**0
                  CONTENTS
  4 .ARM          00000000  080012bc  080012bc  00020468  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012bc  080012bc  00020468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012bc  080012bc  000112bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012c0  080012c0  000112c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000400  080012c4  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000468  0800132c  00020468  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800132c  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000195c  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006d8  00000000  00000000  00021df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  000224d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  00022700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014bbe  00000000  00000000  000228d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034f2  00000000  00000000  00037496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a28  00000000  00000000  0003a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd3b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b00  00000000  00000000  000bd400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000468 	.word	0x20000468
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800122c 	.word	0x0800122c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000046c 	.word	0x2000046c
 80001dc:	0800122c 	.word	0x0800122c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
 *\param[in]
 *\param[out]
 *\retval
 */
int
main() {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
	vectortable_move();
 8000286:	f000 f8a1 	bl	80003cc <vectortable_move>
	tim_systick_init();
 800028a:	f000 f8bb 	bl	8000404 <tim_systick_init>
	i2c_init();
 800028e:	f000 f8d9 	bl	8000444 <i2c_init>
	//interrupt_init();
	//dma_init();

	/*read i2c address of acc + mag*/
	acc_id = i2c_read_data(ACC_ADDRESS_7BIT, 0x0F);
 8000292:	210f      	movs	r1, #15
 8000294:	2019      	movs	r0, #25
 8000296:	f000 f957 	bl	8000548 <i2c_read_data>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <main+0x114>)
 80002a0:	701a      	strb	r2, [r3, #0]
	mag_id = i2c_read_data(MAG_ADDRESS_7BIT, 0x4F);
 80002a2:	214f      	movs	r1, #79	; 0x4f
 80002a4:	201e      	movs	r0, #30
 80002a6:	f000 f94f 	bl	8000548 <i2c_read_data>
 80002aa:	4603      	mov	r3, r0
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b3a      	ldr	r3, [pc, #232]	; (8000398 <main+0x118>)
 80002b0:	701a      	strb	r2, [r3, #0]
	sprintf(data_buffer, "Acc_ID: %#02x---Mag_ID: %#02x\n\r",acc_id, mag_id);
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <main+0x114>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b37      	ldr	r3, [pc, #220]	; (8000398 <main+0x118>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4937      	ldr	r1, [pc, #220]	; (800039c <main+0x11c>)
 80002be:	4838      	ldr	r0, [pc, #224]	; (80003a0 <main+0x120>)
 80002c0:	f000 fb54 	bl	800096c <siprintf>

	while (1) {

		/*cfg acc mode*/
		i2c_write_data(ACC_ADDRESS_7BIT, 0x20, 0x57);
 80002c4:	2257      	movs	r2, #87	; 0x57
 80002c6:	2120      	movs	r1, #32
 80002c8:	2019      	movs	r0, #25
 80002ca:	f000 f9f7 	bl	80006bc <i2c_write_data>

		x_l = i2c_read_data(ACC_ADDRESS_7BIT, 0x28);
 80002ce:	2128      	movs	r1, #40	; 0x28
 80002d0:	2019      	movs	r0, #25
 80002d2:	f000 f939 	bl	8000548 <i2c_read_data>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <main+0x124>)
 80002dc:	701a      	strb	r2, [r3, #0]
		x_h = i2c_read_data(ACC_ADDRESS_7BIT, 0x29);
 80002de:	2129      	movs	r1, #41	; 0x29
 80002e0:	2019      	movs	r0, #25
 80002e2:	f000 f931 	bl	8000548 <i2c_read_data>
 80002e6:	4603      	mov	r3, r0
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <main+0x128>)
 80002ec:	701a      	strb	r2, [r3, #0]
		y_l = i2c_read_data(ACC_ADDRESS_7BIT, 0x2A);
 80002ee:	212a      	movs	r1, #42	; 0x2a
 80002f0:	2019      	movs	r0, #25
 80002f2:	f000 f929 	bl	8000548 <i2c_read_data>
 80002f6:	4603      	mov	r3, r0
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <main+0x12c>)
 80002fc:	701a      	strb	r2, [r3, #0]
		y_h = i2c_read_data(ACC_ADDRESS_7BIT, 0x2B);
 80002fe:	212b      	movs	r1, #43	; 0x2b
 8000300:	2019      	movs	r0, #25
 8000302:	f000 f921 	bl	8000548 <i2c_read_data>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	4b29      	ldr	r3, [pc, #164]	; (80003b0 <main+0x130>)
 800030c:	701a      	strb	r2, [r3, #0]
		z_l = i2c_read_data(ACC_ADDRESS_7BIT, 0x2C);
 800030e:	212c      	movs	r1, #44	; 0x2c
 8000310:	2019      	movs	r0, #25
 8000312:	f000 f919 	bl	8000548 <i2c_read_data>
 8000316:	4603      	mov	r3, r0
 8000318:	461a      	mov	r2, r3
 800031a:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <main+0x134>)
 800031c:	701a      	strb	r2, [r3, #0]
		z_h = i2c_read_data(ACC_ADDRESS_7BIT, 0x2D);
 800031e:	212d      	movs	r1, #45	; 0x2d
 8000320:	2019      	movs	r0, #25
 8000322:	f000 f911 	bl	8000548 <i2c_read_data>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <main+0x138>)
 800032c:	701a      	strb	r2, [r3, #0]

		x = (x_h << 8) | x_l;
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <main+0x128>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	021b      	lsls	r3, r3, #8
 8000334:	b21a      	sxth	r2, r3
 8000336:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <main+0x124>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	b21b      	sxth	r3, r3
 800033c:	4313      	orrs	r3, r2
 800033e:	b21a      	sxth	r2, r3
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <main+0x13c>)
 8000342:	801a      	strh	r2, [r3, #0]
		y = (y_h << 8) | y_l;
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <main+0x130>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	021b      	lsls	r3, r3, #8
 800034a:	b21a      	sxth	r2, r3
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <main+0x12c>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	b21b      	sxth	r3, r3
 8000352:	4313      	orrs	r3, r2
 8000354:	b21a      	sxth	r2, r3
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <main+0x140>)
 8000358:	801a      	strh	r2, [r3, #0]
		z = (z_h << 8) | z_l;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <main+0x138>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	021b      	lsls	r3, r3, #8
 8000360:	b21a      	sxth	r2, r3
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <main+0x134>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b21b      	sxth	r3, r3
 8000368:	4313      	orrs	r3, r2
 800036a:	b21a      	sxth	r2, r3
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <main+0x144>)
 800036e:	801a      	strh	r2, [r3, #0]

		sprintf(data_buffer, "x = %d........y = %d........z = %d\n\r", x, y, z);
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <main+0x13c>)
 8000372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000376:	461a      	mov	r2, r3
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <main+0x140>)
 800037a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800037e:	4619      	mov	r1, r3
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <main+0x144>)
 8000382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	460b      	mov	r3, r1
 800038a:	490f      	ldr	r1, [pc, #60]	; (80003c8 <main+0x148>)
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <main+0x120>)
 800038e:	f000 faed 	bl	800096c <siprintf>
		i2c_write_data(ACC_ADDRESS_7BIT, 0x20, 0x57);
 8000392:	e797      	b.n	80002c4 <main+0x44>
 8000394:	20000490 	.word	0x20000490
 8000398:	20000491 	.word	0x20000491
 800039c:	08001244 	.word	0x08001244
 80003a0:	20000494 	.word	0x20000494
 80003a4:	20000485 	.word	0x20000485
 80003a8:	20000484 	.word	0x20000484
 80003ac:	20000487 	.word	0x20000487
 80003b0:	20000486 	.word	0x20000486
 80003b4:	20000489 	.word	0x20000489
 80003b8:	20000488 	.word	0x20000488
 80003bc:	2000048a 	.word	0x2000048a
 80003c0:	2000048c 	.word	0x2000048c
 80003c4:	2000048e 	.word	0x2000048e
 80003c8:	08001264 	.word	0x08001264

080003cc <vectortable_move>:
 *\param[out]
 *\retval
 */
void
vectortable_move()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *volatile)0x20000000;
 80003d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80003d6:	60bb      	str	r3, [r7, #8]
	void *volatile flash = (void *volatile)0x08000000;
 80003d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003dc:	607b      	str	r3, [r7, #4]
	memcpy(ram, flash, 0x198);
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	6879      	ldr	r1, [r7, #4]
 80003e2:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fab2 	bl	8000950 <memcpy>

	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <vectortable_move+0x34>)
 80003ee:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80003f6:	601a      	str	r2, [r3, #0]
}
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	e000ed08 	.word	0xe000ed08

08000404 <tim_systick_init>:
 *\param[out]
 *\retval
 */
void
tim_systick_init()
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
	uint32_t *SYS_CSR = (uint32_t *)(0xe000e010 + 0x00);
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <tim_systick_init+0x38>)
 800040c:	607b      	str	r3, [r7, #4]
	uint32_t *SYS_RVR = (uint32_t *)(0xe000e010 + 0x00);
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <tim_systick_init+0x38>)
 8000410:	603b      	str	r3, [r7, #0]

	/*clock source: processor clock*/
	*SYS_CSR |= (1 << 2);	// bit CLKSOURCE
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f043 0204 	orr.w	r2, r3, #4
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	601a      	str	r2, [r3, #0]

	/*set count*/
	*SYS_RVR = 160000 - 1;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <tim_systick_init+0x3c>)
 8000422:	601a      	str	r2, [r3, #0]

	/*enable the counter*/
	*SYS_CSR |= (1 << 0);	// bit ENABLE
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f043 0201 	orr.w	r2, r3, #1
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	e000e010 	.word	0xe000e010
 8000440:	000270ff 	.word	0x000270ff

08000444 <i2c_init>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
i2c_init() {
 8000444:	b480      	push	{r7}
 8000446:	b08b      	sub	sp, #44	; 0x2c
 8000448:	af00      	add	r7, sp, #0
	/*enable peripherals clock*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	4b36      	ldr	r3, [pc, #216]	; (8000528 <i2c_init+0xe4>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a35      	ldr	r2, [pc, #212]	; (8000528 <i2c_init+0xe4>)
 8000454:	f043 0302 	orr.w	r3, r3, #2
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
 800045a:	4b33      	ldr	r3, [pc, #204]	; (8000528 <i2c_init+0xe4>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	f003 0302 	and.w	r3, r3, #2
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <i2c_init+0xe4>)
 800046c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800046e:	4a2e      	ldr	r2, [pc, #184]	; (8000528 <i2c_init+0xe4>)
 8000470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000474:	6413      	str	r3, [r2, #64]	; 0x40
 8000476:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <i2c_init+0xe4>)
 8000478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800047a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

	uint32_t volatile* const GPIOB_MODER  = (uint32_t*)(0x40020400 + 0x00);
 8000482:	4b2a      	ldr	r3, [pc, #168]	; (800052c <i2c_init+0xe8>)
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t volatile* const GPIOB_PUPDR  = (uint32_t*)(0x40020400 + 0x0c);
 8000486:	4b2a      	ldr	r3, [pc, #168]	; (8000530 <i2c_init+0xec>)
 8000488:	623b      	str	r3, [r7, #32]
	uint32_t volatile* const GPIOB_AFLR	  = (uint32_t*)(0x40020400 + 0x20);
 800048a:	4b2a      	ldr	r3, [pc, #168]	; (8000534 <i2c_init+0xf0>)
 800048c:	61fb      	str	r3, [r7, #28]
	uint32_t volatile* const GPIOB_AFHR	  = (uint32_t*)(0x40020400 + 0x24);
 800048e:	4b2a      	ldr	r3, [pc, #168]	; (8000538 <i2c_init+0xf4>)
 8000490:	61bb      	str	r3, [r7, #24]
	uint32_t volatile* const I2C1_CR1	  = (uint32_t*)(0x40005400 + 0x00);
 8000492:	4b2a      	ldr	r3, [pc, #168]	; (800053c <i2c_init+0xf8>)
 8000494:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const I2C1_CR2	  = (uint32_t*)(0x40005400 + 0x04);
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <i2c_init+0xfc>)
 8000498:	613b      	str	r3, [r7, #16]
	uint32_t volatile* const I2C1_CCR	  = (uint32_t*)(0x40005400 + 0x1c);
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <i2c_init+0x100>)
 800049c:	60fb      	str	r3, [r7, #12]

	/*PB6 PB9 as alternate function mode*/
	*GPIOB_MODER &= ~((0b11 << (2 * 6)) | (0b11 << (2 * 9)));
 800049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f423 2243 	bic.w	r2, r3, #798720	; 0xc3000
 80004a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a8:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |=   (0b10 << (2 * 6)) | (0b10 << (2 * 9));
 80004aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f443 2202 	orr.w	r2, r3, #532480	; 0x82000
 80004b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b4:	601a      	str	r2, [r3, #0]

	*GPIOB_PUPDR |=   (0b01 << (2 * 6)) | (0b01 << (2 * 9));
 80004b6:	6a3b      	ldr	r3, [r7, #32]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f443 2282 	orr.w	r2, r3, #266240	; 0x41000
 80004be:	6a3b      	ldr	r3, [r7, #32]
 80004c0:	601a      	str	r2, [r3, #0]

	/*alternate function 4*/
	*GPIOB_AFLR  |= (4 << (4 * 6));
 80004c2:	69fb      	ldr	r3, [r7, #28]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	601a      	str	r2, [r3, #0]
	*GPIOB_AFHR  |= (4 << (4 * (9 - 8)));
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80004d6:	69bb      	ldr	r3, [r7, #24]
 80004d8:	601a      	str	r2, [r3, #0]

	/*reset i2c*/
	*I2C1_CR1 |= (1 << 15);
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	601a      	str	r2, [r3, #0]
	*I2C1_CR1 &= ~(1 << 15);
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	601a      	str	r2, [r3, #0]

	/*disable i2c*/
	*I2C1_CR1 &= ~(1 << 0);
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f023 0201 	bic.w	r2, r3, #1
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	601a      	str	r2, [r3, #0]

	/*peripheral clock : 16 MHz*/
	*I2C1_CR2 |= (16 << 0);
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f043 0210 	orr.w	r2, r3, #16
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	601a      	str	r2, [r3, #0]

	/*prescale : 100 kHz*/
	*I2C1_CCR = 160;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	22a0      	movs	r2, #160	; 0xa0
 800050e:	601a      	str	r2, [r3, #0]

	/*enable i2c*/
	*I2C1_CR1 |= (1 << 0);
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f043 0201 	orr.w	r2, r3, #1
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	372c      	adds	r7, #44	; 0x2c
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40023800 	.word	0x40023800
 800052c:	40020400 	.word	0x40020400
 8000530:	4002040c 	.word	0x4002040c
 8000534:	40020420 	.word	0x40020420
 8000538:	40020424 	.word	0x40020424
 800053c:	40005400 	.word	0x40005400
 8000540:	40005404 	.word	0x40005404
 8000544:	4000541c 	.word	0x4000541c

08000548 <i2c_read_data>:
 *\param[in]
 *\param[out]
 *\retval
 */
uint8_t
i2c_read_data(uint8_t SAD_7bit, uint8_t SUB) {
 8000548:	b480      	push	{r7}
 800054a:	b089      	sub	sp, #36	; 0x24
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	460a      	mov	r2, r1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	4613      	mov	r3, r2
 8000556:	71bb      	strb	r3, [r7, #6]
	uint32_t volatile* const I2C1_CR1   = (uint32_t*)(0x40005400 + 0x00);
 8000558:	4b54      	ldr	r3, [pc, #336]	; (80006ac <i2c_read_data+0x164>)
 800055a:	61fb      	str	r3, [r7, #28]
	uint32_t volatile* const I2C1_DR    = (uint32_t*)(0x40005400 + 0x10);
 800055c:	4b54      	ldr	r3, [pc, #336]	; (80006b0 <i2c_read_data+0x168>)
 800055e:	61bb      	str	r3, [r7, #24]
	uint32_t volatile* const I2C1_SR1   = (uint32_t*)(0x40005400 + 0x14);
 8000560:	4b54      	ldr	r3, [pc, #336]	; (80006b4 <i2c_read_data+0x16c>)
 8000562:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const I2C1_SR2   = (uint32_t*)(0x40005400 + 0x18);
 8000564:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <i2c_read_data+0x170>)
 8000566:	613b      	str	r3, [r7, #16]
	uint8_t data;

	SAD_7bit = SAD_7bit << 1;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	71fb      	strb	r3, [r7, #7]


	while (((*I2C1_SR2 >> 1) & 1) == 1);		/*wait BUSY flag - wait i2c bus is idled*/
 800056e:	bf00      	nop
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	085b      	lsrs	r3, r3, #1
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b01      	cmp	r3, #1
 800057c:	d0f8      	beq.n	8000570 <i2c_read_data+0x28>

	/*START condition*/
	*I2C1_CR1 |= (1 << 10);						/*enable ACK*/
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	601a      	str	r2, [r3, #0]
	*I2C1_CR1 |= (1 << 8);						/*generate start condition*/
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	601a      	str	r2, [r3, #0]
	while (((*I2C1_SR1 >> 0) & 1) == 0);		/*wait SB flag - wait start condition is generated - EV5*/
 8000596:	bf00      	nop
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0f9      	beq.n	8000598 <i2c_read_data+0x50>
	(void)*(I2C1_SR1);							/*clear SB flag*/
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	681b      	ldr	r3, [r3, #0]

	/*send slave address - write mode*/
	*I2C1_DR = SAD_7bit | 0;					/*send SAD-7bit*/
 80005a8:	79fa      	ldrb	r2, [r7, #7]
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	601a      	str	r2, [r3, #0]
	while (((*I2C1_SR2 >> 2) & 1) == 0);		/*wait TRA flag - wait master is in Transmitter mode*/
 80005ae:	bf00      	nop
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	089b      	lsrs	r3, r3, #2
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f8      	beq.n	80005b0 <i2c_read_data+0x68>
	while (((*I2C1_SR1 >> 1) & 1) == 0);		/*wait ADĐR flag*/
 80005be:	bf00      	nop
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	085b      	lsrs	r3, r3, #1
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f8      	beq.n	80005c0 <i2c_read_data+0x78>
	(void)*(I2C1_SR1);							/*clear ADDR flag*/
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	681b      	ldr	r3, [r3, #0]
	(void)*(I2C1_SR2);
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	681b      	ldr	r3, [r3, #0]
	while (((*I2C1_SR1 >> 10) & 1) == 1);		/*wait AF flag*/
 80005d6:	bf00      	nop
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	0a9b      	lsrs	r3, r3, #10
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d0f8      	beq.n	80005d8 <i2c_read_data+0x90>

	/*send register address*/
	while (((*I2C1_SR1 >> 7) & 1) == 0);		/*wait TXE flag*/
 80005e6:	bf00      	nop
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	09db      	lsrs	r3, r3, #7
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f8      	beq.n	80005e8 <i2c_read_data+0xa0>
	*I2C1_DR = SUB;								/*send SUB-8bit*/
 80005f6:	79ba      	ldrb	r2, [r7, #6]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	601a      	str	r2, [r3, #0]
	while (((*I2C1_SR1 >> 2) & 1) == 0);		/*wait BTF flag*/
 80005fc:	bf00      	nop
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	089b      	lsrs	r3, r3, #2
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f8      	beq.n	80005fe <i2c_read_data+0xb6>
	while (((*I2C1_SR1 >> 10) & 1) == 1);		/*wait AF flag*/
 800060c:	bf00      	nop
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	0a9b      	lsrs	r3, r3, #10
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	2b01      	cmp	r3, #1
 800061a:	d0f8      	beq.n	800060e <i2c_read_data+0xc6>

	/*Re-START condition*/
	*I2C1_CR1 |= (1 << 8);						/*generate re-start condition*/
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	601a      	str	r2, [r3, #0]
	while (((*I2C1_SR1 >> 0) & 1) == 0);		/*wait SB flag - wait start condition is generated - EV5*/
 8000628:	bf00      	nop
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <i2c_read_data+0xe2>
	(void)*(I2C1_SR1);							/*clear SB flag*/
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	681b      	ldr	r3, [r3, #0]

	/*send slave address - read mode*/
	*I2C1_DR = SAD_7bit | 1;					/*send SAD-7bit*/
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	461a      	mov	r2, r3
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	601a      	str	r2, [r3, #0]
	while (((*I2C1_SR2 >> 2) & 1) == 1);		/*wait TRA flag - wait master is in Receiver mode*/
 8000648:	bf00      	nop
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	089b      	lsrs	r3, r3, #2
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	2b01      	cmp	r3, #1
 8000656:	d0f8      	beq.n	800064a <i2c_read_data+0x102>
	while (((*I2C1_SR1 >> 1) & 1) == 0);		/*wait ADĐR flag*/
 8000658:	bf00      	nop
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	085b      	lsrs	r3, r3, #1
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0f8      	beq.n	800065a <i2c_read_data+0x112>
	*I2C1_CR1 &= ~(1 << 10);					/*disable ACK*/
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	601a      	str	r2, [r3, #0]
	(void)*(I2C1_SR1);							/*clear ADDR flag*/
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	681b      	ldr	r3, [r3, #0]
	(void)*(I2C1_SR2);
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	681b      	ldr	r3, [r3, #0]

	/*STOP condition*/
	*I2C1_CR1 |= (1 << 9);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	601a      	str	r2, [r3, #0]

	/*read 1-byte data from slave*/
	while (((*I2C1_SR1 >> 6) & 1) == 0);		/*wait RxNE bit*/
 8000688:	bf00      	nop
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	099b      	lsrs	r3, r3, #6
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f8      	beq.n	800068a <i2c_read_data+0x142>
	data = *I2C1_DR;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	73fb      	strb	r3, [r7, #15]

	return data;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3724      	adds	r7, #36	; 0x24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40005410 	.word	0x40005410
 80006b4:	40005414 	.word	0x40005414
 80006b8:	40005418 	.word	0x40005418

080006bc <i2c_write_data>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
i2c_write_data(uint8_t SAD_7bit, uint8_t SUB, uint8_t data) {
 80006bc:	b480      	push	{r7}
 80006be:	b087      	sub	sp, #28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	460b      	mov	r3, r1
 80006c8:	71bb      	strb	r3, [r7, #6]
 80006ca:	4613      	mov	r3, r2
 80006cc:	717b      	strb	r3, [r7, #5]
	uint32_t volatile* const I2C1_CR1   = (uint32_t*)(0x40005400 + 0x00);
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <i2c_write_data+0xd0>)
 80006d0:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const I2C1_DR    = (uint32_t*)(0x40005400 + 0x10);
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <i2c_write_data+0xd4>)
 80006d4:	613b      	str	r3, [r7, #16]
	uint32_t volatile* const I2C1_SR1   = (uint32_t*)(0x40005400 + 0x14);
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <i2c_write_data+0xd8>)
 80006d8:	60fb      	str	r3, [r7, #12]
	uint32_t volatile* const I2C1_SR2   = (uint32_t*)(0x40005400 + 0x18);
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <i2c_write_data+0xdc>)
 80006dc:	60bb      	str	r3, [r7, #8]

	SAD_7bit = SAD_7bit << 1;
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	71fb      	strb	r3, [r7, #7]

	/*wait BUSY flag*/
	while (((*I2C1_SR2 >> 1) & 1) == 1);
 80006e4:	bf00      	nop
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	085b      	lsrs	r3, r3, #1
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d0f8      	beq.n	80006e6 <i2c_write_data+0x2a>

	/*START condition*/
	*I2C1_CR1 |= (1 << 8);
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	601a      	str	r2, [r3, #0]

	/*wait start bit generate*/
	while (((*I2C1_SR1 >> 0) & 1) == 0);
 8000700:	bf00      	nop
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0f9      	beq.n	8000702 <i2c_write_data+0x46>
	/*send slave address - write mode*/
	*I2C1_DR = SAD_7bit | 0;
 800070e:	79fa      	ldrb	r2, [r7, #7]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	601a      	str	r2, [r3, #0]
	/*wait ADĐR bit*/
	while (((*I2C1_SR1 >> 1) & 1) == 0);
 8000714:	bf00      	nop
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	085b      	lsrs	r3, r3, #1
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f8      	beq.n	8000716 <i2c_write_data+0x5a>
	/*clear ADDR flag*/
	(void)*(I2C1_SR2);
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	681b      	ldr	r3, [r3, #0]

	/*send register address*/
	*I2C1_DR = SUB;
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	601a      	str	r2, [r3, #0]
	/*wait tranfer finish*/
	while (((*I2C1_SR1 >> 2) & 1) == 0);
 800072e:	bf00      	nop
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	089b      	lsrs	r3, r3, #2
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f8      	beq.n	8000730 <i2c_write_data+0x74>
	/*wait ACK bit*/
	while (((*I2C1_SR1 >> 10) & 1) == 1);
 800073e:	bf00      	nop
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	0a9b      	lsrs	r3, r3, #10
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	2b01      	cmp	r3, #1
 800074c:	d0f8      	beq.n	8000740 <i2c_write_data+0x84>

	/*write data*/
	*I2C1_DR = data;
 800074e:	797a      	ldrb	r2, [r7, #5]
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	601a      	str	r2, [r3, #0]
	/*wait tranfer finish*/
	while (((*I2C1_SR1 >> 2) & 1) == 0);
 8000754:	bf00      	nop
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0f8      	beq.n	8000756 <i2c_write_data+0x9a>
	/*wait ACK bit*/
	while (((*I2C1_SR1 >> 10) & 1) == 1);
 8000764:	bf00      	nop
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	0a9b      	lsrs	r3, r3, #10
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b01      	cmp	r3, #1
 8000772:	d0f8      	beq.n	8000766 <i2c_write_data+0xaa>

	/*STOP bit*/
	*I2C1_CR1 |= (1 << 9);
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	bf00      	nop
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40005400 	.word	0x40005400
 8000790:	40005410 	.word	0x40005410
 8000794:	40005414 	.word	0x40005414
 8000798:	40005418 	.word	0x40005418

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f874 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <_sbrk+0x5c>)
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <_sbrk+0x60>)
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <_sbrk+0x64>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <_sbrk+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	429a      	cmp	r2, r3
 800081e:	d207      	bcs.n	8000830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000820:	f000 f86c 	bl	80008fc <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	e009      	b.n	8000844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000836:	4b07      	ldr	r3, [pc, #28]	; (8000854 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <_sbrk+0x64>)
 8000840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20020000 	.word	0x20020000
 8000850:	00000400 	.word	0x00000400
 8000854:	20000514 	.word	0x20000514
 8000858:	20000530 	.word	0x20000530

0800085c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <SystemInit+0x20>)
 8000862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <SystemInit+0x20>)
 8000868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800086c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000886:	490e      	ldr	r1, [pc, #56]	; (80008c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800089c:	4c0b      	ldr	r4, [pc, #44]	; (80008cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008aa:	f7ff ffd7 	bl	800085c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ae:	f000 f82b 	bl	8000908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b2:	f7ff fce5 	bl	8000280 <main>
  bx  lr    
 80008b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008bc:	20000400 	.word	0x20000400
  ldr r1, =_edata
 80008c0:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80008c4:	080012c4 	.word	0x080012c4
  ldr r2, =_sbss
 80008c8:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80008cc:	2000052c 	.word	0x2000052c

080008d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC_IRQHandler>
	...

080008d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_IncTick+0x20>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x24>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_IncTick+0x24>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000400 	.word	0x20000400
 80008f8:	20000518 	.word	0x20000518

080008fc <__errno>:
 80008fc:	4b01      	ldr	r3, [pc, #4]	; (8000904 <__errno+0x8>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000404 	.word	0x20000404

08000908 <__libc_init_array>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	4d0d      	ldr	r5, [pc, #52]	; (8000940 <__libc_init_array+0x38>)
 800090c:	4c0d      	ldr	r4, [pc, #52]	; (8000944 <__libc_init_array+0x3c>)
 800090e:	1b64      	subs	r4, r4, r5
 8000910:	10a4      	asrs	r4, r4, #2
 8000912:	2600      	movs	r6, #0
 8000914:	42a6      	cmp	r6, r4
 8000916:	d109      	bne.n	800092c <__libc_init_array+0x24>
 8000918:	4d0b      	ldr	r5, [pc, #44]	; (8000948 <__libc_init_array+0x40>)
 800091a:	4c0c      	ldr	r4, [pc, #48]	; (800094c <__libc_init_array+0x44>)
 800091c:	f000 fc86 	bl	800122c <_init>
 8000920:	1b64      	subs	r4, r4, r5
 8000922:	10a4      	asrs	r4, r4, #2
 8000924:	2600      	movs	r6, #0
 8000926:	42a6      	cmp	r6, r4
 8000928:	d105      	bne.n	8000936 <__libc_init_array+0x2e>
 800092a:	bd70      	pop	{r4, r5, r6, pc}
 800092c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000930:	4798      	blx	r3
 8000932:	3601      	adds	r6, #1
 8000934:	e7ee      	b.n	8000914 <__libc_init_array+0xc>
 8000936:	f855 3b04 	ldr.w	r3, [r5], #4
 800093a:	4798      	blx	r3
 800093c:	3601      	adds	r6, #1
 800093e:	e7f2      	b.n	8000926 <__libc_init_array+0x1e>
 8000940:	080012bc 	.word	0x080012bc
 8000944:	080012bc 	.word	0x080012bc
 8000948:	080012bc 	.word	0x080012bc
 800094c:	080012c0 	.word	0x080012c0

08000950 <memcpy>:
 8000950:	440a      	add	r2, r1
 8000952:	4291      	cmp	r1, r2
 8000954:	f100 33ff 	add.w	r3, r0, #4294967295
 8000958:	d100      	bne.n	800095c <memcpy+0xc>
 800095a:	4770      	bx	lr
 800095c:	b510      	push	{r4, lr}
 800095e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000966:	4291      	cmp	r1, r2
 8000968:	d1f9      	bne.n	800095e <memcpy+0xe>
 800096a:	bd10      	pop	{r4, pc}

0800096c <siprintf>:
 800096c:	b40e      	push	{r1, r2, r3}
 800096e:	b500      	push	{lr}
 8000970:	b09c      	sub	sp, #112	; 0x70
 8000972:	ab1d      	add	r3, sp, #116	; 0x74
 8000974:	9002      	str	r0, [sp, #8]
 8000976:	9006      	str	r0, [sp, #24]
 8000978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <siprintf+0x38>)
 800097e:	9107      	str	r1, [sp, #28]
 8000980:	9104      	str	r1, [sp, #16]
 8000982:	4909      	ldr	r1, [pc, #36]	; (80009a8 <siprintf+0x3c>)
 8000984:	f853 2b04 	ldr.w	r2, [r3], #4
 8000988:	9105      	str	r1, [sp, #20]
 800098a:	6800      	ldr	r0, [r0, #0]
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	a902      	add	r1, sp, #8
 8000990:	f000 f868 	bl	8000a64 <_svfiprintf_r>
 8000994:	9b02      	ldr	r3, [sp, #8]
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	b01c      	add	sp, #112	; 0x70
 800099c:	f85d eb04 	ldr.w	lr, [sp], #4
 80009a0:	b003      	add	sp, #12
 80009a2:	4770      	bx	lr
 80009a4:	20000404 	.word	0x20000404
 80009a8:	ffff0208 	.word	0xffff0208

080009ac <__ssputs_r>:
 80009ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b0:	688e      	ldr	r6, [r1, #8]
 80009b2:	429e      	cmp	r6, r3
 80009b4:	4682      	mov	sl, r0
 80009b6:	460c      	mov	r4, r1
 80009b8:	4690      	mov	r8, r2
 80009ba:	461f      	mov	r7, r3
 80009bc:	d838      	bhi.n	8000a30 <__ssputs_r+0x84>
 80009be:	898a      	ldrh	r2, [r1, #12]
 80009c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80009c4:	d032      	beq.n	8000a2c <__ssputs_r+0x80>
 80009c6:	6825      	ldr	r5, [r4, #0]
 80009c8:	6909      	ldr	r1, [r1, #16]
 80009ca:	eba5 0901 	sub.w	r9, r5, r1
 80009ce:	6965      	ldr	r5, [r4, #20]
 80009d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009d8:	3301      	adds	r3, #1
 80009da:	444b      	add	r3, r9
 80009dc:	106d      	asrs	r5, r5, #1
 80009de:	429d      	cmp	r5, r3
 80009e0:	bf38      	it	cc
 80009e2:	461d      	movcc	r5, r3
 80009e4:	0553      	lsls	r3, r2, #21
 80009e6:	d531      	bpl.n	8000a4c <__ssputs_r+0xa0>
 80009e8:	4629      	mov	r1, r5
 80009ea:	f000 fb55 	bl	8001098 <_malloc_r>
 80009ee:	4606      	mov	r6, r0
 80009f0:	b950      	cbnz	r0, 8000a08 <__ssputs_r+0x5c>
 80009f2:	230c      	movs	r3, #12
 80009f4:	f8ca 3000 	str.w	r3, [sl]
 80009f8:	89a3      	ldrh	r3, [r4, #12]
 80009fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fe:	81a3      	strh	r3, [r4, #12]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	6921      	ldr	r1, [r4, #16]
 8000a0a:	464a      	mov	r2, r9
 8000a0c:	f7ff ffa0 	bl	8000950 <memcpy>
 8000a10:	89a3      	ldrh	r3, [r4, #12]
 8000a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1a:	81a3      	strh	r3, [r4, #12]
 8000a1c:	6126      	str	r6, [r4, #16]
 8000a1e:	6165      	str	r5, [r4, #20]
 8000a20:	444e      	add	r6, r9
 8000a22:	eba5 0509 	sub.w	r5, r5, r9
 8000a26:	6026      	str	r6, [r4, #0]
 8000a28:	60a5      	str	r5, [r4, #8]
 8000a2a:	463e      	mov	r6, r7
 8000a2c:	42be      	cmp	r6, r7
 8000a2e:	d900      	bls.n	8000a32 <__ssputs_r+0x86>
 8000a30:	463e      	mov	r6, r7
 8000a32:	6820      	ldr	r0, [r4, #0]
 8000a34:	4632      	mov	r2, r6
 8000a36:	4641      	mov	r1, r8
 8000a38:	f000 faa8 	bl	8000f8c <memmove>
 8000a3c:	68a3      	ldr	r3, [r4, #8]
 8000a3e:	1b9b      	subs	r3, r3, r6
 8000a40:	60a3      	str	r3, [r4, #8]
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	4433      	add	r3, r6
 8000a46:	6023      	str	r3, [r4, #0]
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e7db      	b.n	8000a04 <__ssputs_r+0x58>
 8000a4c:	462a      	mov	r2, r5
 8000a4e:	f000 fb97 	bl	8001180 <_realloc_r>
 8000a52:	4606      	mov	r6, r0
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d1e1      	bne.n	8000a1c <__ssputs_r+0x70>
 8000a58:	6921      	ldr	r1, [r4, #16]
 8000a5a:	4650      	mov	r0, sl
 8000a5c:	f000 fab0 	bl	8000fc0 <_free_r>
 8000a60:	e7c7      	b.n	80009f2 <__ssputs_r+0x46>
	...

08000a64 <_svfiprintf_r>:
 8000a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a68:	4698      	mov	r8, r3
 8000a6a:	898b      	ldrh	r3, [r1, #12]
 8000a6c:	061b      	lsls	r3, r3, #24
 8000a6e:	b09d      	sub	sp, #116	; 0x74
 8000a70:	4607      	mov	r7, r0
 8000a72:	460d      	mov	r5, r1
 8000a74:	4614      	mov	r4, r2
 8000a76:	d50e      	bpl.n	8000a96 <_svfiprintf_r+0x32>
 8000a78:	690b      	ldr	r3, [r1, #16]
 8000a7a:	b963      	cbnz	r3, 8000a96 <_svfiprintf_r+0x32>
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	f000 fb0b 	bl	8001098 <_malloc_r>
 8000a82:	6028      	str	r0, [r5, #0]
 8000a84:	6128      	str	r0, [r5, #16]
 8000a86:	b920      	cbnz	r0, 8000a92 <_svfiprintf_r+0x2e>
 8000a88:	230c      	movs	r3, #12
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	e0d1      	b.n	8000c36 <_svfiprintf_r+0x1d2>
 8000a92:	2340      	movs	r3, #64	; 0x40
 8000a94:	616b      	str	r3, [r5, #20]
 8000a96:	2300      	movs	r3, #0
 8000a98:	9309      	str	r3, [sp, #36]	; 0x24
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000aa4:	2330      	movs	r3, #48	; 0x30
 8000aa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000c50 <_svfiprintf_r+0x1ec>
 8000aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000aae:	f04f 0901 	mov.w	r9, #1
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000aba:	b10a      	cbz	r2, 8000ac0 <_svfiprintf_r+0x5c>
 8000abc:	2a25      	cmp	r2, #37	; 0x25
 8000abe:	d1f9      	bne.n	8000ab4 <_svfiprintf_r+0x50>
 8000ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8000ac4:	d00b      	beq.n	8000ade <_svfiprintf_r+0x7a>
 8000ac6:	465b      	mov	r3, fp
 8000ac8:	4622      	mov	r2, r4
 8000aca:	4629      	mov	r1, r5
 8000acc:	4638      	mov	r0, r7
 8000ace:	f7ff ff6d 	bl	80009ac <__ssputs_r>
 8000ad2:	3001      	adds	r0, #1
 8000ad4:	f000 80aa 	beq.w	8000c2c <_svfiprintf_r+0x1c8>
 8000ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ada:	445a      	add	r2, fp
 8000adc:	9209      	str	r2, [sp, #36]	; 0x24
 8000ade:	f89a 3000 	ldrb.w	r3, [sl]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 80a2 	beq.w	8000c2c <_svfiprintf_r+0x1c8>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f04f 32ff 	mov.w	r2, #4294967295
 8000aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000af2:	f10a 0a01 	add.w	sl, sl, #1
 8000af6:	9304      	str	r3, [sp, #16]
 8000af8:	9307      	str	r3, [sp, #28]
 8000afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000afe:	931a      	str	r3, [sp, #104]	; 0x68
 8000b00:	4654      	mov	r4, sl
 8000b02:	2205      	movs	r2, #5
 8000b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b08:	4851      	ldr	r0, [pc, #324]	; (8000c50 <_svfiprintf_r+0x1ec>)
 8000b0a:	f7ff fb69 	bl	80001e0 <memchr>
 8000b0e:	9a04      	ldr	r2, [sp, #16]
 8000b10:	b9d8      	cbnz	r0, 8000b4a <_svfiprintf_r+0xe6>
 8000b12:	06d0      	lsls	r0, r2, #27
 8000b14:	bf44      	itt	mi
 8000b16:	2320      	movmi	r3, #32
 8000b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b1c:	0711      	lsls	r1, r2, #28
 8000b1e:	bf44      	itt	mi
 8000b20:	232b      	movmi	r3, #43	; 0x2b
 8000b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b26:	f89a 3000 	ldrb.w	r3, [sl]
 8000b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8000b2c:	d015      	beq.n	8000b5a <_svfiprintf_r+0xf6>
 8000b2e:	9a07      	ldr	r2, [sp, #28]
 8000b30:	4654      	mov	r4, sl
 8000b32:	2000      	movs	r0, #0
 8000b34:	f04f 0c0a 	mov.w	ip, #10
 8000b38:	4621      	mov	r1, r4
 8000b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b3e:	3b30      	subs	r3, #48	; 0x30
 8000b40:	2b09      	cmp	r3, #9
 8000b42:	d94e      	bls.n	8000be2 <_svfiprintf_r+0x17e>
 8000b44:	b1b0      	cbz	r0, 8000b74 <_svfiprintf_r+0x110>
 8000b46:	9207      	str	r2, [sp, #28]
 8000b48:	e014      	b.n	8000b74 <_svfiprintf_r+0x110>
 8000b4a:	eba0 0308 	sub.w	r3, r0, r8
 8000b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	9304      	str	r3, [sp, #16]
 8000b56:	46a2      	mov	sl, r4
 8000b58:	e7d2      	b.n	8000b00 <_svfiprintf_r+0x9c>
 8000b5a:	9b03      	ldr	r3, [sp, #12]
 8000b5c:	1d19      	adds	r1, r3, #4
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	9103      	str	r1, [sp, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bfbb      	ittet	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	f042 0202 	orrlt.w	r2, r2, #2
 8000b6c:	9307      	strge	r3, [sp, #28]
 8000b6e:	9307      	strlt	r3, [sp, #28]
 8000b70:	bfb8      	it	lt
 8000b72:	9204      	strlt	r2, [sp, #16]
 8000b74:	7823      	ldrb	r3, [r4, #0]
 8000b76:	2b2e      	cmp	r3, #46	; 0x2e
 8000b78:	d10c      	bne.n	8000b94 <_svfiprintf_r+0x130>
 8000b7a:	7863      	ldrb	r3, [r4, #1]
 8000b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b7e:	d135      	bne.n	8000bec <_svfiprintf_r+0x188>
 8000b80:	9b03      	ldr	r3, [sp, #12]
 8000b82:	1d1a      	adds	r2, r3, #4
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	9203      	str	r2, [sp, #12]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bfb8      	it	lt
 8000b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b90:	3402      	adds	r4, #2
 8000b92:	9305      	str	r3, [sp, #20]
 8000b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c60 <_svfiprintf_r+0x1fc>
 8000b98:	7821      	ldrb	r1, [r4, #0]
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	4650      	mov	r0, sl
 8000b9e:	f7ff fb1f 	bl	80001e0 <memchr>
 8000ba2:	b140      	cbz	r0, 8000bb6 <_svfiprintf_r+0x152>
 8000ba4:	2340      	movs	r3, #64	; 0x40
 8000ba6:	eba0 000a 	sub.w	r0, r0, sl
 8000baa:	fa03 f000 	lsl.w	r0, r3, r0
 8000bae:	9b04      	ldr	r3, [sp, #16]
 8000bb0:	4303      	orrs	r3, r0
 8000bb2:	3401      	adds	r4, #1
 8000bb4:	9304      	str	r3, [sp, #16]
 8000bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bba:	4826      	ldr	r0, [pc, #152]	; (8000c54 <_svfiprintf_r+0x1f0>)
 8000bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000bc0:	2206      	movs	r2, #6
 8000bc2:	f7ff fb0d 	bl	80001e0 <memchr>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d038      	beq.n	8000c3c <_svfiprintf_r+0x1d8>
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <_svfiprintf_r+0x1f4>)
 8000bcc:	bb1b      	cbnz	r3, 8000c16 <_svfiprintf_r+0x1b2>
 8000bce:	9b03      	ldr	r3, [sp, #12]
 8000bd0:	3307      	adds	r3, #7
 8000bd2:	f023 0307 	bic.w	r3, r3, #7
 8000bd6:	3308      	adds	r3, #8
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bdc:	4433      	add	r3, r6
 8000bde:	9309      	str	r3, [sp, #36]	; 0x24
 8000be0:	e767      	b.n	8000ab2 <_svfiprintf_r+0x4e>
 8000be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000be6:	460c      	mov	r4, r1
 8000be8:	2001      	movs	r0, #1
 8000bea:	e7a5      	b.n	8000b38 <_svfiprintf_r+0xd4>
 8000bec:	2300      	movs	r3, #0
 8000bee:	3401      	adds	r4, #1
 8000bf0:	9305      	str	r3, [sp, #20]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 0c0a 	mov.w	ip, #10
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bfe:	3a30      	subs	r2, #48	; 0x30
 8000c00:	2a09      	cmp	r2, #9
 8000c02:	d903      	bls.n	8000c0c <_svfiprintf_r+0x1a8>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0c5      	beq.n	8000b94 <_svfiprintf_r+0x130>
 8000c08:	9105      	str	r1, [sp, #20]
 8000c0a:	e7c3      	b.n	8000b94 <_svfiprintf_r+0x130>
 8000c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c10:	4604      	mov	r4, r0
 8000c12:	2301      	movs	r3, #1
 8000c14:	e7f0      	b.n	8000bf8 <_svfiprintf_r+0x194>
 8000c16:	ab03      	add	r3, sp, #12
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	462a      	mov	r2, r5
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <_svfiprintf_r+0x1f8>)
 8000c1e:	a904      	add	r1, sp, #16
 8000c20:	4638      	mov	r0, r7
 8000c22:	f3af 8000 	nop.w
 8000c26:	1c42      	adds	r2, r0, #1
 8000c28:	4606      	mov	r6, r0
 8000c2a:	d1d6      	bne.n	8000bda <_svfiprintf_r+0x176>
 8000c2c:	89ab      	ldrh	r3, [r5, #12]
 8000c2e:	065b      	lsls	r3, r3, #25
 8000c30:	f53f af2c 	bmi.w	8000a8c <_svfiprintf_r+0x28>
 8000c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c36:	b01d      	add	sp, #116	; 0x74
 8000c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c3c:	ab03      	add	r3, sp, #12
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	462a      	mov	r2, r5
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <_svfiprintf_r+0x1f8>)
 8000c44:	a904      	add	r1, sp, #16
 8000c46:	4638      	mov	r0, r7
 8000c48:	f000 f87a 	bl	8000d40 <_printf_i>
 8000c4c:	e7eb      	b.n	8000c26 <_svfiprintf_r+0x1c2>
 8000c4e:	bf00      	nop
 8000c50:	08001289 	.word	0x08001289
 8000c54:	08001293 	.word	0x08001293
 8000c58:	00000000 	.word	0x00000000
 8000c5c:	080009ad 	.word	0x080009ad
 8000c60:	0800128f 	.word	0x0800128f

08000c64 <_printf_common>:
 8000c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c68:	4616      	mov	r6, r2
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	688a      	ldr	r2, [r1, #8]
 8000c6e:	690b      	ldr	r3, [r1, #16]
 8000c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c74:	4293      	cmp	r3, r2
 8000c76:	bfb8      	it	lt
 8000c78:	4613      	movlt	r3, r2
 8000c7a:	6033      	str	r3, [r6, #0]
 8000c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c80:	4607      	mov	r7, r0
 8000c82:	460c      	mov	r4, r1
 8000c84:	b10a      	cbz	r2, 8000c8a <_printf_common+0x26>
 8000c86:	3301      	adds	r3, #1
 8000c88:	6033      	str	r3, [r6, #0]
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	0699      	lsls	r1, r3, #26
 8000c8e:	bf42      	ittt	mi
 8000c90:	6833      	ldrmi	r3, [r6, #0]
 8000c92:	3302      	addmi	r3, #2
 8000c94:	6033      	strmi	r3, [r6, #0]
 8000c96:	6825      	ldr	r5, [r4, #0]
 8000c98:	f015 0506 	ands.w	r5, r5, #6
 8000c9c:	d106      	bne.n	8000cac <_printf_common+0x48>
 8000c9e:	f104 0a19 	add.w	sl, r4, #25
 8000ca2:	68e3      	ldr	r3, [r4, #12]
 8000ca4:	6832      	ldr	r2, [r6, #0]
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	dc26      	bgt.n	8000cfa <_printf_common+0x96>
 8000cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cb0:	1e13      	subs	r3, r2, #0
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	bf18      	it	ne
 8000cb6:	2301      	movne	r3, #1
 8000cb8:	0692      	lsls	r2, r2, #26
 8000cba:	d42b      	bmi.n	8000d14 <_printf_common+0xb0>
 8000cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	47c0      	blx	r8
 8000cc6:	3001      	adds	r0, #1
 8000cc8:	d01e      	beq.n	8000d08 <_printf_common+0xa4>
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	68e5      	ldr	r5, [r4, #12]
 8000cce:	6832      	ldr	r2, [r6, #0]
 8000cd0:	f003 0306 	and.w	r3, r3, #6
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	bf08      	it	eq
 8000cd8:	1aad      	subeq	r5, r5, r2
 8000cda:	68a3      	ldr	r3, [r4, #8]
 8000cdc:	6922      	ldr	r2, [r4, #16]
 8000cde:	bf0c      	ite	eq
 8000ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ce4:	2500      	movne	r5, #0
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	bfc4      	itt	gt
 8000cea:	1a9b      	subgt	r3, r3, r2
 8000cec:	18ed      	addgt	r5, r5, r3
 8000cee:	2600      	movs	r6, #0
 8000cf0:	341a      	adds	r4, #26
 8000cf2:	42b5      	cmp	r5, r6
 8000cf4:	d11a      	bne.n	8000d2c <_printf_common+0xc8>
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	e008      	b.n	8000d0c <_printf_common+0xa8>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	4652      	mov	r2, sl
 8000cfe:	4649      	mov	r1, r9
 8000d00:	4638      	mov	r0, r7
 8000d02:	47c0      	blx	r8
 8000d04:	3001      	adds	r0, #1
 8000d06:	d103      	bne.n	8000d10 <_printf_common+0xac>
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d10:	3501      	adds	r5, #1
 8000d12:	e7c6      	b.n	8000ca2 <_printf_common+0x3e>
 8000d14:	18e1      	adds	r1, r4, r3
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	2030      	movs	r0, #48	; 0x30
 8000d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d1e:	4422      	add	r2, r4
 8000d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d28:	3302      	adds	r3, #2
 8000d2a:	e7c7      	b.n	8000cbc <_printf_common+0x58>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4649      	mov	r1, r9
 8000d32:	4638      	mov	r0, r7
 8000d34:	47c0      	blx	r8
 8000d36:	3001      	adds	r0, #1
 8000d38:	d0e6      	beq.n	8000d08 <_printf_common+0xa4>
 8000d3a:	3601      	adds	r6, #1
 8000d3c:	e7d9      	b.n	8000cf2 <_printf_common+0x8e>
	...

08000d40 <_printf_i>:
 8000d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d44:	7e0f      	ldrb	r7, [r1, #24]
 8000d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d48:	2f78      	cmp	r7, #120	; 0x78
 8000d4a:	4691      	mov	r9, r2
 8000d4c:	4680      	mov	r8, r0
 8000d4e:	460c      	mov	r4, r1
 8000d50:	469a      	mov	sl, r3
 8000d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d56:	d807      	bhi.n	8000d68 <_printf_i+0x28>
 8000d58:	2f62      	cmp	r7, #98	; 0x62
 8000d5a:	d80a      	bhi.n	8000d72 <_printf_i+0x32>
 8000d5c:	2f00      	cmp	r7, #0
 8000d5e:	f000 80d8 	beq.w	8000f12 <_printf_i+0x1d2>
 8000d62:	2f58      	cmp	r7, #88	; 0x58
 8000d64:	f000 80a3 	beq.w	8000eae <_printf_i+0x16e>
 8000d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d70:	e03a      	b.n	8000de8 <_printf_i+0xa8>
 8000d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d76:	2b15      	cmp	r3, #21
 8000d78:	d8f6      	bhi.n	8000d68 <_printf_i+0x28>
 8000d7a:	a101      	add	r1, pc, #4	; (adr r1, 8000d80 <_printf_i+0x40>)
 8000d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d80:	08000dd9 	.word	0x08000dd9
 8000d84:	08000ded 	.word	0x08000ded
 8000d88:	08000d69 	.word	0x08000d69
 8000d8c:	08000d69 	.word	0x08000d69
 8000d90:	08000d69 	.word	0x08000d69
 8000d94:	08000d69 	.word	0x08000d69
 8000d98:	08000ded 	.word	0x08000ded
 8000d9c:	08000d69 	.word	0x08000d69
 8000da0:	08000d69 	.word	0x08000d69
 8000da4:	08000d69 	.word	0x08000d69
 8000da8:	08000d69 	.word	0x08000d69
 8000dac:	08000ef9 	.word	0x08000ef9
 8000db0:	08000e1d 	.word	0x08000e1d
 8000db4:	08000edb 	.word	0x08000edb
 8000db8:	08000d69 	.word	0x08000d69
 8000dbc:	08000d69 	.word	0x08000d69
 8000dc0:	08000f1b 	.word	0x08000f1b
 8000dc4:	08000d69 	.word	0x08000d69
 8000dc8:	08000e1d 	.word	0x08000e1d
 8000dcc:	08000d69 	.word	0x08000d69
 8000dd0:	08000d69 	.word	0x08000d69
 8000dd4:	08000ee3 	.word	0x08000ee3
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	1d1a      	adds	r2, r3, #4
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	602a      	str	r2, [r5, #0]
 8000de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000de8:	2301      	movs	r3, #1
 8000dea:	e0a3      	b.n	8000f34 <_printf_i+0x1f4>
 8000dec:	6820      	ldr	r0, [r4, #0]
 8000dee:	6829      	ldr	r1, [r5, #0]
 8000df0:	0606      	lsls	r6, r0, #24
 8000df2:	f101 0304 	add.w	r3, r1, #4
 8000df6:	d50a      	bpl.n	8000e0e <_printf_i+0xce>
 8000df8:	680e      	ldr	r6, [r1, #0]
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	da03      	bge.n	8000e08 <_printf_i+0xc8>
 8000e00:	232d      	movs	r3, #45	; 0x2d
 8000e02:	4276      	negs	r6, r6
 8000e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e08:	485e      	ldr	r0, [pc, #376]	; (8000f84 <_printf_i+0x244>)
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	e019      	b.n	8000e42 <_printf_i+0x102>
 8000e0e:	680e      	ldr	r6, [r1, #0]
 8000e10:	602b      	str	r3, [r5, #0]
 8000e12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e16:	bf18      	it	ne
 8000e18:	b236      	sxthne	r6, r6
 8000e1a:	e7ef      	b.n	8000dfc <_printf_i+0xbc>
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	1d19      	adds	r1, r3, #4
 8000e22:	6029      	str	r1, [r5, #0]
 8000e24:	0601      	lsls	r1, r0, #24
 8000e26:	d501      	bpl.n	8000e2c <_printf_i+0xec>
 8000e28:	681e      	ldr	r6, [r3, #0]
 8000e2a:	e002      	b.n	8000e32 <_printf_i+0xf2>
 8000e2c:	0646      	lsls	r6, r0, #25
 8000e2e:	d5fb      	bpl.n	8000e28 <_printf_i+0xe8>
 8000e30:	881e      	ldrh	r6, [r3, #0]
 8000e32:	4854      	ldr	r0, [pc, #336]	; (8000f84 <_printf_i+0x244>)
 8000e34:	2f6f      	cmp	r7, #111	; 0x6f
 8000e36:	bf0c      	ite	eq
 8000e38:	2308      	moveq	r3, #8
 8000e3a:	230a      	movne	r3, #10
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e42:	6865      	ldr	r5, [r4, #4]
 8000e44:	60a5      	str	r5, [r4, #8]
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	bfa2      	ittt	ge
 8000e4a:	6821      	ldrge	r1, [r4, #0]
 8000e4c:	f021 0104 	bicge.w	r1, r1, #4
 8000e50:	6021      	strge	r1, [r4, #0]
 8000e52:	b90e      	cbnz	r6, 8000e58 <_printf_i+0x118>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d04d      	beq.n	8000ef4 <_printf_i+0x1b4>
 8000e58:	4615      	mov	r5, r2
 8000e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8000e62:	5dc7      	ldrb	r7, [r0, r7]
 8000e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e68:	4637      	mov	r7, r6
 8000e6a:	42bb      	cmp	r3, r7
 8000e6c:	460e      	mov	r6, r1
 8000e6e:	d9f4      	bls.n	8000e5a <_printf_i+0x11a>
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d10b      	bne.n	8000e8c <_printf_i+0x14c>
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	07de      	lsls	r6, r3, #31
 8000e78:	d508      	bpl.n	8000e8c <_printf_i+0x14c>
 8000e7a:	6923      	ldr	r3, [r4, #16]
 8000e7c:	6861      	ldr	r1, [r4, #4]
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	bfde      	ittt	le
 8000e82:	2330      	movle	r3, #48	; 0x30
 8000e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e8c:	1b52      	subs	r2, r2, r5
 8000e8e:	6122      	str	r2, [r4, #16]
 8000e90:	f8cd a000 	str.w	sl, [sp]
 8000e94:	464b      	mov	r3, r9
 8000e96:	aa03      	add	r2, sp, #12
 8000e98:	4621      	mov	r1, r4
 8000e9a:	4640      	mov	r0, r8
 8000e9c:	f7ff fee2 	bl	8000c64 <_printf_common>
 8000ea0:	3001      	adds	r0, #1
 8000ea2:	d14c      	bne.n	8000f3e <_printf_i+0x1fe>
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	b004      	add	sp, #16
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	4835      	ldr	r0, [pc, #212]	; (8000f84 <_printf_i+0x244>)
 8000eb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000eb4:	6829      	ldr	r1, [r5, #0]
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8000ebc:	6029      	str	r1, [r5, #0]
 8000ebe:	061d      	lsls	r5, r3, #24
 8000ec0:	d514      	bpl.n	8000eec <_printf_i+0x1ac>
 8000ec2:	07df      	lsls	r7, r3, #31
 8000ec4:	bf44      	itt	mi
 8000ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8000eca:	6023      	strmi	r3, [r4, #0]
 8000ecc:	b91e      	cbnz	r6, 8000ed6 <_printf_i+0x196>
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	f023 0320 	bic.w	r3, r3, #32
 8000ed4:	6023      	str	r3, [r4, #0]
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	e7b0      	b.n	8000e3c <_printf_i+0xfc>
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	f043 0320 	orr.w	r3, r3, #32
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	2378      	movs	r3, #120	; 0x78
 8000ee4:	4828      	ldr	r0, [pc, #160]	; (8000f88 <_printf_i+0x248>)
 8000ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000eea:	e7e3      	b.n	8000eb4 <_printf_i+0x174>
 8000eec:	0659      	lsls	r1, r3, #25
 8000eee:	bf48      	it	mi
 8000ef0:	b2b6      	uxthmi	r6, r6
 8000ef2:	e7e6      	b.n	8000ec2 <_printf_i+0x182>
 8000ef4:	4615      	mov	r5, r2
 8000ef6:	e7bb      	b.n	8000e70 <_printf_i+0x130>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	6826      	ldr	r6, [r4, #0]
 8000efc:	6961      	ldr	r1, [r4, #20]
 8000efe:	1d18      	adds	r0, r3, #4
 8000f00:	6028      	str	r0, [r5, #0]
 8000f02:	0635      	lsls	r5, r6, #24
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	d501      	bpl.n	8000f0c <_printf_i+0x1cc>
 8000f08:	6019      	str	r1, [r3, #0]
 8000f0a:	e002      	b.n	8000f12 <_printf_i+0x1d2>
 8000f0c:	0670      	lsls	r0, r6, #25
 8000f0e:	d5fb      	bpl.n	8000f08 <_printf_i+0x1c8>
 8000f10:	8019      	strh	r1, [r3, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	6123      	str	r3, [r4, #16]
 8000f16:	4615      	mov	r5, r2
 8000f18:	e7ba      	b.n	8000e90 <_printf_i+0x150>
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	1d1a      	adds	r2, r3, #4
 8000f1e:	602a      	str	r2, [r5, #0]
 8000f20:	681d      	ldr	r5, [r3, #0]
 8000f22:	6862      	ldr	r2, [r4, #4]
 8000f24:	2100      	movs	r1, #0
 8000f26:	4628      	mov	r0, r5
 8000f28:	f7ff f95a 	bl	80001e0 <memchr>
 8000f2c:	b108      	cbz	r0, 8000f32 <_printf_i+0x1f2>
 8000f2e:	1b40      	subs	r0, r0, r5
 8000f30:	6060      	str	r0, [r4, #4]
 8000f32:	6863      	ldr	r3, [r4, #4]
 8000f34:	6123      	str	r3, [r4, #16]
 8000f36:	2300      	movs	r3, #0
 8000f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f3c:	e7a8      	b.n	8000e90 <_printf_i+0x150>
 8000f3e:	6923      	ldr	r3, [r4, #16]
 8000f40:	462a      	mov	r2, r5
 8000f42:	4649      	mov	r1, r9
 8000f44:	4640      	mov	r0, r8
 8000f46:	47d0      	blx	sl
 8000f48:	3001      	adds	r0, #1
 8000f4a:	d0ab      	beq.n	8000ea4 <_printf_i+0x164>
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	079b      	lsls	r3, r3, #30
 8000f50:	d413      	bmi.n	8000f7a <_printf_i+0x23a>
 8000f52:	68e0      	ldr	r0, [r4, #12]
 8000f54:	9b03      	ldr	r3, [sp, #12]
 8000f56:	4298      	cmp	r0, r3
 8000f58:	bfb8      	it	lt
 8000f5a:	4618      	movlt	r0, r3
 8000f5c:	e7a4      	b.n	8000ea8 <_printf_i+0x168>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4632      	mov	r2, r6
 8000f62:	4649      	mov	r1, r9
 8000f64:	4640      	mov	r0, r8
 8000f66:	47d0      	blx	sl
 8000f68:	3001      	adds	r0, #1
 8000f6a:	d09b      	beq.n	8000ea4 <_printf_i+0x164>
 8000f6c:	3501      	adds	r5, #1
 8000f6e:	68e3      	ldr	r3, [r4, #12]
 8000f70:	9903      	ldr	r1, [sp, #12]
 8000f72:	1a5b      	subs	r3, r3, r1
 8000f74:	42ab      	cmp	r3, r5
 8000f76:	dcf2      	bgt.n	8000f5e <_printf_i+0x21e>
 8000f78:	e7eb      	b.n	8000f52 <_printf_i+0x212>
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	f104 0619 	add.w	r6, r4, #25
 8000f80:	e7f5      	b.n	8000f6e <_printf_i+0x22e>
 8000f82:	bf00      	nop
 8000f84:	0800129a 	.word	0x0800129a
 8000f88:	080012ab 	.word	0x080012ab

08000f8c <memmove>:
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	b510      	push	{r4, lr}
 8000f90:	eb01 0402 	add.w	r4, r1, r2
 8000f94:	d902      	bls.n	8000f9c <memmove+0x10>
 8000f96:	4284      	cmp	r4, r0
 8000f98:	4623      	mov	r3, r4
 8000f9a:	d807      	bhi.n	8000fac <memmove+0x20>
 8000f9c:	1e43      	subs	r3, r0, #1
 8000f9e:	42a1      	cmp	r1, r4
 8000fa0:	d008      	beq.n	8000fb4 <memmove+0x28>
 8000fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000faa:	e7f8      	b.n	8000f9e <memmove+0x12>
 8000fac:	4402      	add	r2, r0
 8000fae:	4601      	mov	r1, r0
 8000fb0:	428a      	cmp	r2, r1
 8000fb2:	d100      	bne.n	8000fb6 <memmove+0x2a>
 8000fb4:	bd10      	pop	{r4, pc}
 8000fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fbe:	e7f7      	b.n	8000fb0 <memmove+0x24>

08000fc0 <_free_r>:
 8000fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fc2:	2900      	cmp	r1, #0
 8000fc4:	d044      	beq.n	8001050 <_free_r+0x90>
 8000fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fca:	9001      	str	r0, [sp, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f1a1 0404 	sub.w	r4, r1, #4
 8000fd2:	bfb8      	it	lt
 8000fd4:	18e4      	addlt	r4, r4, r3
 8000fd6:	f000 f913 	bl	8001200 <__malloc_lock>
 8000fda:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <_free_r+0x94>)
 8000fdc:	9801      	ldr	r0, [sp, #4]
 8000fde:	6813      	ldr	r3, [r2, #0]
 8000fe0:	b933      	cbnz	r3, 8000ff0 <_free_r+0x30>
 8000fe2:	6063      	str	r3, [r4, #4]
 8000fe4:	6014      	str	r4, [r2, #0]
 8000fe6:	b003      	add	sp, #12
 8000fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000fec:	f000 b90e 	b.w	800120c <__malloc_unlock>
 8000ff0:	42a3      	cmp	r3, r4
 8000ff2:	d908      	bls.n	8001006 <_free_r+0x46>
 8000ff4:	6825      	ldr	r5, [r4, #0]
 8000ff6:	1961      	adds	r1, r4, r5
 8000ff8:	428b      	cmp	r3, r1
 8000ffa:	bf01      	itttt	eq
 8000ffc:	6819      	ldreq	r1, [r3, #0]
 8000ffe:	685b      	ldreq	r3, [r3, #4]
 8001000:	1949      	addeq	r1, r1, r5
 8001002:	6021      	streq	r1, [r4, #0]
 8001004:	e7ed      	b.n	8000fe2 <_free_r+0x22>
 8001006:	461a      	mov	r2, r3
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	b10b      	cbz	r3, 8001010 <_free_r+0x50>
 800100c:	42a3      	cmp	r3, r4
 800100e:	d9fa      	bls.n	8001006 <_free_r+0x46>
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	1855      	adds	r5, r2, r1
 8001014:	42a5      	cmp	r5, r4
 8001016:	d10b      	bne.n	8001030 <_free_r+0x70>
 8001018:	6824      	ldr	r4, [r4, #0]
 800101a:	4421      	add	r1, r4
 800101c:	1854      	adds	r4, r2, r1
 800101e:	42a3      	cmp	r3, r4
 8001020:	6011      	str	r1, [r2, #0]
 8001022:	d1e0      	bne.n	8000fe6 <_free_r+0x26>
 8001024:	681c      	ldr	r4, [r3, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	6053      	str	r3, [r2, #4]
 800102a:	4421      	add	r1, r4
 800102c:	6011      	str	r1, [r2, #0]
 800102e:	e7da      	b.n	8000fe6 <_free_r+0x26>
 8001030:	d902      	bls.n	8001038 <_free_r+0x78>
 8001032:	230c      	movs	r3, #12
 8001034:	6003      	str	r3, [r0, #0]
 8001036:	e7d6      	b.n	8000fe6 <_free_r+0x26>
 8001038:	6825      	ldr	r5, [r4, #0]
 800103a:	1961      	adds	r1, r4, r5
 800103c:	428b      	cmp	r3, r1
 800103e:	bf04      	itt	eq
 8001040:	6819      	ldreq	r1, [r3, #0]
 8001042:	685b      	ldreq	r3, [r3, #4]
 8001044:	6063      	str	r3, [r4, #4]
 8001046:	bf04      	itt	eq
 8001048:	1949      	addeq	r1, r1, r5
 800104a:	6021      	streq	r1, [r4, #0]
 800104c:	6054      	str	r4, [r2, #4]
 800104e:	e7ca      	b.n	8000fe6 <_free_r+0x26>
 8001050:	b003      	add	sp, #12
 8001052:	bd30      	pop	{r4, r5, pc}
 8001054:	2000051c 	.word	0x2000051c

08001058 <sbrk_aligned>:
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	4e0e      	ldr	r6, [pc, #56]	; (8001094 <sbrk_aligned+0x3c>)
 800105c:	460c      	mov	r4, r1
 800105e:	6831      	ldr	r1, [r6, #0]
 8001060:	4605      	mov	r5, r0
 8001062:	b911      	cbnz	r1, 800106a <sbrk_aligned+0x12>
 8001064:	f000 f8bc 	bl	80011e0 <_sbrk_r>
 8001068:	6030      	str	r0, [r6, #0]
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	f000 f8b7 	bl	80011e0 <_sbrk_r>
 8001072:	1c43      	adds	r3, r0, #1
 8001074:	d00a      	beq.n	800108c <sbrk_aligned+0x34>
 8001076:	1cc4      	adds	r4, r0, #3
 8001078:	f024 0403 	bic.w	r4, r4, #3
 800107c:	42a0      	cmp	r0, r4
 800107e:	d007      	beq.n	8001090 <sbrk_aligned+0x38>
 8001080:	1a21      	subs	r1, r4, r0
 8001082:	4628      	mov	r0, r5
 8001084:	f000 f8ac 	bl	80011e0 <_sbrk_r>
 8001088:	3001      	adds	r0, #1
 800108a:	d101      	bne.n	8001090 <sbrk_aligned+0x38>
 800108c:	f04f 34ff 	mov.w	r4, #4294967295
 8001090:	4620      	mov	r0, r4
 8001092:	bd70      	pop	{r4, r5, r6, pc}
 8001094:	20000520 	.word	0x20000520

08001098 <_malloc_r>:
 8001098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800109c:	1ccd      	adds	r5, r1, #3
 800109e:	f025 0503 	bic.w	r5, r5, #3
 80010a2:	3508      	adds	r5, #8
 80010a4:	2d0c      	cmp	r5, #12
 80010a6:	bf38      	it	cc
 80010a8:	250c      	movcc	r5, #12
 80010aa:	2d00      	cmp	r5, #0
 80010ac:	4607      	mov	r7, r0
 80010ae:	db01      	blt.n	80010b4 <_malloc_r+0x1c>
 80010b0:	42a9      	cmp	r1, r5
 80010b2:	d905      	bls.n	80010c0 <_malloc_r+0x28>
 80010b4:	230c      	movs	r3, #12
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	2600      	movs	r6, #0
 80010ba:	4630      	mov	r0, r6
 80010bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c0:	4e2e      	ldr	r6, [pc, #184]	; (800117c <_malloc_r+0xe4>)
 80010c2:	f000 f89d 	bl	8001200 <__malloc_lock>
 80010c6:	6833      	ldr	r3, [r6, #0]
 80010c8:	461c      	mov	r4, r3
 80010ca:	bb34      	cbnz	r4, 800111a <_malloc_r+0x82>
 80010cc:	4629      	mov	r1, r5
 80010ce:	4638      	mov	r0, r7
 80010d0:	f7ff ffc2 	bl	8001058 <sbrk_aligned>
 80010d4:	1c43      	adds	r3, r0, #1
 80010d6:	4604      	mov	r4, r0
 80010d8:	d14d      	bne.n	8001176 <_malloc_r+0xde>
 80010da:	6834      	ldr	r4, [r6, #0]
 80010dc:	4626      	mov	r6, r4
 80010de:	2e00      	cmp	r6, #0
 80010e0:	d140      	bne.n	8001164 <_malloc_r+0xcc>
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	4631      	mov	r1, r6
 80010e6:	4638      	mov	r0, r7
 80010e8:	eb04 0803 	add.w	r8, r4, r3
 80010ec:	f000 f878 	bl	80011e0 <_sbrk_r>
 80010f0:	4580      	cmp	r8, r0
 80010f2:	d13a      	bne.n	800116a <_malloc_r+0xd2>
 80010f4:	6821      	ldr	r1, [r4, #0]
 80010f6:	3503      	adds	r5, #3
 80010f8:	1a6d      	subs	r5, r5, r1
 80010fa:	f025 0503 	bic.w	r5, r5, #3
 80010fe:	3508      	adds	r5, #8
 8001100:	2d0c      	cmp	r5, #12
 8001102:	bf38      	it	cc
 8001104:	250c      	movcc	r5, #12
 8001106:	4629      	mov	r1, r5
 8001108:	4638      	mov	r0, r7
 800110a:	f7ff ffa5 	bl	8001058 <sbrk_aligned>
 800110e:	3001      	adds	r0, #1
 8001110:	d02b      	beq.n	800116a <_malloc_r+0xd2>
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	442b      	add	r3, r5
 8001116:	6023      	str	r3, [r4, #0]
 8001118:	e00e      	b.n	8001138 <_malloc_r+0xa0>
 800111a:	6822      	ldr	r2, [r4, #0]
 800111c:	1b52      	subs	r2, r2, r5
 800111e:	d41e      	bmi.n	800115e <_malloc_r+0xc6>
 8001120:	2a0b      	cmp	r2, #11
 8001122:	d916      	bls.n	8001152 <_malloc_r+0xba>
 8001124:	1961      	adds	r1, r4, r5
 8001126:	42a3      	cmp	r3, r4
 8001128:	6025      	str	r5, [r4, #0]
 800112a:	bf18      	it	ne
 800112c:	6059      	strne	r1, [r3, #4]
 800112e:	6863      	ldr	r3, [r4, #4]
 8001130:	bf08      	it	eq
 8001132:	6031      	streq	r1, [r6, #0]
 8001134:	5162      	str	r2, [r4, r5]
 8001136:	604b      	str	r3, [r1, #4]
 8001138:	4638      	mov	r0, r7
 800113a:	f104 060b 	add.w	r6, r4, #11
 800113e:	f000 f865 	bl	800120c <__malloc_unlock>
 8001142:	f026 0607 	bic.w	r6, r6, #7
 8001146:	1d23      	adds	r3, r4, #4
 8001148:	1af2      	subs	r2, r6, r3
 800114a:	d0b6      	beq.n	80010ba <_malloc_r+0x22>
 800114c:	1b9b      	subs	r3, r3, r6
 800114e:	50a3      	str	r3, [r4, r2]
 8001150:	e7b3      	b.n	80010ba <_malloc_r+0x22>
 8001152:	6862      	ldr	r2, [r4, #4]
 8001154:	42a3      	cmp	r3, r4
 8001156:	bf0c      	ite	eq
 8001158:	6032      	streq	r2, [r6, #0]
 800115a:	605a      	strne	r2, [r3, #4]
 800115c:	e7ec      	b.n	8001138 <_malloc_r+0xa0>
 800115e:	4623      	mov	r3, r4
 8001160:	6864      	ldr	r4, [r4, #4]
 8001162:	e7b2      	b.n	80010ca <_malloc_r+0x32>
 8001164:	4634      	mov	r4, r6
 8001166:	6876      	ldr	r6, [r6, #4]
 8001168:	e7b9      	b.n	80010de <_malloc_r+0x46>
 800116a:	230c      	movs	r3, #12
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4638      	mov	r0, r7
 8001170:	f000 f84c 	bl	800120c <__malloc_unlock>
 8001174:	e7a1      	b.n	80010ba <_malloc_r+0x22>
 8001176:	6025      	str	r5, [r4, #0]
 8001178:	e7de      	b.n	8001138 <_malloc_r+0xa0>
 800117a:	bf00      	nop
 800117c:	2000051c 	.word	0x2000051c

08001180 <_realloc_r>:
 8001180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001184:	4680      	mov	r8, r0
 8001186:	4614      	mov	r4, r2
 8001188:	460e      	mov	r6, r1
 800118a:	b921      	cbnz	r1, 8001196 <_realloc_r+0x16>
 800118c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001190:	4611      	mov	r1, r2
 8001192:	f7ff bf81 	b.w	8001098 <_malloc_r>
 8001196:	b92a      	cbnz	r2, 80011a4 <_realloc_r+0x24>
 8001198:	f7ff ff12 	bl	8000fc0 <_free_r>
 800119c:	4625      	mov	r5, r4
 800119e:	4628      	mov	r0, r5
 80011a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a4:	f000 f838 	bl	8001218 <_malloc_usable_size_r>
 80011a8:	4284      	cmp	r4, r0
 80011aa:	4607      	mov	r7, r0
 80011ac:	d802      	bhi.n	80011b4 <_realloc_r+0x34>
 80011ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80011b2:	d812      	bhi.n	80011da <_realloc_r+0x5a>
 80011b4:	4621      	mov	r1, r4
 80011b6:	4640      	mov	r0, r8
 80011b8:	f7ff ff6e 	bl	8001098 <_malloc_r>
 80011bc:	4605      	mov	r5, r0
 80011be:	2800      	cmp	r0, #0
 80011c0:	d0ed      	beq.n	800119e <_realloc_r+0x1e>
 80011c2:	42bc      	cmp	r4, r7
 80011c4:	4622      	mov	r2, r4
 80011c6:	4631      	mov	r1, r6
 80011c8:	bf28      	it	cs
 80011ca:	463a      	movcs	r2, r7
 80011cc:	f7ff fbc0 	bl	8000950 <memcpy>
 80011d0:	4631      	mov	r1, r6
 80011d2:	4640      	mov	r0, r8
 80011d4:	f7ff fef4 	bl	8000fc0 <_free_r>
 80011d8:	e7e1      	b.n	800119e <_realloc_r+0x1e>
 80011da:	4635      	mov	r5, r6
 80011dc:	e7df      	b.n	800119e <_realloc_r+0x1e>
	...

080011e0 <_sbrk_r>:
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4d06      	ldr	r5, [pc, #24]	; (80011fc <_sbrk_r+0x1c>)
 80011e4:	2300      	movs	r3, #0
 80011e6:	4604      	mov	r4, r0
 80011e8:	4608      	mov	r0, r1
 80011ea:	602b      	str	r3, [r5, #0]
 80011ec:	f7ff fb00 	bl	80007f0 <_sbrk>
 80011f0:	1c43      	adds	r3, r0, #1
 80011f2:	d102      	bne.n	80011fa <_sbrk_r+0x1a>
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	b103      	cbz	r3, 80011fa <_sbrk_r+0x1a>
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	bd38      	pop	{r3, r4, r5, pc}
 80011fc:	20000524 	.word	0x20000524

08001200 <__malloc_lock>:
 8001200:	4801      	ldr	r0, [pc, #4]	; (8001208 <__malloc_lock+0x8>)
 8001202:	f000 b811 	b.w	8001228 <__retarget_lock_acquire_recursive>
 8001206:	bf00      	nop
 8001208:	20000528 	.word	0x20000528

0800120c <__malloc_unlock>:
 800120c:	4801      	ldr	r0, [pc, #4]	; (8001214 <__malloc_unlock+0x8>)
 800120e:	f000 b80c 	b.w	800122a <__retarget_lock_release_recursive>
 8001212:	bf00      	nop
 8001214:	20000528 	.word	0x20000528

08001218 <_malloc_usable_size_r>:
 8001218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800121c:	1f18      	subs	r0, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	bfbc      	itt	lt
 8001222:	580b      	ldrlt	r3, [r1, r0]
 8001224:	18c0      	addlt	r0, r0, r3
 8001226:	4770      	bx	lr

08001228 <__retarget_lock_acquire_recursive>:
 8001228:	4770      	bx	lr

0800122a <__retarget_lock_release_recursive>:
 800122a:	4770      	bx	lr

0800122c <_init>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr

08001238 <_fini>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr
