
update-firmware-via-uart-using-hal-lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002980  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd0  08002bd0  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bd8  08002bd8  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00001798  20000238  08002e18  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019d0  08002e18  000219d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008db1  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189e  00000000  00000000  00029019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000710  00000000  00000000  0002b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016395  00000000  00000000  0002b770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abb4  00000000  00000000  00041b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087162  00000000  00000000  0004c6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d381b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b4  00000000  00000000  000d386c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000238 	.word	0x20000238
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002af8 	.word	0x08002af8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000023c 	.word	0x2000023c
 80001d4:	08002af8 	.word	0x08002af8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa54 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f872 	bl	80005cc <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f850 	bl	800058c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f824 	bl	8000538 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //vectortable_move();
  printf("Starting update firmware\n");
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <main+0x44>)
 80004f2:	f001 fe71 	bl	80021d8 <puts>
  HAL_UART_Receive_DMA(&huart2, rx_dma_buffer, sizeof(rx_dma_buffer));
 80004f6:	f241 62bc 	movw	r2, #5820	; 0x16bc
 80004fa:	490a      	ldr	r1, [pc, #40]	; (8000524 <main+0x48>)
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <main+0x4c>)
 80004fe:	f001 f8da 	bl	80016b6 <HAL_UART_Receive_DMA>
  while (!receive_done) {
 8000502:	e002      	b.n	800050a <main+0x2e>
	  printf("Downloading ...\n");
 8000504:	4809      	ldr	r0, [pc, #36]	; (800052c <main+0x50>)
 8000506:	f001 fe67 	bl	80021d8 <puts>
  while (!receive_done) {
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <main+0x54>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f8      	beq.n	8000504 <main+0x28>
  }
  printf("Success! Full download\n");
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x58>)
 8000514:	f001 fe60 	bl	80021d8 <puts>
  update_firmware();
 8000518:	f002 fafa 	bl	8002b10 <__update_firmware_veneer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x40>
 800051e:	bf00      	nop
 8000520:	08002b18 	.word	0x08002b18
 8000524:	200002f8 	.word	0x200002f8
 8000528:	20000254 	.word	0x20000254
 800052c:	08002b34 	.word	0x08002b34
 8000530:	200019b4 	.word	0x200019b4
 8000534:	08002b44 	.word	0x08002b44

08000538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <MX_USART2_UART_Init+0x50>)
 8000540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000544:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800055e:	220c      	movs	r2, #12
 8000560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000570:	f001 f854 	bl	800161c <HAL_UART_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800057a:	f000 f841 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000254 	.word	0x20000254
 8000588:	40004400 	.word	0x40004400

0800058c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_DMA_Init+0x3c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <MX_DMA_Init+0x3c>)
 800059c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_DMA_Init+0x3c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	2010      	movs	r0, #16
 80005b4:	f000 fae0 	bl	8000b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005b8:	2010      	movs	r0, #16
 80005ba:	f000 faf9 	bl	8000bb0 <HAL_NVIC_EnableIRQ>

}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_GPIO_Init+0x30>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <MX_GPIO_Init+0x30>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_GPIO_Init+0x30>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	e7fe      	b.n	8000608 <Error_Handler+0x8>
	...

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <HAL_MspInit+0x4c>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <HAL_MspInit+0x4c>)
 800061c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000620:	6453      	str	r3, [r2, #68]	; 0x44
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <HAL_MspInit+0x4c>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_MspInit+0x4c>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <HAL_MspInit+0x4c>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	6413      	str	r3, [r2, #64]	; 0x40
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_MspInit+0x4c>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a30      	ldr	r2, [pc, #192]	; (800073c <HAL_UART_MspInit+0xe0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d159      	bne.n	8000732 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <HAL_UART_MspInit+0xe4>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <HAL_UART_MspInit+0xe4>)
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	6413      	str	r3, [r2, #64]	; 0x40
 800068e:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <HAL_UART_MspInit+0xe4>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b28      	ldr	r3, [pc, #160]	; (8000740 <HAL_UART_MspInit+0xe4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a27      	ldr	r2, [pc, #156]	; (8000740 <HAL_UART_MspInit+0xe4>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <HAL_UART_MspInit+0xe4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006b6:	230c      	movs	r3, #12
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006c6:	2307      	movs	r3, #7
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	481c      	ldr	r0, [pc, #112]	; (8000744 <HAL_UART_MspInit+0xe8>)
 80006d2:	f000 fdeb 	bl	80012ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <HAL_UART_MspInit+0xec>)
 80006d8:	4a1c      	ldr	r2, [pc, #112]	; (800074c <HAL_UART_MspInit+0xf0>)
 80006da:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <HAL_UART_MspInit+0xec>)
 80006de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_UART_MspInit+0xec>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <HAL_UART_MspInit+0xec>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_UART_MspInit+0xec>)
 80006f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_UART_MspInit+0xec>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_UART_MspInit+0xec>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <HAL_UART_MspInit+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_UART_MspInit+0xec>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <HAL_UART_MspInit+0xec>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <HAL_UART_MspInit+0xec>)
 8000718:	f000 fa58 	bl	8000bcc <HAL_DMA_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000722:	f7ff ff6d 	bl	8000600 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_UART_MspInit+0xec>)
 800072a:	639a      	str	r2, [r3, #56]	; 0x38
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_UART_MspInit+0xec>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	; 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40004400 	.word	0x40004400
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000
 8000748:	20000298 	.word	0x20000298
 800074c:	40026088 	.word	0x40026088

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <NMI_Handler+0x4>

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <MemManage_Handler+0x4>

08000762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <UsageFault_Handler+0x4>

0800076e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 f914 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if (__HAL_DMA_GET_COUNTER(&hdma_usart2_rx) == 0) {
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <DMA1_Stream5_IRQHandler+0x20>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d102      	bne.n	80007b8 <DMA1_Stream5_IRQHandler+0x14>
		receive_done = 1;
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <DMA1_Stream5_IRQHandler+0x24>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <DMA1_Stream5_IRQHandler+0x20>)
 80007ba:	f000 fb0d 	bl	8000dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000298 	.word	0x20000298
 80007c8:	200019b4 	.word	0x200019b4

080007cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	e00a      	b.n	80007f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007de:	f3af 8000 	nop.w
 80007e2:	4601      	mov	r1, r0
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	60ba      	str	r2, [r7, #8]
 80007ea:	b2ca      	uxtb	r2, r1
 80007ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf0      	blt.n	80007de <_read+0x12>
	}

return len;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	e009      	b.n	800082c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbf1      	blt.n	8000818 <_write+0x12>
	}
	return len;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_close>:

int _close(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000866:	605a      	str	r2, [r3, #4]
	return 0;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <_isatty>:

int _isatty(int file)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
	return 1;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
	return 0;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <_sbrk+0x5c>)
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <_sbrk+0x60>)
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <_sbrk+0x64>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <_sbrk+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d207      	bcs.n	80008e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d8:	f001 fbde 	bl	8002098 <__errno>
 80008dc:	4603      	mov	r3, r0
 80008de:	220c      	movs	r2, #12
 80008e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	e009      	b.n	80008fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <_sbrk+0x64>)
 80008f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20020000 	.word	0x20020000
 8000908:	00000400 	.word	0x00000400
 800090c:	200019b8 	.word	0x200019b8
 8000910:	200019d0 	.word	0x200019d0

08000914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800093e:	490e      	ldr	r1, [pc, #56]	; (8000978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000954:	4c0b      	ldr	r4, [pc, #44]	; (8000984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000962:	f7ff ffd7 	bl	8000914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 fb9d 	bl	80020a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096a:	f7ff fdb7 	bl	80004dc <main>
  bx  lr    
 800096e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 800097c:	08002be0 	.word	0x08002be0
  ldr r2, =_sbss
 8000980:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8000984:	200019d0 	.word	0x200019d0

08000988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC_IRQHandler>
	...

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_Init+0x38>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_Init+0x38>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_Init+0x38>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_Init+0x38>)
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_Init+0x38>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <HAL_Init+0x38>)
 80009ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f8d4 	bl	8000b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  //HAL_InitTick(TICK_INT_PRIORITY);

  /* Init the low level hardware */
  HAL_MspInit();
 80009ba:	f7ff fe27 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023c00 	.word	0x40023c00

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000004 	.word	0x20000004
 80009ec:	200019bc 	.word	0x200019bc

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200019bc 	.word	0x200019bc

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <__NVIC_EnableIRQ+0x38>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff4c 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8a:	f7ff ff61 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000b8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	68b9      	ldr	r1, [r7, #8]
 8000b94:	6978      	ldr	r0, [r7, #20]
 8000b96:	f7ff ffb1 	bl	8000afc <NVIC_EncodePriority>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff80 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff54 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ff0a 	bl	80009f0 <HAL_GetTick>
 8000bdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e099      	b.n	8000d1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2202      	movs	r2, #2
 8000bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0201 	bic.w	r2, r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c08:	e00f      	b.n	8000c2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c0a:	f7ff fef1 	bl	80009f0 <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b05      	cmp	r3, #5
 8000c16:	d908      	bls.n	8000c2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2203      	movs	r2, #3
 8000c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e078      	b.n	8000d1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1e8      	bne.n	8000c0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <HAL_DMA_Init+0x158>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d107      	bne.n	8000c94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f023 0307 	bic.w	r3, r3, #7
 8000caa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d117      	bne.n	8000cee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00e      	beq.n	8000cee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 fa6f 	bl	80011b4 <DMA_CheckFifoParam>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d008      	beq.n	8000cee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2240      	movs	r2, #64	; 0x40
 8000ce0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000cea:	2301      	movs	r3, #1
 8000cec:	e016      	b.n	8000d1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 fa26 	bl	8001148 <DMA_CalcBaseAndBitshift>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d04:	223f      	movs	r2, #63	; 0x3f
 8000d06:	409a      	lsls	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	f010803f 	.word	0xf010803f

08000d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_DMA_Start_IT+0x26>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e040      	b.n	8000dd0 <HAL_DMA_Start_IT+0xa8>
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d12f      	bne.n	8000dc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2202      	movs	r2, #2
 8000d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f000 f9b8 	bl	80010ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d80:	223f      	movs	r2, #63	; 0x3f
 8000d82:	409a      	lsls	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0216 	orr.w	r2, r2, #22
 8000d96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d007      	beq.n	8000db0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0208 	orr.w	r2, r2, #8
 8000dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0201 	orr.w	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e005      	b.n	8000dce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000de4:	4b8e      	ldr	r3, [pc, #568]	; (8001020 <HAL_DMA_IRQHandler+0x248>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a8e      	ldr	r2, [pc, #568]	; (8001024 <HAL_DMA_IRQHandler+0x24c>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0a9b      	lsrs	r3, r3, #10
 8000df0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e02:	2208      	movs	r2, #8
 8000e04:	409a      	lsls	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d01a      	beq.n	8000e44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d013      	beq.n	8000e44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0204 	bic.w	r2, r2, #4
 8000e2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e30:	2208      	movs	r2, #8
 8000e32:	409a      	lsls	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e3c:	f043 0201 	orr.w	r2, r3, #1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e48:	2201      	movs	r2, #1
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d012      	beq.n	8000e7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e66:	2201      	movs	r2, #1
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e72:	f043 0202 	orr.w	r2, r3, #2
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e7e:	2204      	movs	r2, #4
 8000e80:	409a      	lsls	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d012      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00b      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea8:	f043 0204 	orr.w	r2, r3, #4
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d043      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d03c      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d018      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d108      	bne.n	8000f08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d024      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	4798      	blx	r3
 8000f06:	e01f      	b.n	8000f48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d01b      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	4798      	blx	r3
 8000f18:	e016      	b.n	8000f48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d107      	bne.n	8000f38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0208 	bic.w	r2, r2, #8
 8000f36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 808f 	beq.w	8001078 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 8087 	beq.w	8001078 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f6e:	2220      	movs	r2, #32
 8000f70:	409a      	lsls	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b05      	cmp	r3, #5
 8000f80:	d136      	bne.n	8000ff0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0216 	bic.w	r2, r2, #22
 8000f90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d103      	bne.n	8000fb2 <HAL_DMA_IRQHandler+0x1da>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0208 	bic.w	r2, r2, #8
 8000fc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc6:	223f      	movs	r2, #63	; 0x3f
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d07e      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
        }
        return;
 8000fee:	e079      	b.n	80010e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d01d      	beq.n	800103a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10d      	bne.n	8001028 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	2b00      	cmp	r3, #0
 8001012:	d031      	beq.n	8001078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4798      	blx	r3
 800101c:	e02c      	b.n	8001078 <HAL_DMA_IRQHandler+0x2a0>
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000
 8001024:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102c:	2b00      	cmp	r3, #0
 800102e:	d023      	beq.n	8001078 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	4798      	blx	r3
 8001038:	e01e      	b.n	8001078 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001044:	2b00      	cmp	r3, #0
 8001046:	d10f      	bne.n	8001068 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0210 	bic.w	r2, r2, #16
 8001056:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107c:	2b00      	cmp	r3, #0
 800107e:	d032      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d022      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2205      	movs	r2, #5
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d307      	bcc.n	80010c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f2      	bne.n	80010a4 <HAL_DMA_IRQHandler+0x2cc>
 80010be:	e000      	b.n	80010c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80010c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	4798      	blx	r3
 80010e2:	e000      	b.n	80010e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80010e4:	bf00      	nop
    }
  }
}
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001108:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b40      	cmp	r3, #64	; 0x40
 8001118:	d108      	bne.n	800112c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800112a:	e007      	b.n	800113c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	60da      	str	r2, [r3, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3b10      	subs	r3, #16
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <DMA_CalcBaseAndBitshift+0x64>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <DMA_CalcBaseAndBitshift+0x68>)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d909      	bls.n	800118a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800117e:	f023 0303 	bic.w	r3, r3, #3
 8001182:	1d1a      	adds	r2, r3, #4
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	659a      	str	r2, [r3, #88]	; 0x58
 8001188:	e007      	b.n	800119a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001192:	f023 0303 	bic.w	r3, r3, #3
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	aaaaaaab 	.word	0xaaaaaaab
 80011b0:	08002b64 	.word	0x08002b64

080011b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d11f      	bne.n	800120e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d856      	bhi.n	8001282 <DMA_CheckFifoParam+0xce>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <DMA_CheckFifoParam+0x28>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	080011ed 	.word	0x080011ed
 80011e0:	080011ff 	.word	0x080011ff
 80011e4:	080011ed 	.word	0x080011ed
 80011e8:	08001283 	.word	0x08001283
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d046      	beq.n	8001286 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011fc:	e043      	b.n	8001286 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001206:	d140      	bne.n	800128a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800120c:	e03d      	b.n	800128a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001216:	d121      	bne.n	800125c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b03      	cmp	r3, #3
 800121c:	d837      	bhi.n	800128e <DMA_CheckFifoParam+0xda>
 800121e:	a201      	add	r2, pc, #4	; (adr r2, 8001224 <DMA_CheckFifoParam+0x70>)
 8001220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001224:	08001235 	.word	0x08001235
 8001228:	0800123b 	.word	0x0800123b
 800122c:	08001235 	.word	0x08001235
 8001230:	0800124d 	.word	0x0800124d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
      break;
 8001238:	e030      	b.n	800129c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d025      	beq.n	8001292 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800124a:	e022      	b.n	8001292 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001254:	d11f      	bne.n	8001296 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800125a:	e01c      	b.n	8001296 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d903      	bls.n	800126a <DMA_CheckFifoParam+0xb6>
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d003      	beq.n	8001270 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001268:	e018      	b.n	800129c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
      break;
 800126e:	e015      	b.n	800129c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00e      	beq.n	800129a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
      break;
 8001280:	e00b      	b.n	800129a <DMA_CheckFifoParam+0xe6>
      break;
 8001282:	bf00      	nop
 8001284:	e00a      	b.n	800129c <DMA_CheckFifoParam+0xe8>
      break;
 8001286:	bf00      	nop
 8001288:	e008      	b.n	800129c <DMA_CheckFifoParam+0xe8>
      break;
 800128a:	bf00      	nop
 800128c:	e006      	b.n	800129c <DMA_CheckFifoParam+0xe8>
      break;
 800128e:	bf00      	nop
 8001290:	e004      	b.n	800129c <DMA_CheckFifoParam+0xe8>
      break;
 8001292:	bf00      	nop
 8001294:	e002      	b.n	800129c <DMA_CheckFifoParam+0xe8>
      break;   
 8001296:	bf00      	nop
 8001298:	e000      	b.n	800129c <DMA_CheckFifoParam+0xe8>
      break;
 800129a:	bf00      	nop
    }
  } 
  
  return status; 
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e159      	b.n	800157c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 8148 	bne.w	8001576 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80a2 	beq.w	8001576 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b57      	ldr	r3, [pc, #348]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a56      	ldr	r2, [pc, #344]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b54      	ldr	r3, [pc, #336]	; (8001594 <HAL_GPIO_Init+0x2e8>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a52      	ldr	r2, [pc, #328]	; (8001598 <HAL_GPIO_Init+0x2ec>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a49      	ldr	r2, [pc, #292]	; (800159c <HAL_GPIO_Init+0x2f0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x202>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <HAL_GPIO_Init+0x2f4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x1fe>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a47      	ldr	r2, [pc, #284]	; (80015a4 <HAL_GPIO_Init+0x2f8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x1fa>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <HAL_GPIO_Init+0x2fc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x1f6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_GPIO_Init+0x300>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x1f2>
 800149a:	2304      	movs	r3, #4
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 800149e:	2307      	movs	r3, #7
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x204>
 80014ae:	2300      	movs	r3, #0
 80014b0:	69fa      	ldr	r2, [r7, #28]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c0:	4935      	ldr	r1, [pc, #212]	; (8001598 <HAL_GPIO_Init+0x2ec>)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f2:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_GPIO_Init+0x304>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800151c:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001546:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	f67f aea2 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40013800 	.word	0x40013800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40013c00 	.word	0x40013c00

080015b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000

080015cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	4903      	ldr	r1, [pc, #12]	; (80015f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e2:	5ccb      	ldrb	r3, [r1, r3]
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	08002b5c 	.word	0x08002b5c

080015f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015f8:	f7ff ffdc 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	0b5b      	lsrs	r3, r3, #13
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	4903      	ldr	r1, [pc, #12]	; (8001618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40023800 	.word	0x40023800
 8001618:	08002b5c 	.word	0x08002b5c

0800161c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e03f      	b.n	80016ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff f80a 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2224      	movs	r2, #36	; 0x24
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800165e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 faa5 	bl	8001bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d11d      	bne.n	800170c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <HAL_UART_Receive_DMA+0x26>
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e016      	b.n	800170e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_UART_Receive_DMA+0x38>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e00f      	b.n	800170e <HAL_UART_Receive_DMA+0x58>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	461a      	mov	r2, r3
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f92a 	bl	800195c <UART_Start_Receive_DMA>
 8001708:	4603      	mov	r3, r0
 800170a:	e000      	b.n	800170e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800170c:	2302      	movs	r3, #2
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b09c      	sub	sp, #112	; 0x70
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d172      	bne.n	800186c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001788:	2200      	movs	r2, #0
 800178a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800178c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	330c      	adds	r3, #12
 8001792:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001796:	e853 3f00 	ldrex	r3, [r3]
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800179c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800179e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80017a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	330c      	adds	r3, #12
 80017aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80017ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80017ae:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017b4:	e841 2300 	strex	r3, r2, [r1]
 80017b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80017ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e5      	bne.n	800178c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3314      	adds	r3, #20
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ca:	e853 3f00 	ldrex	r3, [r3]
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	667b      	str	r3, [r7, #100]	; 0x64
 80017d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3314      	adds	r3, #20
 80017de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017e0:	647a      	str	r2, [r7, #68]	; 0x44
 80017e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80017e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017e8:	e841 2300 	strex	r3, r2, [r1]
 80017ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80017ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e5      	bne.n	80017c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3314      	adds	r3, #20
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	e853 3f00 	ldrex	r3, [r3]
 8001802:	623b      	str	r3, [r7, #32]
   return(result);
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800180a:	663b      	str	r3, [r7, #96]	; 0x60
 800180c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3314      	adds	r3, #20
 8001812:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001814:	633a      	str	r2, [r7, #48]	; 0x30
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800181a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181c:	e841 2300 	strex	r3, r2, [r1]
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e5      	bne.n	80017f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800182a:	2220      	movs	r2, #32
 800182c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	2b01      	cmp	r3, #1
 8001836:	d119      	bne.n	800186c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	330c      	adds	r3, #12
 800183e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	e853 3f00 	ldrex	r3, [r3]
 8001846:	60fb      	str	r3, [r7, #12]
   return(result);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 0310 	bic.w	r3, r3, #16
 800184e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	330c      	adds	r3, #12
 8001856:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001858:	61fa      	str	r2, [r7, #28]
 800185a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800185c:	69b9      	ldr	r1, [r7, #24]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	e841 2300 	strex	r3, r2, [r1]
 8001864:	617b      	str	r3, [r7, #20]
   return(result);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1e5      	bne.n	8001838 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800186c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	2b01      	cmp	r3, #1
 8001872:	d106      	bne.n	8001882 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001876:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001878:	4619      	mov	r1, r3
 800187a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800187c:	f7ff ff69 	bl	8001752 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001880:	e002      	b.n	8001888 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8001882:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001884:	f7ff ff47 	bl	8001716 <HAL_UART_RxCpltCallback>
}
 8001888:	bf00      	nop
 800188a:	3770      	adds	r7, #112	; 0x70
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80018aa:	085b      	lsrs	r3, r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff ff4e 	bl	8001752 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80018b6:	e002      	b.n	80018be <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f7ff ff36 	bl	800172a <HAL_UART_RxHalfCpltCallback>
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b80      	cmp	r3, #128	; 0x80
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b21      	cmp	r3, #33	; 0x21
 80018f8:	d108      	bne.n	800190c <UART_DMAError+0x46>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2200      	movs	r2, #0
 8001904:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f000 f8c6 	bl	8001a98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001916:	2b40      	cmp	r3, #64	; 0x40
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b22      	cmp	r3, #34	; 0x22
 800192c:	d108      	bne.n	8001940 <UART_DMAError+0x7a>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2200      	movs	r2, #0
 8001938:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f000 f8d4 	bl	8001ae8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800194c:	68b8      	ldr	r0, [r7, #8]
 800194e:	f7ff fef6 	bl	800173e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b098      	sub	sp, #96	; 0x60
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	4613      	mov	r3, r2
 8001968:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	88fa      	ldrh	r2, [r7, #6]
 8001974:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2222      	movs	r2, #34	; 0x22
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001988:	4a40      	ldr	r2, [pc, #256]	; (8001a8c <UART_Start_Receive_DMA+0x130>)
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	4a3f      	ldr	r2, [pc, #252]	; (8001a90 <UART_Start_Receive_DMA+0x134>)
 8001992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001998:	4a3e      	ldr	r2, [pc, #248]	; (8001a94 <UART_Start_Receive_DMA+0x138>)
 800199a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	2200      	movs	r2, #0
 80019a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3304      	adds	r3, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f7ff f9b4 	bl	8000d28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d019      	beq.n	8001a1a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	330c      	adds	r3, #12
 80019ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f0:	e853 3f00 	ldrex	r3, [r3]
 80019f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80019f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	330c      	adds	r3, #12
 8001a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001a0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a0e:	e841 2300 	strex	r3, r2, [r1]
 8001a12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8001a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1e5      	bne.n	80019e6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3314      	adds	r3, #20
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	e853 3f00 	ldrex	r3, [r3]
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	657b      	str	r3, [r7, #84]	; 0x54
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3314      	adds	r3, #20
 8001a38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a42:	e841 2300 	strex	r3, r2, [r1]
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1e5      	bne.n	8001a1a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3314      	adds	r3, #20
 8001a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	e853 3f00 	ldrex	r3, [r3]
 8001a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a64:	653b      	str	r3, [r7, #80]	; 0x50
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3314      	adds	r3, #20
 8001a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8001a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a72:	6a39      	ldr	r1, [r7, #32]
 8001a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a76:	e841 2300 	strex	r3, r2, [r1]
 8001a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e5      	bne.n	8001a4e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3760      	adds	r7, #96	; 0x60
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	0800176b 	.word	0x0800176b
 8001a90:	08001891 	.word	0x08001891
 8001a94:	080018c7 	.word	0x080018c7

08001a98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	e853 3f00 	ldrex	r3, [r3]
 8001aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	330c      	adds	r3, #12
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	61ba      	str	r2, [r7, #24]
 8001ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ac4:	6979      	ldr	r1, [r7, #20]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	e841 2300 	strex	r3, r2, [r1]
 8001acc:	613b      	str	r3, [r7, #16]
   return(result);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e5      	bne.n	8001aa0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8001adc:	bf00      	nop
 8001ade:	3724      	adds	r7, #36	; 0x24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b095      	sub	sp, #84	; 0x54
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	330c      	adds	r3, #12
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	e853 3f00 	ldrex	r3, [r3]
 8001afe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b10:	643a      	str	r2, [r7, #64]	; 0x40
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b18:	e841 2300 	strex	r3, r2, [r1]
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e5      	bne.n	8001af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3314      	adds	r3, #20
 8001b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	e853 3f00 	ldrex	r3, [r3]
 8001b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3314      	adds	r3, #20
 8001b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4c:	e841 2300 	strex	r3, r2, [r1]
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e5      	bne.n	8001b24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d119      	bne.n	8001b94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	330c      	adds	r3, #12
 8001b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	e853 3f00 	ldrex	r3, [r3]
 8001b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f023 0310 	bic.w	r3, r3, #16
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b80:	61ba      	str	r2, [r7, #24]
 8001b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b84:	6979      	ldr	r1, [r7, #20]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	e841 2300 	strex	r3, r2, [r1]
 8001b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1e5      	bne.n	8001b60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ba2:	bf00      	nop
 8001ba4:	3754      	adds	r7, #84	; 0x54
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb4:	b0c0      	sub	sp, #256	; 0x100
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bcc:	68d9      	ldr	r1, [r3, #12]
 8001bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	ea40 0301 	orr.w	r3, r0, r1
 8001bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c08:	f021 010c 	bic.w	r1, r1, #12
 8001c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c16:	430b      	orrs	r3, r1
 8001c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c2a:	6999      	ldr	r1, [r3, #24]
 8001c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	ea40 0301 	orr.w	r3, r0, r1
 8001c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <UART_SetConfig+0x2cc>)
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d005      	beq.n	8001c50 <UART_SetConfig+0xa0>
 8001c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <UART_SetConfig+0x2d0>)
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d104      	bne.n	8001c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c50:	f7ff fcd0 	bl	80015f4 <HAL_RCC_GetPCLK2Freq>
 8001c54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c58:	e003      	b.n	8001c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c5a:	f7ff fcb7 	bl	80015cc <HAL_RCC_GetPCLK1Freq>
 8001c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c6c:	f040 810c 	bne.w	8001e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c74:	2200      	movs	r2, #0
 8001c76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c82:	4622      	mov	r2, r4
 8001c84:	462b      	mov	r3, r5
 8001c86:	1891      	adds	r1, r2, r2
 8001c88:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c8a:	415b      	adcs	r3, r3
 8001c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c92:	4621      	mov	r1, r4
 8001c94:	eb12 0801 	adds.w	r8, r2, r1
 8001c98:	4629      	mov	r1, r5
 8001c9a:	eb43 0901 	adc.w	r9, r3, r1
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	eb18 0303 	adds.w	r3, r8, r3
 8001cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	eb49 0303 	adc.w	r3, r9, r3
 8001cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001cde:	460b      	mov	r3, r1
 8001ce0:	18db      	adds	r3, r3, r3
 8001ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	eb42 0303 	adc.w	r3, r2, r3
 8001cea:	657b      	str	r3, [r7, #84]	; 0x54
 8001cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001cf4:	f7fe fa70 	bl	80001d8 <__aeabi_uldivmod>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <UART_SetConfig+0x2d4>)
 8001cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	011c      	lsls	r4, r3, #4
 8001d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d18:	4642      	mov	r2, r8
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	1891      	adds	r1, r2, r2
 8001d1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d20:	415b      	adcs	r3, r3
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d28:	4641      	mov	r1, r8
 8001d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8001d2e:	4649      	mov	r1, r9
 8001d30:	eb43 0b01 	adc.w	fp, r3, r1
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d48:	4692      	mov	sl, r2
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	4643      	mov	r3, r8
 8001d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8001d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d56:	464b      	mov	r3, r9
 8001d58:	eb4b 0303 	adc.w	r3, fp, r3
 8001d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d74:	460b      	mov	r3, r1
 8001d76:	18db      	adds	r3, r3, r3
 8001d78:	643b      	str	r3, [r7, #64]	; 0x40
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	eb42 0303 	adc.w	r3, r2, r3
 8001d80:	647b      	str	r3, [r7, #68]	; 0x44
 8001d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d8a:	f7fe fa25 	bl	80001d8 <__aeabi_uldivmod>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <UART_SetConfig+0x2d4>)
 8001d96:	fba3 2301 	umull	r2, r3, r3, r1
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2264      	movs	r2, #100	; 0x64
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	1acb      	subs	r3, r1, r3
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001daa:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <UART_SetConfig+0x2d4>)
 8001dac:	fba3 2302 	umull	r2, r3, r3, r2
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001db8:	441c      	add	r4, r3
 8001dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001dcc:	4642      	mov	r2, r8
 8001dce:	464b      	mov	r3, r9
 8001dd0:	1891      	adds	r1, r2, r2
 8001dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001dd4:	415b      	adcs	r3, r3
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ddc:	4641      	mov	r1, r8
 8001dde:	1851      	adds	r1, r2, r1
 8001de0:	6339      	str	r1, [r7, #48]	; 0x30
 8001de2:	4649      	mov	r1, r9
 8001de4:	414b      	adcs	r3, r1
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001df4:	4659      	mov	r1, fp
 8001df6:	00cb      	lsls	r3, r1, #3
 8001df8:	4651      	mov	r1, sl
 8001dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dfe:	4651      	mov	r1, sl
 8001e00:	00ca      	lsls	r2, r1, #3
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	4642      	mov	r2, r8
 8001e0a:	189b      	adds	r3, r3, r2
 8001e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e10:	464b      	mov	r3, r9
 8001e12:	460a      	mov	r2, r1
 8001e14:	eb42 0303 	adc.w	r3, r2, r3
 8001e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e30:	460b      	mov	r3, r1
 8001e32:	18db      	adds	r3, r3, r3
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e36:	4613      	mov	r3, r2
 8001e38:	eb42 0303 	adc.w	r3, r2, r3
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e46:	f7fe f9c7 	bl	80001d8 <__aeabi_uldivmod>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <UART_SetConfig+0x2d4>)
 8001e50:	fba3 1302 	umull	r1, r3, r3, r2
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	2164      	movs	r1, #100	; 0x64
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	3332      	adds	r3, #50	; 0x32
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <UART_SetConfig+0x2d4>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	f003 0207 	and.w	r2, r3, #7
 8001e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4422      	add	r2, r4
 8001e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e78:	e105      	b.n	8002086 <UART_SetConfig+0x4d6>
 8001e7a:	bf00      	nop
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40011400 	.word	0x40011400
 8001e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	464b      	mov	r3, r9
 8001e9e:	1891      	adds	r1, r2, r2
 8001ea0:	6239      	str	r1, [r7, #32]
 8001ea2:	415b      	adcs	r3, r3
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001eaa:	4641      	mov	r1, r8
 8001eac:	1854      	adds	r4, r2, r1
 8001eae:	4649      	mov	r1, r9
 8001eb0:	eb43 0501 	adc.w	r5, r3, r1
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	00eb      	lsls	r3, r5, #3
 8001ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec2:	00e2      	lsls	r2, r4, #3
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	4643      	mov	r3, r8
 8001eca:	18e3      	adds	r3, r4, r3
 8001ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ed0:	464b      	mov	r3, r9
 8001ed2:	eb45 0303 	adc.w	r3, r5, r3
 8001ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ee6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	008b      	lsls	r3, r1, #2
 8001efa:	4621      	mov	r1, r4
 8001efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f00:	4621      	mov	r1, r4
 8001f02:	008a      	lsls	r2, r1, #2
 8001f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f08:	f7fe f966 	bl	80001d8 <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4b60      	ldr	r3, [pc, #384]	; (8002094 <UART_SetConfig+0x4e4>)
 8001f12:	fba3 2302 	umull	r2, r3, r3, r2
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	011c      	lsls	r4, r3, #4
 8001f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f2c:	4642      	mov	r2, r8
 8001f2e:	464b      	mov	r3, r9
 8001f30:	1891      	adds	r1, r2, r2
 8001f32:	61b9      	str	r1, [r7, #24]
 8001f34:	415b      	adcs	r3, r3
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3c:	4641      	mov	r1, r8
 8001f3e:	1851      	adds	r1, r2, r1
 8001f40:	6139      	str	r1, [r7, #16]
 8001f42:	4649      	mov	r1, r9
 8001f44:	414b      	adcs	r3, r1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f54:	4659      	mov	r1, fp
 8001f56:	00cb      	lsls	r3, r1, #3
 8001f58:	4651      	mov	r1, sl
 8001f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f5e:	4651      	mov	r1, sl
 8001f60:	00ca      	lsls	r2, r1, #3
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	4642      	mov	r2, r8
 8001f6a:	189b      	adds	r3, r3, r2
 8001f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f70:	464b      	mov	r3, r9
 8001f72:	460a      	mov	r2, r1
 8001f74:	eb42 0303 	adc.w	r3, r2, r3
 8001f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f94:	4649      	mov	r1, r9
 8001f96:	008b      	lsls	r3, r1, #2
 8001f98:	4641      	mov	r1, r8
 8001f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f9e:	4641      	mov	r1, r8
 8001fa0:	008a      	lsls	r2, r1, #2
 8001fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001fa6:	f7fe f917 	bl	80001d8 <__aeabi_uldivmod>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <UART_SetConfig+0x4e4>)
 8001fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	2164      	movs	r1, #100	; 0x64
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	3332      	adds	r3, #50	; 0x32
 8001fc2:	4a34      	ldr	r2, [pc, #208]	; (8002094 <UART_SetConfig+0x4e4>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fce:	441c      	add	r4, r3
 8001fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	673b      	str	r3, [r7, #112]	; 0x70
 8001fd8:	677a      	str	r2, [r7, #116]	; 0x74
 8001fda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001fde:	4642      	mov	r2, r8
 8001fe0:	464b      	mov	r3, r9
 8001fe2:	1891      	adds	r1, r2, r2
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	415b      	adcs	r3, r3
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fee:	4641      	mov	r1, r8
 8001ff0:	1851      	adds	r1, r2, r1
 8001ff2:	6039      	str	r1, [r7, #0]
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	414b      	adcs	r3, r1
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002006:	4659      	mov	r1, fp
 8002008:	00cb      	lsls	r3, r1, #3
 800200a:	4651      	mov	r1, sl
 800200c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002010:	4651      	mov	r1, sl
 8002012:	00ca      	lsls	r2, r1, #3
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	4603      	mov	r3, r0
 800201a:	4642      	mov	r2, r8
 800201c:	189b      	adds	r3, r3, r2
 800201e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002020:	464b      	mov	r3, r9
 8002022:	460a      	mov	r2, r1
 8002024:	eb42 0303 	adc.w	r3, r2, r3
 8002028:	66fb      	str	r3, [r7, #108]	; 0x6c
 800202a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	663b      	str	r3, [r7, #96]	; 0x60
 8002034:	667a      	str	r2, [r7, #100]	; 0x64
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002042:	4649      	mov	r1, r9
 8002044:	008b      	lsls	r3, r1, #2
 8002046:	4641      	mov	r1, r8
 8002048:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800204c:	4641      	mov	r1, r8
 800204e:	008a      	lsls	r2, r1, #2
 8002050:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002054:	f7fe f8c0 	bl	80001d8 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <UART_SetConfig+0x4e4>)
 800205e:	fba3 1302 	umull	r1, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2164      	movs	r1, #100	; 0x64
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	3332      	adds	r3, #50	; 0x32
 8002070:	4a08      	ldr	r2, [pc, #32]	; (8002094 <UART_SetConfig+0x4e4>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	f003 020f 	and.w	r2, r3, #15
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4422      	add	r2, r4
 8002084:	609a      	str	r2, [r3, #8]
}
 8002086:	bf00      	nop
 8002088:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800208c:	46bd      	mov	sp, r7
 800208e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002092:	bf00      	nop
 8002094:	51eb851f 	.word	0x51eb851f

08002098 <__errno>:
 8002098:	4b01      	ldr	r3, [pc, #4]	; (80020a0 <__errno+0x8>)
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000008 	.word	0x20000008

080020a4 <__libc_init_array>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4d0d      	ldr	r5, [pc, #52]	; (80020dc <__libc_init_array+0x38>)
 80020a8:	4c0d      	ldr	r4, [pc, #52]	; (80020e0 <__libc_init_array+0x3c>)
 80020aa:	1b64      	subs	r4, r4, r5
 80020ac:	10a4      	asrs	r4, r4, #2
 80020ae:	2600      	movs	r6, #0
 80020b0:	42a6      	cmp	r6, r4
 80020b2:	d109      	bne.n	80020c8 <__libc_init_array+0x24>
 80020b4:	4d0b      	ldr	r5, [pc, #44]	; (80020e4 <__libc_init_array+0x40>)
 80020b6:	4c0c      	ldr	r4, [pc, #48]	; (80020e8 <__libc_init_array+0x44>)
 80020b8:	f000 fd1e 	bl	8002af8 <_init>
 80020bc:	1b64      	subs	r4, r4, r5
 80020be:	10a4      	asrs	r4, r4, #2
 80020c0:	2600      	movs	r6, #0
 80020c2:	42a6      	cmp	r6, r4
 80020c4:	d105      	bne.n	80020d2 <__libc_init_array+0x2e>
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
 80020c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020cc:	4798      	blx	r3
 80020ce:	3601      	adds	r6, #1
 80020d0:	e7ee      	b.n	80020b0 <__libc_init_array+0xc>
 80020d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d6:	4798      	blx	r3
 80020d8:	3601      	adds	r6, #1
 80020da:	e7f2      	b.n	80020c2 <__libc_init_array+0x1e>
 80020dc:	08002bd8 	.word	0x08002bd8
 80020e0:	08002bd8 	.word	0x08002bd8
 80020e4:	08002bd8 	.word	0x08002bd8
 80020e8:	08002bdc 	.word	0x08002bdc

080020ec <memset>:
 80020ec:	4402      	add	r2, r0
 80020ee:	4603      	mov	r3, r0
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d100      	bne.n	80020f6 <memset+0xa>
 80020f4:	4770      	bx	lr
 80020f6:	f803 1b01 	strb.w	r1, [r3], #1
 80020fa:	e7f9      	b.n	80020f0 <memset+0x4>

080020fc <_puts_r>:
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	460e      	mov	r6, r1
 8002100:	4605      	mov	r5, r0
 8002102:	b118      	cbz	r0, 800210c <_puts_r+0x10>
 8002104:	6983      	ldr	r3, [r0, #24]
 8002106:	b90b      	cbnz	r3, 800210c <_puts_r+0x10>
 8002108:	f000 fa48 	bl	800259c <__sinit>
 800210c:	69ab      	ldr	r3, [r5, #24]
 800210e:	68ac      	ldr	r4, [r5, #8]
 8002110:	b913      	cbnz	r3, 8002118 <_puts_r+0x1c>
 8002112:	4628      	mov	r0, r5
 8002114:	f000 fa42 	bl	800259c <__sinit>
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <_puts_r+0xd0>)
 800211a:	429c      	cmp	r4, r3
 800211c:	d120      	bne.n	8002160 <_puts_r+0x64>
 800211e:	686c      	ldr	r4, [r5, #4]
 8002120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002122:	07db      	lsls	r3, r3, #31
 8002124:	d405      	bmi.n	8002132 <_puts_r+0x36>
 8002126:	89a3      	ldrh	r3, [r4, #12]
 8002128:	0598      	lsls	r0, r3, #22
 800212a:	d402      	bmi.n	8002132 <_puts_r+0x36>
 800212c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800212e:	f000 fad3 	bl	80026d8 <__retarget_lock_acquire_recursive>
 8002132:	89a3      	ldrh	r3, [r4, #12]
 8002134:	0719      	lsls	r1, r3, #28
 8002136:	d51d      	bpl.n	8002174 <_puts_r+0x78>
 8002138:	6923      	ldr	r3, [r4, #16]
 800213a:	b1db      	cbz	r3, 8002174 <_puts_r+0x78>
 800213c:	3e01      	subs	r6, #1
 800213e:	68a3      	ldr	r3, [r4, #8]
 8002140:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002144:	3b01      	subs	r3, #1
 8002146:	60a3      	str	r3, [r4, #8]
 8002148:	bb39      	cbnz	r1, 800219a <_puts_r+0x9e>
 800214a:	2b00      	cmp	r3, #0
 800214c:	da38      	bge.n	80021c0 <_puts_r+0xc4>
 800214e:	4622      	mov	r2, r4
 8002150:	210a      	movs	r1, #10
 8002152:	4628      	mov	r0, r5
 8002154:	f000 f848 	bl	80021e8 <__swbuf_r>
 8002158:	3001      	adds	r0, #1
 800215a:	d011      	beq.n	8002180 <_puts_r+0x84>
 800215c:	250a      	movs	r5, #10
 800215e:	e011      	b.n	8002184 <_puts_r+0x88>
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <_puts_r+0xd4>)
 8002162:	429c      	cmp	r4, r3
 8002164:	d101      	bne.n	800216a <_puts_r+0x6e>
 8002166:	68ac      	ldr	r4, [r5, #8]
 8002168:	e7da      	b.n	8002120 <_puts_r+0x24>
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <_puts_r+0xd8>)
 800216c:	429c      	cmp	r4, r3
 800216e:	bf08      	it	eq
 8002170:	68ec      	ldreq	r4, [r5, #12]
 8002172:	e7d5      	b.n	8002120 <_puts_r+0x24>
 8002174:	4621      	mov	r1, r4
 8002176:	4628      	mov	r0, r5
 8002178:	f000 f888 	bl	800228c <__swsetup_r>
 800217c:	2800      	cmp	r0, #0
 800217e:	d0dd      	beq.n	800213c <_puts_r+0x40>
 8002180:	f04f 35ff 	mov.w	r5, #4294967295
 8002184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002186:	07da      	lsls	r2, r3, #31
 8002188:	d405      	bmi.n	8002196 <_puts_r+0x9a>
 800218a:	89a3      	ldrh	r3, [r4, #12]
 800218c:	059b      	lsls	r3, r3, #22
 800218e:	d402      	bmi.n	8002196 <_puts_r+0x9a>
 8002190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002192:	f000 faa2 	bl	80026da <__retarget_lock_release_recursive>
 8002196:	4628      	mov	r0, r5
 8002198:	bd70      	pop	{r4, r5, r6, pc}
 800219a:	2b00      	cmp	r3, #0
 800219c:	da04      	bge.n	80021a8 <_puts_r+0xac>
 800219e:	69a2      	ldr	r2, [r4, #24]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dc06      	bgt.n	80021b2 <_puts_r+0xb6>
 80021a4:	290a      	cmp	r1, #10
 80021a6:	d004      	beq.n	80021b2 <_puts_r+0xb6>
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	6022      	str	r2, [r4, #0]
 80021ae:	7019      	strb	r1, [r3, #0]
 80021b0:	e7c5      	b.n	800213e <_puts_r+0x42>
 80021b2:	4622      	mov	r2, r4
 80021b4:	4628      	mov	r0, r5
 80021b6:	f000 f817 	bl	80021e8 <__swbuf_r>
 80021ba:	3001      	adds	r0, #1
 80021bc:	d1bf      	bne.n	800213e <_puts_r+0x42>
 80021be:	e7df      	b.n	8002180 <_puts_r+0x84>
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	250a      	movs	r5, #10
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	6022      	str	r2, [r4, #0]
 80021c8:	701d      	strb	r5, [r3, #0]
 80021ca:	e7db      	b.n	8002184 <_puts_r+0x88>
 80021cc:	08002b90 	.word	0x08002b90
 80021d0:	08002bb0 	.word	0x08002bb0
 80021d4:	08002b70 	.word	0x08002b70

080021d8 <puts>:
 80021d8:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <puts+0xc>)
 80021da:	4601      	mov	r1, r0
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	f7ff bf8d 	b.w	80020fc <_puts_r>
 80021e2:	bf00      	nop
 80021e4:	20000008 	.word	0x20000008

080021e8 <__swbuf_r>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	460e      	mov	r6, r1
 80021ec:	4614      	mov	r4, r2
 80021ee:	4605      	mov	r5, r0
 80021f0:	b118      	cbz	r0, 80021fa <__swbuf_r+0x12>
 80021f2:	6983      	ldr	r3, [r0, #24]
 80021f4:	b90b      	cbnz	r3, 80021fa <__swbuf_r+0x12>
 80021f6:	f000 f9d1 	bl	800259c <__sinit>
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <__swbuf_r+0x98>)
 80021fc:	429c      	cmp	r4, r3
 80021fe:	d12b      	bne.n	8002258 <__swbuf_r+0x70>
 8002200:	686c      	ldr	r4, [r5, #4]
 8002202:	69a3      	ldr	r3, [r4, #24]
 8002204:	60a3      	str	r3, [r4, #8]
 8002206:	89a3      	ldrh	r3, [r4, #12]
 8002208:	071a      	lsls	r2, r3, #28
 800220a:	d52f      	bpl.n	800226c <__swbuf_r+0x84>
 800220c:	6923      	ldr	r3, [r4, #16]
 800220e:	b36b      	cbz	r3, 800226c <__swbuf_r+0x84>
 8002210:	6923      	ldr	r3, [r4, #16]
 8002212:	6820      	ldr	r0, [r4, #0]
 8002214:	1ac0      	subs	r0, r0, r3
 8002216:	6963      	ldr	r3, [r4, #20]
 8002218:	b2f6      	uxtb	r6, r6
 800221a:	4283      	cmp	r3, r0
 800221c:	4637      	mov	r7, r6
 800221e:	dc04      	bgt.n	800222a <__swbuf_r+0x42>
 8002220:	4621      	mov	r1, r4
 8002222:	4628      	mov	r0, r5
 8002224:	f000 f926 	bl	8002474 <_fflush_r>
 8002228:	bb30      	cbnz	r0, 8002278 <__swbuf_r+0x90>
 800222a:	68a3      	ldr	r3, [r4, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	60a3      	str	r3, [r4, #8]
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	6022      	str	r2, [r4, #0]
 8002236:	701e      	strb	r6, [r3, #0]
 8002238:	6963      	ldr	r3, [r4, #20]
 800223a:	3001      	adds	r0, #1
 800223c:	4283      	cmp	r3, r0
 800223e:	d004      	beq.n	800224a <__swbuf_r+0x62>
 8002240:	89a3      	ldrh	r3, [r4, #12]
 8002242:	07db      	lsls	r3, r3, #31
 8002244:	d506      	bpl.n	8002254 <__swbuf_r+0x6c>
 8002246:	2e0a      	cmp	r6, #10
 8002248:	d104      	bne.n	8002254 <__swbuf_r+0x6c>
 800224a:	4621      	mov	r1, r4
 800224c:	4628      	mov	r0, r5
 800224e:	f000 f911 	bl	8002474 <_fflush_r>
 8002252:	b988      	cbnz	r0, 8002278 <__swbuf_r+0x90>
 8002254:	4638      	mov	r0, r7
 8002256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <__swbuf_r+0x9c>)
 800225a:	429c      	cmp	r4, r3
 800225c:	d101      	bne.n	8002262 <__swbuf_r+0x7a>
 800225e:	68ac      	ldr	r4, [r5, #8]
 8002260:	e7cf      	b.n	8002202 <__swbuf_r+0x1a>
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <__swbuf_r+0xa0>)
 8002264:	429c      	cmp	r4, r3
 8002266:	bf08      	it	eq
 8002268:	68ec      	ldreq	r4, [r5, #12]
 800226a:	e7ca      	b.n	8002202 <__swbuf_r+0x1a>
 800226c:	4621      	mov	r1, r4
 800226e:	4628      	mov	r0, r5
 8002270:	f000 f80c 	bl	800228c <__swsetup_r>
 8002274:	2800      	cmp	r0, #0
 8002276:	d0cb      	beq.n	8002210 <__swbuf_r+0x28>
 8002278:	f04f 37ff 	mov.w	r7, #4294967295
 800227c:	e7ea      	b.n	8002254 <__swbuf_r+0x6c>
 800227e:	bf00      	nop
 8002280:	08002b90 	.word	0x08002b90
 8002284:	08002bb0 	.word	0x08002bb0
 8002288:	08002b70 	.word	0x08002b70

0800228c <__swsetup_r>:
 800228c:	4b32      	ldr	r3, [pc, #200]	; (8002358 <__swsetup_r+0xcc>)
 800228e:	b570      	push	{r4, r5, r6, lr}
 8002290:	681d      	ldr	r5, [r3, #0]
 8002292:	4606      	mov	r6, r0
 8002294:	460c      	mov	r4, r1
 8002296:	b125      	cbz	r5, 80022a2 <__swsetup_r+0x16>
 8002298:	69ab      	ldr	r3, [r5, #24]
 800229a:	b913      	cbnz	r3, 80022a2 <__swsetup_r+0x16>
 800229c:	4628      	mov	r0, r5
 800229e:	f000 f97d 	bl	800259c <__sinit>
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <__swsetup_r+0xd0>)
 80022a4:	429c      	cmp	r4, r3
 80022a6:	d10f      	bne.n	80022c8 <__swsetup_r+0x3c>
 80022a8:	686c      	ldr	r4, [r5, #4]
 80022aa:	89a3      	ldrh	r3, [r4, #12]
 80022ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022b0:	0719      	lsls	r1, r3, #28
 80022b2:	d42c      	bmi.n	800230e <__swsetup_r+0x82>
 80022b4:	06dd      	lsls	r5, r3, #27
 80022b6:	d411      	bmi.n	80022dc <__swsetup_r+0x50>
 80022b8:	2309      	movs	r3, #9
 80022ba:	6033      	str	r3, [r6, #0]
 80022bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022c0:	81a3      	strh	r3, [r4, #12]
 80022c2:	f04f 30ff 	mov.w	r0, #4294967295
 80022c6:	e03e      	b.n	8002346 <__swsetup_r+0xba>
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <__swsetup_r+0xd4>)
 80022ca:	429c      	cmp	r4, r3
 80022cc:	d101      	bne.n	80022d2 <__swsetup_r+0x46>
 80022ce:	68ac      	ldr	r4, [r5, #8]
 80022d0:	e7eb      	b.n	80022aa <__swsetup_r+0x1e>
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <__swsetup_r+0xd8>)
 80022d4:	429c      	cmp	r4, r3
 80022d6:	bf08      	it	eq
 80022d8:	68ec      	ldreq	r4, [r5, #12]
 80022da:	e7e6      	b.n	80022aa <__swsetup_r+0x1e>
 80022dc:	0758      	lsls	r0, r3, #29
 80022de:	d512      	bpl.n	8002306 <__swsetup_r+0x7a>
 80022e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022e2:	b141      	cbz	r1, 80022f6 <__swsetup_r+0x6a>
 80022e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022e8:	4299      	cmp	r1, r3
 80022ea:	d002      	beq.n	80022f2 <__swsetup_r+0x66>
 80022ec:	4630      	mov	r0, r6
 80022ee:	f000 fa5b 	bl	80027a8 <_free_r>
 80022f2:	2300      	movs	r3, #0
 80022f4:	6363      	str	r3, [r4, #52]	; 0x34
 80022f6:	89a3      	ldrh	r3, [r4, #12]
 80022f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022fc:	81a3      	strh	r3, [r4, #12]
 80022fe:	2300      	movs	r3, #0
 8002300:	6063      	str	r3, [r4, #4]
 8002302:	6923      	ldr	r3, [r4, #16]
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	81a3      	strh	r3, [r4, #12]
 800230e:	6923      	ldr	r3, [r4, #16]
 8002310:	b94b      	cbnz	r3, 8002326 <__swsetup_r+0x9a>
 8002312:	89a3      	ldrh	r3, [r4, #12]
 8002314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231c:	d003      	beq.n	8002326 <__swsetup_r+0x9a>
 800231e:	4621      	mov	r1, r4
 8002320:	4630      	mov	r0, r6
 8002322:	f000 fa01 	bl	8002728 <__smakebuf_r>
 8002326:	89a0      	ldrh	r0, [r4, #12]
 8002328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800232c:	f010 0301 	ands.w	r3, r0, #1
 8002330:	d00a      	beq.n	8002348 <__swsetup_r+0xbc>
 8002332:	2300      	movs	r3, #0
 8002334:	60a3      	str	r3, [r4, #8]
 8002336:	6963      	ldr	r3, [r4, #20]
 8002338:	425b      	negs	r3, r3
 800233a:	61a3      	str	r3, [r4, #24]
 800233c:	6923      	ldr	r3, [r4, #16]
 800233e:	b943      	cbnz	r3, 8002352 <__swsetup_r+0xc6>
 8002340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002344:	d1ba      	bne.n	80022bc <__swsetup_r+0x30>
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	0781      	lsls	r1, r0, #30
 800234a:	bf58      	it	pl
 800234c:	6963      	ldrpl	r3, [r4, #20]
 800234e:	60a3      	str	r3, [r4, #8]
 8002350:	e7f4      	b.n	800233c <__swsetup_r+0xb0>
 8002352:	2000      	movs	r0, #0
 8002354:	e7f7      	b.n	8002346 <__swsetup_r+0xba>
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008
 800235c:	08002b90 	.word	0x08002b90
 8002360:	08002bb0 	.word	0x08002bb0
 8002364:	08002b70 	.word	0x08002b70

08002368 <__sflush_r>:
 8002368:	898a      	ldrh	r2, [r1, #12]
 800236a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800236e:	4605      	mov	r5, r0
 8002370:	0710      	lsls	r0, r2, #28
 8002372:	460c      	mov	r4, r1
 8002374:	d458      	bmi.n	8002428 <__sflush_r+0xc0>
 8002376:	684b      	ldr	r3, [r1, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	dc05      	bgt.n	8002388 <__sflush_r+0x20>
 800237c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	dc02      	bgt.n	8002388 <__sflush_r+0x20>
 8002382:	2000      	movs	r0, #0
 8002384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800238a:	2e00      	cmp	r6, #0
 800238c:	d0f9      	beq.n	8002382 <__sflush_r+0x1a>
 800238e:	2300      	movs	r3, #0
 8002390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002394:	682f      	ldr	r7, [r5, #0]
 8002396:	602b      	str	r3, [r5, #0]
 8002398:	d032      	beq.n	8002400 <__sflush_r+0x98>
 800239a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800239c:	89a3      	ldrh	r3, [r4, #12]
 800239e:	075a      	lsls	r2, r3, #29
 80023a0:	d505      	bpl.n	80023ae <__sflush_r+0x46>
 80023a2:	6863      	ldr	r3, [r4, #4]
 80023a4:	1ac0      	subs	r0, r0, r3
 80023a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023a8:	b10b      	cbz	r3, 80023ae <__sflush_r+0x46>
 80023aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023ac:	1ac0      	subs	r0, r0, r3
 80023ae:	2300      	movs	r3, #0
 80023b0:	4602      	mov	r2, r0
 80023b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023b4:	6a21      	ldr	r1, [r4, #32]
 80023b6:	4628      	mov	r0, r5
 80023b8:	47b0      	blx	r6
 80023ba:	1c43      	adds	r3, r0, #1
 80023bc:	89a3      	ldrh	r3, [r4, #12]
 80023be:	d106      	bne.n	80023ce <__sflush_r+0x66>
 80023c0:	6829      	ldr	r1, [r5, #0]
 80023c2:	291d      	cmp	r1, #29
 80023c4:	d82c      	bhi.n	8002420 <__sflush_r+0xb8>
 80023c6:	4a2a      	ldr	r2, [pc, #168]	; (8002470 <__sflush_r+0x108>)
 80023c8:	40ca      	lsrs	r2, r1
 80023ca:	07d6      	lsls	r6, r2, #31
 80023cc:	d528      	bpl.n	8002420 <__sflush_r+0xb8>
 80023ce:	2200      	movs	r2, #0
 80023d0:	6062      	str	r2, [r4, #4]
 80023d2:	04d9      	lsls	r1, r3, #19
 80023d4:	6922      	ldr	r2, [r4, #16]
 80023d6:	6022      	str	r2, [r4, #0]
 80023d8:	d504      	bpl.n	80023e4 <__sflush_r+0x7c>
 80023da:	1c42      	adds	r2, r0, #1
 80023dc:	d101      	bne.n	80023e2 <__sflush_r+0x7a>
 80023de:	682b      	ldr	r3, [r5, #0]
 80023e0:	b903      	cbnz	r3, 80023e4 <__sflush_r+0x7c>
 80023e2:	6560      	str	r0, [r4, #84]	; 0x54
 80023e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023e6:	602f      	str	r7, [r5, #0]
 80023e8:	2900      	cmp	r1, #0
 80023ea:	d0ca      	beq.n	8002382 <__sflush_r+0x1a>
 80023ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023f0:	4299      	cmp	r1, r3
 80023f2:	d002      	beq.n	80023fa <__sflush_r+0x92>
 80023f4:	4628      	mov	r0, r5
 80023f6:	f000 f9d7 	bl	80027a8 <_free_r>
 80023fa:	2000      	movs	r0, #0
 80023fc:	6360      	str	r0, [r4, #52]	; 0x34
 80023fe:	e7c1      	b.n	8002384 <__sflush_r+0x1c>
 8002400:	6a21      	ldr	r1, [r4, #32]
 8002402:	2301      	movs	r3, #1
 8002404:	4628      	mov	r0, r5
 8002406:	47b0      	blx	r6
 8002408:	1c41      	adds	r1, r0, #1
 800240a:	d1c7      	bne.n	800239c <__sflush_r+0x34>
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0c4      	beq.n	800239c <__sflush_r+0x34>
 8002412:	2b1d      	cmp	r3, #29
 8002414:	d001      	beq.n	800241a <__sflush_r+0xb2>
 8002416:	2b16      	cmp	r3, #22
 8002418:	d101      	bne.n	800241e <__sflush_r+0xb6>
 800241a:	602f      	str	r7, [r5, #0]
 800241c:	e7b1      	b.n	8002382 <__sflush_r+0x1a>
 800241e:	89a3      	ldrh	r3, [r4, #12]
 8002420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002424:	81a3      	strh	r3, [r4, #12]
 8002426:	e7ad      	b.n	8002384 <__sflush_r+0x1c>
 8002428:	690f      	ldr	r7, [r1, #16]
 800242a:	2f00      	cmp	r7, #0
 800242c:	d0a9      	beq.n	8002382 <__sflush_r+0x1a>
 800242e:	0793      	lsls	r3, r2, #30
 8002430:	680e      	ldr	r6, [r1, #0]
 8002432:	bf08      	it	eq
 8002434:	694b      	ldreq	r3, [r1, #20]
 8002436:	600f      	str	r7, [r1, #0]
 8002438:	bf18      	it	ne
 800243a:	2300      	movne	r3, #0
 800243c:	eba6 0807 	sub.w	r8, r6, r7
 8002440:	608b      	str	r3, [r1, #8]
 8002442:	f1b8 0f00 	cmp.w	r8, #0
 8002446:	dd9c      	ble.n	8002382 <__sflush_r+0x1a>
 8002448:	6a21      	ldr	r1, [r4, #32]
 800244a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800244c:	4643      	mov	r3, r8
 800244e:	463a      	mov	r2, r7
 8002450:	4628      	mov	r0, r5
 8002452:	47b0      	blx	r6
 8002454:	2800      	cmp	r0, #0
 8002456:	dc06      	bgt.n	8002466 <__sflush_r+0xfe>
 8002458:	89a3      	ldrh	r3, [r4, #12]
 800245a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245e:	81a3      	strh	r3, [r4, #12]
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	e78e      	b.n	8002384 <__sflush_r+0x1c>
 8002466:	4407      	add	r7, r0
 8002468:	eba8 0800 	sub.w	r8, r8, r0
 800246c:	e7e9      	b.n	8002442 <__sflush_r+0xda>
 800246e:	bf00      	nop
 8002470:	20400001 	.word	0x20400001

08002474 <_fflush_r>:
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	690b      	ldr	r3, [r1, #16]
 8002478:	4605      	mov	r5, r0
 800247a:	460c      	mov	r4, r1
 800247c:	b913      	cbnz	r3, 8002484 <_fflush_r+0x10>
 800247e:	2500      	movs	r5, #0
 8002480:	4628      	mov	r0, r5
 8002482:	bd38      	pop	{r3, r4, r5, pc}
 8002484:	b118      	cbz	r0, 800248e <_fflush_r+0x1a>
 8002486:	6983      	ldr	r3, [r0, #24]
 8002488:	b90b      	cbnz	r3, 800248e <_fflush_r+0x1a>
 800248a:	f000 f887 	bl	800259c <__sinit>
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <_fflush_r+0x6c>)
 8002490:	429c      	cmp	r4, r3
 8002492:	d11b      	bne.n	80024cc <_fflush_r+0x58>
 8002494:	686c      	ldr	r4, [r5, #4]
 8002496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ef      	beq.n	800247e <_fflush_r+0xa>
 800249e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024a0:	07d0      	lsls	r0, r2, #31
 80024a2:	d404      	bmi.n	80024ae <_fflush_r+0x3a>
 80024a4:	0599      	lsls	r1, r3, #22
 80024a6:	d402      	bmi.n	80024ae <_fflush_r+0x3a>
 80024a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024aa:	f000 f915 	bl	80026d8 <__retarget_lock_acquire_recursive>
 80024ae:	4628      	mov	r0, r5
 80024b0:	4621      	mov	r1, r4
 80024b2:	f7ff ff59 	bl	8002368 <__sflush_r>
 80024b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024b8:	07da      	lsls	r2, r3, #31
 80024ba:	4605      	mov	r5, r0
 80024bc:	d4e0      	bmi.n	8002480 <_fflush_r+0xc>
 80024be:	89a3      	ldrh	r3, [r4, #12]
 80024c0:	059b      	lsls	r3, r3, #22
 80024c2:	d4dd      	bmi.n	8002480 <_fflush_r+0xc>
 80024c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024c6:	f000 f908 	bl	80026da <__retarget_lock_release_recursive>
 80024ca:	e7d9      	b.n	8002480 <_fflush_r+0xc>
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <_fflush_r+0x70>)
 80024ce:	429c      	cmp	r4, r3
 80024d0:	d101      	bne.n	80024d6 <_fflush_r+0x62>
 80024d2:	68ac      	ldr	r4, [r5, #8]
 80024d4:	e7df      	b.n	8002496 <_fflush_r+0x22>
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <_fflush_r+0x74>)
 80024d8:	429c      	cmp	r4, r3
 80024da:	bf08      	it	eq
 80024dc:	68ec      	ldreq	r4, [r5, #12]
 80024de:	e7da      	b.n	8002496 <_fflush_r+0x22>
 80024e0:	08002b90 	.word	0x08002b90
 80024e4:	08002bb0 	.word	0x08002bb0
 80024e8:	08002b70 	.word	0x08002b70

080024ec <std>:
 80024ec:	2300      	movs	r3, #0
 80024ee:	b510      	push	{r4, lr}
 80024f0:	4604      	mov	r4, r0
 80024f2:	e9c0 3300 	strd	r3, r3, [r0]
 80024f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024fa:	6083      	str	r3, [r0, #8]
 80024fc:	8181      	strh	r1, [r0, #12]
 80024fe:	6643      	str	r3, [r0, #100]	; 0x64
 8002500:	81c2      	strh	r2, [r0, #14]
 8002502:	6183      	str	r3, [r0, #24]
 8002504:	4619      	mov	r1, r3
 8002506:	2208      	movs	r2, #8
 8002508:	305c      	adds	r0, #92	; 0x5c
 800250a:	f7ff fdef 	bl	80020ec <memset>
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <std+0x38>)
 8002510:	6263      	str	r3, [r4, #36]	; 0x24
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <std+0x3c>)
 8002514:	62a3      	str	r3, [r4, #40]	; 0x28
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <std+0x40>)
 8002518:	62e3      	str	r3, [r4, #44]	; 0x2c
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <std+0x44>)
 800251c:	6224      	str	r4, [r4, #32]
 800251e:	6323      	str	r3, [r4, #48]	; 0x30
 8002520:	bd10      	pop	{r4, pc}
 8002522:	bf00      	nop
 8002524:	08002989 	.word	0x08002989
 8002528:	080029ab 	.word	0x080029ab
 800252c:	080029e3 	.word	0x080029e3
 8002530:	08002a07 	.word	0x08002a07

08002534 <_cleanup_r>:
 8002534:	4901      	ldr	r1, [pc, #4]	; (800253c <_cleanup_r+0x8>)
 8002536:	f000 b8af 	b.w	8002698 <_fwalk_reent>
 800253a:	bf00      	nop
 800253c:	08002475 	.word	0x08002475

08002540 <__sfmoreglue>:
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	2268      	movs	r2, #104	; 0x68
 8002544:	1e4d      	subs	r5, r1, #1
 8002546:	4355      	muls	r5, r2
 8002548:	460e      	mov	r6, r1
 800254a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800254e:	f000 f997 	bl	8002880 <_malloc_r>
 8002552:	4604      	mov	r4, r0
 8002554:	b140      	cbz	r0, 8002568 <__sfmoreglue+0x28>
 8002556:	2100      	movs	r1, #0
 8002558:	e9c0 1600 	strd	r1, r6, [r0]
 800255c:	300c      	adds	r0, #12
 800255e:	60a0      	str	r0, [r4, #8]
 8002560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002564:	f7ff fdc2 	bl	80020ec <memset>
 8002568:	4620      	mov	r0, r4
 800256a:	bd70      	pop	{r4, r5, r6, pc}

0800256c <__sfp_lock_acquire>:
 800256c:	4801      	ldr	r0, [pc, #4]	; (8002574 <__sfp_lock_acquire+0x8>)
 800256e:	f000 b8b3 	b.w	80026d8 <__retarget_lock_acquire_recursive>
 8002572:	bf00      	nop
 8002574:	200019c1 	.word	0x200019c1

08002578 <__sfp_lock_release>:
 8002578:	4801      	ldr	r0, [pc, #4]	; (8002580 <__sfp_lock_release+0x8>)
 800257a:	f000 b8ae 	b.w	80026da <__retarget_lock_release_recursive>
 800257e:	bf00      	nop
 8002580:	200019c1 	.word	0x200019c1

08002584 <__sinit_lock_acquire>:
 8002584:	4801      	ldr	r0, [pc, #4]	; (800258c <__sinit_lock_acquire+0x8>)
 8002586:	f000 b8a7 	b.w	80026d8 <__retarget_lock_acquire_recursive>
 800258a:	bf00      	nop
 800258c:	200019c2 	.word	0x200019c2

08002590 <__sinit_lock_release>:
 8002590:	4801      	ldr	r0, [pc, #4]	; (8002598 <__sinit_lock_release+0x8>)
 8002592:	f000 b8a2 	b.w	80026da <__retarget_lock_release_recursive>
 8002596:	bf00      	nop
 8002598:	200019c2 	.word	0x200019c2

0800259c <__sinit>:
 800259c:	b510      	push	{r4, lr}
 800259e:	4604      	mov	r4, r0
 80025a0:	f7ff fff0 	bl	8002584 <__sinit_lock_acquire>
 80025a4:	69a3      	ldr	r3, [r4, #24]
 80025a6:	b11b      	cbz	r3, 80025b0 <__sinit+0x14>
 80025a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ac:	f7ff bff0 	b.w	8002590 <__sinit_lock_release>
 80025b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80025b4:	6523      	str	r3, [r4, #80]	; 0x50
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <__sinit+0x68>)
 80025b8:	4a13      	ldr	r2, [pc, #76]	; (8002608 <__sinit+0x6c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80025be:	42a3      	cmp	r3, r4
 80025c0:	bf04      	itt	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	61a3      	streq	r3, [r4, #24]
 80025c6:	4620      	mov	r0, r4
 80025c8:	f000 f820 	bl	800260c <__sfp>
 80025cc:	6060      	str	r0, [r4, #4]
 80025ce:	4620      	mov	r0, r4
 80025d0:	f000 f81c 	bl	800260c <__sfp>
 80025d4:	60a0      	str	r0, [r4, #8]
 80025d6:	4620      	mov	r0, r4
 80025d8:	f000 f818 	bl	800260c <__sfp>
 80025dc:	2200      	movs	r2, #0
 80025de:	60e0      	str	r0, [r4, #12]
 80025e0:	2104      	movs	r1, #4
 80025e2:	6860      	ldr	r0, [r4, #4]
 80025e4:	f7ff ff82 	bl	80024ec <std>
 80025e8:	68a0      	ldr	r0, [r4, #8]
 80025ea:	2201      	movs	r2, #1
 80025ec:	2109      	movs	r1, #9
 80025ee:	f7ff ff7d 	bl	80024ec <std>
 80025f2:	68e0      	ldr	r0, [r4, #12]
 80025f4:	2202      	movs	r2, #2
 80025f6:	2112      	movs	r1, #18
 80025f8:	f7ff ff78 	bl	80024ec <std>
 80025fc:	2301      	movs	r3, #1
 80025fe:	61a3      	str	r3, [r4, #24]
 8002600:	e7d2      	b.n	80025a8 <__sinit+0xc>
 8002602:	bf00      	nop
 8002604:	08002b6c 	.word	0x08002b6c
 8002608:	08002535 	.word	0x08002535

0800260c <__sfp>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	4607      	mov	r7, r0
 8002610:	f7ff ffac 	bl	800256c <__sfp_lock_acquire>
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <__sfp+0x84>)
 8002616:	681e      	ldr	r6, [r3, #0]
 8002618:	69b3      	ldr	r3, [r6, #24]
 800261a:	b913      	cbnz	r3, 8002622 <__sfp+0x16>
 800261c:	4630      	mov	r0, r6
 800261e:	f7ff ffbd 	bl	800259c <__sinit>
 8002622:	3648      	adds	r6, #72	; 0x48
 8002624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002628:	3b01      	subs	r3, #1
 800262a:	d503      	bpl.n	8002634 <__sfp+0x28>
 800262c:	6833      	ldr	r3, [r6, #0]
 800262e:	b30b      	cbz	r3, 8002674 <__sfp+0x68>
 8002630:	6836      	ldr	r6, [r6, #0]
 8002632:	e7f7      	b.n	8002624 <__sfp+0x18>
 8002634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002638:	b9d5      	cbnz	r5, 8002670 <__sfp+0x64>
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <__sfp+0x88>)
 800263c:	60e3      	str	r3, [r4, #12]
 800263e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002642:	6665      	str	r5, [r4, #100]	; 0x64
 8002644:	f000 f847 	bl	80026d6 <__retarget_lock_init_recursive>
 8002648:	f7ff ff96 	bl	8002578 <__sfp_lock_release>
 800264c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002650:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002654:	6025      	str	r5, [r4, #0]
 8002656:	61a5      	str	r5, [r4, #24]
 8002658:	2208      	movs	r2, #8
 800265a:	4629      	mov	r1, r5
 800265c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002660:	f7ff fd44 	bl	80020ec <memset>
 8002664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800266c:	4620      	mov	r0, r4
 800266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002670:	3468      	adds	r4, #104	; 0x68
 8002672:	e7d9      	b.n	8002628 <__sfp+0x1c>
 8002674:	2104      	movs	r1, #4
 8002676:	4638      	mov	r0, r7
 8002678:	f7ff ff62 	bl	8002540 <__sfmoreglue>
 800267c:	4604      	mov	r4, r0
 800267e:	6030      	str	r0, [r6, #0]
 8002680:	2800      	cmp	r0, #0
 8002682:	d1d5      	bne.n	8002630 <__sfp+0x24>
 8002684:	f7ff ff78 	bl	8002578 <__sfp_lock_release>
 8002688:	230c      	movs	r3, #12
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	e7ee      	b.n	800266c <__sfp+0x60>
 800268e:	bf00      	nop
 8002690:	08002b6c 	.word	0x08002b6c
 8002694:	ffff0001 	.word	0xffff0001

08002698 <_fwalk_reent>:
 8002698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800269c:	4606      	mov	r6, r0
 800269e:	4688      	mov	r8, r1
 80026a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026a4:	2700      	movs	r7, #0
 80026a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026aa:	f1b9 0901 	subs.w	r9, r9, #1
 80026ae:	d505      	bpl.n	80026bc <_fwalk_reent+0x24>
 80026b0:	6824      	ldr	r4, [r4, #0]
 80026b2:	2c00      	cmp	r4, #0
 80026b4:	d1f7      	bne.n	80026a6 <_fwalk_reent+0xe>
 80026b6:	4638      	mov	r0, r7
 80026b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026bc:	89ab      	ldrh	r3, [r5, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d907      	bls.n	80026d2 <_fwalk_reent+0x3a>
 80026c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026c6:	3301      	adds	r3, #1
 80026c8:	d003      	beq.n	80026d2 <_fwalk_reent+0x3a>
 80026ca:	4629      	mov	r1, r5
 80026cc:	4630      	mov	r0, r6
 80026ce:	47c0      	blx	r8
 80026d0:	4307      	orrs	r7, r0
 80026d2:	3568      	adds	r5, #104	; 0x68
 80026d4:	e7e9      	b.n	80026aa <_fwalk_reent+0x12>

080026d6 <__retarget_lock_init_recursive>:
 80026d6:	4770      	bx	lr

080026d8 <__retarget_lock_acquire_recursive>:
 80026d8:	4770      	bx	lr

080026da <__retarget_lock_release_recursive>:
 80026da:	4770      	bx	lr

080026dc <__swhatbuf_r>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	460e      	mov	r6, r1
 80026e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e4:	2900      	cmp	r1, #0
 80026e6:	b096      	sub	sp, #88	; 0x58
 80026e8:	4614      	mov	r4, r2
 80026ea:	461d      	mov	r5, r3
 80026ec:	da08      	bge.n	8002700 <__swhatbuf_r+0x24>
 80026ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	602a      	str	r2, [r5, #0]
 80026f6:	061a      	lsls	r2, r3, #24
 80026f8:	d410      	bmi.n	800271c <__swhatbuf_r+0x40>
 80026fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fe:	e00e      	b.n	800271e <__swhatbuf_r+0x42>
 8002700:	466a      	mov	r2, sp
 8002702:	f000 f9a7 	bl	8002a54 <_fstat_r>
 8002706:	2800      	cmp	r0, #0
 8002708:	dbf1      	blt.n	80026ee <__swhatbuf_r+0x12>
 800270a:	9a01      	ldr	r2, [sp, #4]
 800270c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002710:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002714:	425a      	negs	r2, r3
 8002716:	415a      	adcs	r2, r3
 8002718:	602a      	str	r2, [r5, #0]
 800271a:	e7ee      	b.n	80026fa <__swhatbuf_r+0x1e>
 800271c:	2340      	movs	r3, #64	; 0x40
 800271e:	2000      	movs	r0, #0
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	b016      	add	sp, #88	; 0x58
 8002724:	bd70      	pop	{r4, r5, r6, pc}
	...

08002728 <__smakebuf_r>:
 8002728:	898b      	ldrh	r3, [r1, #12]
 800272a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800272c:	079d      	lsls	r5, r3, #30
 800272e:	4606      	mov	r6, r0
 8002730:	460c      	mov	r4, r1
 8002732:	d507      	bpl.n	8002744 <__smakebuf_r+0x1c>
 8002734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	6123      	str	r3, [r4, #16]
 800273c:	2301      	movs	r3, #1
 800273e:	6163      	str	r3, [r4, #20]
 8002740:	b002      	add	sp, #8
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	ab01      	add	r3, sp, #4
 8002746:	466a      	mov	r2, sp
 8002748:	f7ff ffc8 	bl	80026dc <__swhatbuf_r>
 800274c:	9900      	ldr	r1, [sp, #0]
 800274e:	4605      	mov	r5, r0
 8002750:	4630      	mov	r0, r6
 8002752:	f000 f895 	bl	8002880 <_malloc_r>
 8002756:	b948      	cbnz	r0, 800276c <__smakebuf_r+0x44>
 8002758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800275c:	059a      	lsls	r2, r3, #22
 800275e:	d4ef      	bmi.n	8002740 <__smakebuf_r+0x18>
 8002760:	f023 0303 	bic.w	r3, r3, #3
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	81a3      	strh	r3, [r4, #12]
 800276a:	e7e3      	b.n	8002734 <__smakebuf_r+0xc>
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <__smakebuf_r+0x7c>)
 800276e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002770:	89a3      	ldrh	r3, [r4, #12]
 8002772:	6020      	str	r0, [r4, #0]
 8002774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002778:	81a3      	strh	r3, [r4, #12]
 800277a:	9b00      	ldr	r3, [sp, #0]
 800277c:	6163      	str	r3, [r4, #20]
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	6120      	str	r0, [r4, #16]
 8002782:	b15b      	cbz	r3, 800279c <__smakebuf_r+0x74>
 8002784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002788:	4630      	mov	r0, r6
 800278a:	f000 f975 	bl	8002a78 <_isatty_r>
 800278e:	b128      	cbz	r0, 800279c <__smakebuf_r+0x74>
 8002790:	89a3      	ldrh	r3, [r4, #12]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	81a3      	strh	r3, [r4, #12]
 800279c:	89a0      	ldrh	r0, [r4, #12]
 800279e:	4305      	orrs	r5, r0
 80027a0:	81a5      	strh	r5, [r4, #12]
 80027a2:	e7cd      	b.n	8002740 <__smakebuf_r+0x18>
 80027a4:	08002535 	.word	0x08002535

080027a8 <_free_r>:
 80027a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027aa:	2900      	cmp	r1, #0
 80027ac:	d044      	beq.n	8002838 <_free_r+0x90>
 80027ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027b2:	9001      	str	r0, [sp, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f1a1 0404 	sub.w	r4, r1, #4
 80027ba:	bfb8      	it	lt
 80027bc:	18e4      	addlt	r4, r4, r3
 80027be:	f000 f97d 	bl	8002abc <__malloc_lock>
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <_free_r+0x94>)
 80027c4:	9801      	ldr	r0, [sp, #4]
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	b933      	cbnz	r3, 80027d8 <_free_r+0x30>
 80027ca:	6063      	str	r3, [r4, #4]
 80027cc:	6014      	str	r4, [r2, #0]
 80027ce:	b003      	add	sp, #12
 80027d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027d4:	f000 b978 	b.w	8002ac8 <__malloc_unlock>
 80027d8:	42a3      	cmp	r3, r4
 80027da:	d908      	bls.n	80027ee <_free_r+0x46>
 80027dc:	6825      	ldr	r5, [r4, #0]
 80027de:	1961      	adds	r1, r4, r5
 80027e0:	428b      	cmp	r3, r1
 80027e2:	bf01      	itttt	eq
 80027e4:	6819      	ldreq	r1, [r3, #0]
 80027e6:	685b      	ldreq	r3, [r3, #4]
 80027e8:	1949      	addeq	r1, r1, r5
 80027ea:	6021      	streq	r1, [r4, #0]
 80027ec:	e7ed      	b.n	80027ca <_free_r+0x22>
 80027ee:	461a      	mov	r2, r3
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	b10b      	cbz	r3, 80027f8 <_free_r+0x50>
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	d9fa      	bls.n	80027ee <_free_r+0x46>
 80027f8:	6811      	ldr	r1, [r2, #0]
 80027fa:	1855      	adds	r5, r2, r1
 80027fc:	42a5      	cmp	r5, r4
 80027fe:	d10b      	bne.n	8002818 <_free_r+0x70>
 8002800:	6824      	ldr	r4, [r4, #0]
 8002802:	4421      	add	r1, r4
 8002804:	1854      	adds	r4, r2, r1
 8002806:	42a3      	cmp	r3, r4
 8002808:	6011      	str	r1, [r2, #0]
 800280a:	d1e0      	bne.n	80027ce <_free_r+0x26>
 800280c:	681c      	ldr	r4, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	6053      	str	r3, [r2, #4]
 8002812:	4421      	add	r1, r4
 8002814:	6011      	str	r1, [r2, #0]
 8002816:	e7da      	b.n	80027ce <_free_r+0x26>
 8002818:	d902      	bls.n	8002820 <_free_r+0x78>
 800281a:	230c      	movs	r3, #12
 800281c:	6003      	str	r3, [r0, #0]
 800281e:	e7d6      	b.n	80027ce <_free_r+0x26>
 8002820:	6825      	ldr	r5, [r4, #0]
 8002822:	1961      	adds	r1, r4, r5
 8002824:	428b      	cmp	r3, r1
 8002826:	bf04      	itt	eq
 8002828:	6819      	ldreq	r1, [r3, #0]
 800282a:	685b      	ldreq	r3, [r3, #4]
 800282c:	6063      	str	r3, [r4, #4]
 800282e:	bf04      	itt	eq
 8002830:	1949      	addeq	r1, r1, r5
 8002832:	6021      	streq	r1, [r4, #0]
 8002834:	6054      	str	r4, [r2, #4]
 8002836:	e7ca      	b.n	80027ce <_free_r+0x26>
 8002838:	b003      	add	sp, #12
 800283a:	bd30      	pop	{r4, r5, pc}
 800283c:	200019c4 	.word	0x200019c4

08002840 <sbrk_aligned>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4e0e      	ldr	r6, [pc, #56]	; (800287c <sbrk_aligned+0x3c>)
 8002844:	460c      	mov	r4, r1
 8002846:	6831      	ldr	r1, [r6, #0]
 8002848:	4605      	mov	r5, r0
 800284a:	b911      	cbnz	r1, 8002852 <sbrk_aligned+0x12>
 800284c:	f000 f88c 	bl	8002968 <_sbrk_r>
 8002850:	6030      	str	r0, [r6, #0]
 8002852:	4621      	mov	r1, r4
 8002854:	4628      	mov	r0, r5
 8002856:	f000 f887 	bl	8002968 <_sbrk_r>
 800285a:	1c43      	adds	r3, r0, #1
 800285c:	d00a      	beq.n	8002874 <sbrk_aligned+0x34>
 800285e:	1cc4      	adds	r4, r0, #3
 8002860:	f024 0403 	bic.w	r4, r4, #3
 8002864:	42a0      	cmp	r0, r4
 8002866:	d007      	beq.n	8002878 <sbrk_aligned+0x38>
 8002868:	1a21      	subs	r1, r4, r0
 800286a:	4628      	mov	r0, r5
 800286c:	f000 f87c 	bl	8002968 <_sbrk_r>
 8002870:	3001      	adds	r0, #1
 8002872:	d101      	bne.n	8002878 <sbrk_aligned+0x38>
 8002874:	f04f 34ff 	mov.w	r4, #4294967295
 8002878:	4620      	mov	r0, r4
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	200019c8 	.word	0x200019c8

08002880 <_malloc_r>:
 8002880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002884:	1ccd      	adds	r5, r1, #3
 8002886:	f025 0503 	bic.w	r5, r5, #3
 800288a:	3508      	adds	r5, #8
 800288c:	2d0c      	cmp	r5, #12
 800288e:	bf38      	it	cc
 8002890:	250c      	movcc	r5, #12
 8002892:	2d00      	cmp	r5, #0
 8002894:	4607      	mov	r7, r0
 8002896:	db01      	blt.n	800289c <_malloc_r+0x1c>
 8002898:	42a9      	cmp	r1, r5
 800289a:	d905      	bls.n	80028a8 <_malloc_r+0x28>
 800289c:	230c      	movs	r3, #12
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	2600      	movs	r6, #0
 80028a2:	4630      	mov	r0, r6
 80028a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a8:	4e2e      	ldr	r6, [pc, #184]	; (8002964 <_malloc_r+0xe4>)
 80028aa:	f000 f907 	bl	8002abc <__malloc_lock>
 80028ae:	6833      	ldr	r3, [r6, #0]
 80028b0:	461c      	mov	r4, r3
 80028b2:	bb34      	cbnz	r4, 8002902 <_malloc_r+0x82>
 80028b4:	4629      	mov	r1, r5
 80028b6:	4638      	mov	r0, r7
 80028b8:	f7ff ffc2 	bl	8002840 <sbrk_aligned>
 80028bc:	1c43      	adds	r3, r0, #1
 80028be:	4604      	mov	r4, r0
 80028c0:	d14d      	bne.n	800295e <_malloc_r+0xde>
 80028c2:	6834      	ldr	r4, [r6, #0]
 80028c4:	4626      	mov	r6, r4
 80028c6:	2e00      	cmp	r6, #0
 80028c8:	d140      	bne.n	800294c <_malloc_r+0xcc>
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	4631      	mov	r1, r6
 80028ce:	4638      	mov	r0, r7
 80028d0:	eb04 0803 	add.w	r8, r4, r3
 80028d4:	f000 f848 	bl	8002968 <_sbrk_r>
 80028d8:	4580      	cmp	r8, r0
 80028da:	d13a      	bne.n	8002952 <_malloc_r+0xd2>
 80028dc:	6821      	ldr	r1, [r4, #0]
 80028de:	3503      	adds	r5, #3
 80028e0:	1a6d      	subs	r5, r5, r1
 80028e2:	f025 0503 	bic.w	r5, r5, #3
 80028e6:	3508      	adds	r5, #8
 80028e8:	2d0c      	cmp	r5, #12
 80028ea:	bf38      	it	cc
 80028ec:	250c      	movcc	r5, #12
 80028ee:	4629      	mov	r1, r5
 80028f0:	4638      	mov	r0, r7
 80028f2:	f7ff ffa5 	bl	8002840 <sbrk_aligned>
 80028f6:	3001      	adds	r0, #1
 80028f8:	d02b      	beq.n	8002952 <_malloc_r+0xd2>
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	442b      	add	r3, r5
 80028fe:	6023      	str	r3, [r4, #0]
 8002900:	e00e      	b.n	8002920 <_malloc_r+0xa0>
 8002902:	6822      	ldr	r2, [r4, #0]
 8002904:	1b52      	subs	r2, r2, r5
 8002906:	d41e      	bmi.n	8002946 <_malloc_r+0xc6>
 8002908:	2a0b      	cmp	r2, #11
 800290a:	d916      	bls.n	800293a <_malloc_r+0xba>
 800290c:	1961      	adds	r1, r4, r5
 800290e:	42a3      	cmp	r3, r4
 8002910:	6025      	str	r5, [r4, #0]
 8002912:	bf18      	it	ne
 8002914:	6059      	strne	r1, [r3, #4]
 8002916:	6863      	ldr	r3, [r4, #4]
 8002918:	bf08      	it	eq
 800291a:	6031      	streq	r1, [r6, #0]
 800291c:	5162      	str	r2, [r4, r5]
 800291e:	604b      	str	r3, [r1, #4]
 8002920:	4638      	mov	r0, r7
 8002922:	f104 060b 	add.w	r6, r4, #11
 8002926:	f000 f8cf 	bl	8002ac8 <__malloc_unlock>
 800292a:	f026 0607 	bic.w	r6, r6, #7
 800292e:	1d23      	adds	r3, r4, #4
 8002930:	1af2      	subs	r2, r6, r3
 8002932:	d0b6      	beq.n	80028a2 <_malloc_r+0x22>
 8002934:	1b9b      	subs	r3, r3, r6
 8002936:	50a3      	str	r3, [r4, r2]
 8002938:	e7b3      	b.n	80028a2 <_malloc_r+0x22>
 800293a:	6862      	ldr	r2, [r4, #4]
 800293c:	42a3      	cmp	r3, r4
 800293e:	bf0c      	ite	eq
 8002940:	6032      	streq	r2, [r6, #0]
 8002942:	605a      	strne	r2, [r3, #4]
 8002944:	e7ec      	b.n	8002920 <_malloc_r+0xa0>
 8002946:	4623      	mov	r3, r4
 8002948:	6864      	ldr	r4, [r4, #4]
 800294a:	e7b2      	b.n	80028b2 <_malloc_r+0x32>
 800294c:	4634      	mov	r4, r6
 800294e:	6876      	ldr	r6, [r6, #4]
 8002950:	e7b9      	b.n	80028c6 <_malloc_r+0x46>
 8002952:	230c      	movs	r3, #12
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4638      	mov	r0, r7
 8002958:	f000 f8b6 	bl	8002ac8 <__malloc_unlock>
 800295c:	e7a1      	b.n	80028a2 <_malloc_r+0x22>
 800295e:	6025      	str	r5, [r4, #0]
 8002960:	e7de      	b.n	8002920 <_malloc_r+0xa0>
 8002962:	bf00      	nop
 8002964:	200019c4 	.word	0x200019c4

08002968 <_sbrk_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4d06      	ldr	r5, [pc, #24]	; (8002984 <_sbrk_r+0x1c>)
 800296c:	2300      	movs	r3, #0
 800296e:	4604      	mov	r4, r0
 8002970:	4608      	mov	r0, r1
 8002972:	602b      	str	r3, [r5, #0]
 8002974:	f7fd ff98 	bl	80008a8 <_sbrk>
 8002978:	1c43      	adds	r3, r0, #1
 800297a:	d102      	bne.n	8002982 <_sbrk_r+0x1a>
 800297c:	682b      	ldr	r3, [r5, #0]
 800297e:	b103      	cbz	r3, 8002982 <_sbrk_r+0x1a>
 8002980:	6023      	str	r3, [r4, #0]
 8002982:	bd38      	pop	{r3, r4, r5, pc}
 8002984:	200019cc 	.word	0x200019cc

08002988 <__sread>:
 8002988:	b510      	push	{r4, lr}
 800298a:	460c      	mov	r4, r1
 800298c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002990:	f000 f8a0 	bl	8002ad4 <_read_r>
 8002994:	2800      	cmp	r0, #0
 8002996:	bfab      	itete	ge
 8002998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800299a:	89a3      	ldrhlt	r3, [r4, #12]
 800299c:	181b      	addge	r3, r3, r0
 800299e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80029a2:	bfac      	ite	ge
 80029a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80029a6:	81a3      	strhlt	r3, [r4, #12]
 80029a8:	bd10      	pop	{r4, pc}

080029aa <__swrite>:
 80029aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ae:	461f      	mov	r7, r3
 80029b0:	898b      	ldrh	r3, [r1, #12]
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	4605      	mov	r5, r0
 80029b6:	460c      	mov	r4, r1
 80029b8:	4616      	mov	r6, r2
 80029ba:	d505      	bpl.n	80029c8 <__swrite+0x1e>
 80029bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c0:	2302      	movs	r3, #2
 80029c2:	2200      	movs	r2, #0
 80029c4:	f000 f868 	bl	8002a98 <_lseek_r>
 80029c8:	89a3      	ldrh	r3, [r4, #12]
 80029ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029d2:	81a3      	strh	r3, [r4, #12]
 80029d4:	4632      	mov	r2, r6
 80029d6:	463b      	mov	r3, r7
 80029d8:	4628      	mov	r0, r5
 80029da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029de:	f000 b817 	b.w	8002a10 <_write_r>

080029e2 <__sseek>:
 80029e2:	b510      	push	{r4, lr}
 80029e4:	460c      	mov	r4, r1
 80029e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ea:	f000 f855 	bl	8002a98 <_lseek_r>
 80029ee:	1c43      	adds	r3, r0, #1
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	bf15      	itete	ne
 80029f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80029f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029fe:	81a3      	strheq	r3, [r4, #12]
 8002a00:	bf18      	it	ne
 8002a02:	81a3      	strhne	r3, [r4, #12]
 8002a04:	bd10      	pop	{r4, pc}

08002a06 <__sclose>:
 8002a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a0a:	f000 b813 	b.w	8002a34 <_close_r>
	...

08002a10 <_write_r>:
 8002a10:	b538      	push	{r3, r4, r5, lr}
 8002a12:	4d07      	ldr	r5, [pc, #28]	; (8002a30 <_write_r+0x20>)
 8002a14:	4604      	mov	r4, r0
 8002a16:	4608      	mov	r0, r1
 8002a18:	4611      	mov	r1, r2
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	602a      	str	r2, [r5, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f7fd fef1 	bl	8000806 <_write>
 8002a24:	1c43      	adds	r3, r0, #1
 8002a26:	d102      	bne.n	8002a2e <_write_r+0x1e>
 8002a28:	682b      	ldr	r3, [r5, #0]
 8002a2a:	b103      	cbz	r3, 8002a2e <_write_r+0x1e>
 8002a2c:	6023      	str	r3, [r4, #0]
 8002a2e:	bd38      	pop	{r3, r4, r5, pc}
 8002a30:	200019cc 	.word	0x200019cc

08002a34 <_close_r>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	4d06      	ldr	r5, [pc, #24]	; (8002a50 <_close_r+0x1c>)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	f7fd fefd 	bl	800083e <_close>
 8002a44:	1c43      	adds	r3, r0, #1
 8002a46:	d102      	bne.n	8002a4e <_close_r+0x1a>
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	b103      	cbz	r3, 8002a4e <_close_r+0x1a>
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	200019cc 	.word	0x200019cc

08002a54 <_fstat_r>:
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4d07      	ldr	r5, [pc, #28]	; (8002a74 <_fstat_r+0x20>)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	4608      	mov	r0, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	602b      	str	r3, [r5, #0]
 8002a62:	f7fd fef8 	bl	8000856 <_fstat>
 8002a66:	1c43      	adds	r3, r0, #1
 8002a68:	d102      	bne.n	8002a70 <_fstat_r+0x1c>
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	b103      	cbz	r3, 8002a70 <_fstat_r+0x1c>
 8002a6e:	6023      	str	r3, [r4, #0]
 8002a70:	bd38      	pop	{r3, r4, r5, pc}
 8002a72:	bf00      	nop
 8002a74:	200019cc 	.word	0x200019cc

08002a78 <_isatty_r>:
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	4d06      	ldr	r5, [pc, #24]	; (8002a94 <_isatty_r+0x1c>)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	4604      	mov	r4, r0
 8002a80:	4608      	mov	r0, r1
 8002a82:	602b      	str	r3, [r5, #0]
 8002a84:	f7fd fef7 	bl	8000876 <_isatty>
 8002a88:	1c43      	adds	r3, r0, #1
 8002a8a:	d102      	bne.n	8002a92 <_isatty_r+0x1a>
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	b103      	cbz	r3, 8002a92 <_isatty_r+0x1a>
 8002a90:	6023      	str	r3, [r4, #0]
 8002a92:	bd38      	pop	{r3, r4, r5, pc}
 8002a94:	200019cc 	.word	0x200019cc

08002a98 <_lseek_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	4d07      	ldr	r5, [pc, #28]	; (8002ab8 <_lseek_r+0x20>)
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	4608      	mov	r0, r1
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	602a      	str	r2, [r5, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f7fd fef0 	bl	800088c <_lseek>
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	d102      	bne.n	8002ab6 <_lseek_r+0x1e>
 8002ab0:	682b      	ldr	r3, [r5, #0]
 8002ab2:	b103      	cbz	r3, 8002ab6 <_lseek_r+0x1e>
 8002ab4:	6023      	str	r3, [r4, #0]
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
 8002ab8:	200019cc 	.word	0x200019cc

08002abc <__malloc_lock>:
 8002abc:	4801      	ldr	r0, [pc, #4]	; (8002ac4 <__malloc_lock+0x8>)
 8002abe:	f7ff be0b 	b.w	80026d8 <__retarget_lock_acquire_recursive>
 8002ac2:	bf00      	nop
 8002ac4:	200019c0 	.word	0x200019c0

08002ac8 <__malloc_unlock>:
 8002ac8:	4801      	ldr	r0, [pc, #4]	; (8002ad0 <__malloc_unlock+0x8>)
 8002aca:	f7ff be06 	b.w	80026da <__retarget_lock_release_recursive>
 8002ace:	bf00      	nop
 8002ad0:	200019c0 	.word	0x200019c0

08002ad4 <_read_r>:
 8002ad4:	b538      	push	{r3, r4, r5, lr}
 8002ad6:	4d07      	ldr	r5, [pc, #28]	; (8002af4 <_read_r+0x20>)
 8002ad8:	4604      	mov	r4, r0
 8002ada:	4608      	mov	r0, r1
 8002adc:	4611      	mov	r1, r2
 8002ade:	2200      	movs	r2, #0
 8002ae0:	602a      	str	r2, [r5, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f7fd fe72 	bl	80007cc <_read>
 8002ae8:	1c43      	adds	r3, r0, #1
 8002aea:	d102      	bne.n	8002af2 <_read_r+0x1e>
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	b103      	cbz	r3, 8002af2 <_read_r+0x1e>
 8002af0:	6023      	str	r3, [r4, #0]
 8002af2:	bd38      	pop	{r3, r4, r5, pc}
 8002af4:	200019cc 	.word	0x200019cc

08002af8 <_init>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	bf00      	nop
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr

08002b04 <_fini>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <__update_firmware_veneer>:
 8002b10:	f85f f000 	ldr.w	pc, [pc]	; 8002b14 <__update_firmware_veneer+0x4>
 8002b14:	20000215 	.word	0x20000215

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickFreq>:
20000004:	00000001                                ....

20000008 <_impure_ptr>:
20000008:	2000000c                                ... 

2000000c <impure_data>:
2000000c:	00000000 08002b90 08002bb0 08002b70     .....+...+..p+..
	...

2000006c <flash_lock>:
flash_lock() {
2000006c:	b480      	push	{r7}
2000006e:	b083      	sub	sp, #12
20000070:	af00      	add	r7, sp, #0
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
20000072:	4b0a      	ldr	r3, [pc, #40]	; (2000009c <flash_lock+0x30>)
20000074:	607b      	str	r3, [r7, #4]
	if (((*FLASH_CR >> 31) & 1) == 0) {
20000076:	687b      	ldr	r3, [r7, #4]
20000078:	681b      	ldr	r3, [r3, #0]
2000007a:	0fdb      	lsrs	r3, r3, #31
2000007c:	f003 0301 	and.w	r3, r3, #1
20000080:	2b00      	cmp	r3, #0
20000082:	d105      	bne.n	20000090 <flash_lock+0x24>
		*FLASH_CR |= (1 << 31);
20000084:	687b      	ldr	r3, [r7, #4]
20000086:	681b      	ldr	r3, [r3, #0]
20000088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
2000008c:	687b      	ldr	r3, [r7, #4]
2000008e:	601a      	str	r2, [r3, #0]
}
20000090:	bf00      	nop
20000092:	370c      	adds	r7, #12
20000094:	46bd      	mov	sp, r7
20000096:	f85d 7b04 	ldr.w	r7, [sp], #4
2000009a:	4770      	bx	lr
2000009c:	40023c10 	.word	0x40023c10

200000a0 <flash_unlock>:
flash_unlock() {
200000a0:	b480      	push	{r7}
200000a2:	b083      	sub	sp, #12
200000a4:	af00      	add	r7, sp, #0
	uint32_t volatile* const FLASH_KEYR = (uint32_t*)(0x40023c00 + 0x04);
200000a6:	4b0b      	ldr	r3, [pc, #44]	; (200000d4 <flash_unlock+0x34>)
200000a8:	607b      	str	r3, [r7, #4]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
200000aa:	4b0b      	ldr	r3, [pc, #44]	; (200000d8 <flash_unlock+0x38>)
200000ac:	603b      	str	r3, [r7, #0]
	if (((*FLASH_CR >> 31) & 1) == 1) {
200000ae:	683b      	ldr	r3, [r7, #0]
200000b0:	681b      	ldr	r3, [r3, #0]
200000b2:	0fdb      	lsrs	r3, r3, #31
200000b4:	f003 0301 	and.w	r3, r3, #1
200000b8:	2b01      	cmp	r3, #1
200000ba:	d105      	bne.n	200000c8 <flash_unlock+0x28>
		*FLASH_KEYR = 0x45670123;
200000bc:	687b      	ldr	r3, [r7, #4]
200000be:	4a07      	ldr	r2, [pc, #28]	; (200000dc <flash_unlock+0x3c>)
200000c0:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
200000c2:	687b      	ldr	r3, [r7, #4]
200000c4:	4a06      	ldr	r2, [pc, #24]	; (200000e0 <flash_unlock+0x40>)
200000c6:	601a      	str	r2, [r3, #0]
}
200000c8:	bf00      	nop
200000ca:	370c      	adds	r7, #12
200000cc:	46bd      	mov	sp, r7
200000ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200000d2:	4770      	bx	lr
200000d4:	40023c04 	.word	0x40023c04
200000d8:	40023c10 	.word	0x40023c10
200000dc:	45670123 	.word	0x45670123
200000e0:	cdef89ab 	.word	0xcdef89ab

200000e4 <flash_erase_sector>:
flash_erase_sector(eSERTOR_t sector) {
200000e4:	b580      	push	{r7, lr}
200000e6:	b084      	sub	sp, #16
200000e8:	af00      	add	r7, sp, #0
200000ea:	4603      	mov	r3, r0
200000ec:	71fb      	strb	r3, [r7, #7]
	uint32_t volatile* const FLASH_SR   = (uint32_t*)(0x40023c00 + 0x0C);
200000ee:	4b1a      	ldr	r3, [pc, #104]	; (20000158 <flash_erase_sector+0x74>)
200000f0:	60fb      	str	r3, [r7, #12]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
200000f2:	4b1a      	ldr	r3, [pc, #104]	; (2000015c <flash_erase_sector+0x78>)
200000f4:	60bb      	str	r3, [r7, #8]
	flash_unlock();
200000f6:	f7ff ffd3 	bl	200000a0 <flash_unlock>
	while (((*FLASH_SR >> 16) & 1) == 1) {}
200000fa:	bf00      	nop
200000fc:	68fb      	ldr	r3, [r7, #12]
200000fe:	681b      	ldr	r3, [r3, #0]
20000100:	0c1b      	lsrs	r3, r3, #16
20000102:	f003 0301 	and.w	r3, r3, #1
20000106:	2b01      	cmp	r3, #1
20000108:	d0f8      	beq.n	200000fc <flash_erase_sector+0x18>
	*FLASH_CR |= (1 << 1);
2000010a:	68bb      	ldr	r3, [r7, #8]
2000010c:	681b      	ldr	r3, [r3, #0]
2000010e:	f043 0202 	orr.w	r2, r3, #2
20000112:	68bb      	ldr	r3, [r7, #8]
20000114:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (sector << 3);
20000116:	68bb      	ldr	r3, [r7, #8]
20000118:	681b      	ldr	r3, [r3, #0]
2000011a:	79fa      	ldrb	r2, [r7, #7]
2000011c:	00d2      	lsls	r2, r2, #3
2000011e:	431a      	orrs	r2, r3
20000120:	68bb      	ldr	r3, [r7, #8]
20000122:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (1 << 16);
20000124:	68bb      	ldr	r3, [r7, #8]
20000126:	681b      	ldr	r3, [r3, #0]
20000128:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2000012c:	68bb      	ldr	r3, [r7, #8]
2000012e:	601a      	str	r2, [r3, #0]
	while (((*FLASH_SR >> 16) & 1) == 1) {}
20000130:	bf00      	nop
20000132:	68fb      	ldr	r3, [r7, #12]
20000134:	681b      	ldr	r3, [r3, #0]
20000136:	0c1b      	lsrs	r3, r3, #16
20000138:	f003 0301 	and.w	r3, r3, #1
2000013c:	2b01      	cmp	r3, #1
2000013e:	d0f8      	beq.n	20000132 <flash_erase_sector+0x4e>
	*FLASH_CR &= ~(1 << 1);
20000140:	68bb      	ldr	r3, [r7, #8]
20000142:	681b      	ldr	r3, [r3, #0]
20000144:	f023 0202 	bic.w	r2, r3, #2
20000148:	68bb      	ldr	r3, [r7, #8]
2000014a:	601a      	str	r2, [r3, #0]
	flash_lock();
2000014c:	f7ff ff8e 	bl	2000006c <flash_lock>
}
20000150:	bf00      	nop
20000152:	3710      	adds	r7, #16
20000154:	46bd      	mov	sp, r7
20000156:	bd80      	pop	{r7, pc}
20000158:	40023c0c 	.word	0x40023c0c
2000015c:	40023c10 	.word	0x40023c10

20000160 <flash_program_byte>:
flash_program_byte(void* address, uint8_t* buffer, uint32_t size) {
20000160:	b580      	push	{r7, lr}
20000162:	b088      	sub	sp, #32
20000164:	af00      	add	r7, sp, #0
20000166:	60f8      	str	r0, [r7, #12]
20000168:	60b9      	str	r1, [r7, #8]
2000016a:	607a      	str	r2, [r7, #4]
	uint32_t volatile* const FLASH_SR   = (uint32_t*)(0x40023c00 + 0x0C);
2000016c:	4b1e      	ldr	r3, [pc, #120]	; (200001e8 <flash_program_byte+0x88>)
2000016e:	617b      	str	r3, [r7, #20]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
20000170:	4b1e      	ldr	r3, [pc, #120]	; (200001ec <flash_program_byte+0x8c>)
20000172:	613b      	str	r3, [r7, #16]
	flash_unlock();
20000174:	f7ff ff94 	bl	200000a0 <flash_unlock>
	while (((*FLASH_SR >> 16) & 1) == 1) {}
20000178:	bf00      	nop
2000017a:	697b      	ldr	r3, [r7, #20]
2000017c:	681b      	ldr	r3, [r3, #0]
2000017e:	0c1b      	lsrs	r3, r3, #16
20000180:	f003 0301 	and.w	r3, r3, #1
20000184:	2b01      	cmp	r3, #1
20000186:	d0f8      	beq.n	2000017a <flash_program_byte+0x1a>
	*FLASH_CR |= (1 << 0);
20000188:	693b      	ldr	r3, [r7, #16]
2000018a:	681b      	ldr	r3, [r3, #0]
2000018c:	f043 0201 	orr.w	r2, r3, #1
20000190:	693b      	ldr	r3, [r7, #16]
20000192:	601a      	str	r2, [r3, #0]
	uint8_t* flash = (uint8_t*)address;
20000194:	68fb      	ldr	r3, [r7, #12]
20000196:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < size; i++) {
20000198:	2300      	movs	r3, #0
2000019a:	61bb      	str	r3, [r7, #24]
2000019c:	e00c      	b.n	200001b8 <flash_program_byte+0x58>
		  *flash = *buffer;
2000019e:	68bb      	ldr	r3, [r7, #8]
200001a0:	781a      	ldrb	r2, [r3, #0]
200001a2:	69fb      	ldr	r3, [r7, #28]
200001a4:	701a      	strb	r2, [r3, #0]
		   flash++;
200001a6:	69fb      	ldr	r3, [r7, #28]
200001a8:	3301      	adds	r3, #1
200001aa:	61fb      	str	r3, [r7, #28]
		   buffer++;
200001ac:	68bb      	ldr	r3, [r7, #8]
200001ae:	3301      	adds	r3, #1
200001b0:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < size; i++) {
200001b2:	69bb      	ldr	r3, [r7, #24]
200001b4:	3301      	adds	r3, #1
200001b6:	61bb      	str	r3, [r7, #24]
200001b8:	69ba      	ldr	r2, [r7, #24]
200001ba:	687b      	ldr	r3, [r7, #4]
200001bc:	429a      	cmp	r2, r3
200001be:	d3ee      	bcc.n	2000019e <flash_program_byte+0x3e>
	*FLASH_CR &= ~(1 << 0);
200001c0:	693b      	ldr	r3, [r7, #16]
200001c2:	681b      	ldr	r3, [r3, #0]
200001c4:	f023 0201 	bic.w	r2, r3, #1
200001c8:	693b      	ldr	r3, [r7, #16]
200001ca:	601a      	str	r2, [r3, #0]
	while (((*FLASH_SR >> 16) & 1) == 1) {}
200001cc:	bf00      	nop
200001ce:	697b      	ldr	r3, [r7, #20]
200001d0:	681b      	ldr	r3, [r3, #0]
200001d2:	0c1b      	lsrs	r3, r3, #16
200001d4:	f003 0301 	and.w	r3, r3, #1
200001d8:	2b01      	cmp	r3, #1
200001da:	d0f8      	beq.n	200001ce <flash_program_byte+0x6e>
	flash_lock();
200001dc:	f7ff ff46 	bl	2000006c <flash_lock>
}
200001e0:	bf00      	nop
200001e2:	3720      	adds	r7, #32
200001e4:	46bd      	mov	sp, r7
200001e6:	bd80      	pop	{r7, pc}
200001e8:	40023c0c 	.word	0x40023c0c
200001ec:	40023c10 	.word	0x40023c10

200001f0 <reset_system>:
reset_system() {
200001f0:	b480      	push	{r7}
200001f2:	b083      	sub	sp, #12
200001f4:	af00      	add	r7, sp, #0
	uint32_t volatile* const AIRCR   = (uint32_t*)(0xE000ED0C);
200001f6:	4b05      	ldr	r3, [pc, #20]	; (2000020c <reset_system+0x1c>)
200001f8:	607b      	str	r3, [r7, #4]
	*AIRCR = (0x5FA << 16)|(1 << 2);		// register key
200001fa:	687b      	ldr	r3, [r7, #4]
200001fc:	4a04      	ldr	r2, [pc, #16]	; (20000210 <reset_system+0x20>)
200001fe:	601a      	str	r2, [r3, #0]
}
20000200:	bf00      	nop
20000202:	370c      	adds	r7, #12
20000204:	46bd      	mov	sp, r7
20000206:	f85d 7b04 	ldr.w	r7, [sp], #4
2000020a:	4770      	bx	lr
2000020c:	e000ed0c 	.word	0xe000ed0c
20000210:	05fa0004 	.word	0x05fa0004

20000214 <update_firmware>:
update_firmware() {
20000214:	b580      	push	{r7, lr}
20000216:	af00      	add	r7, sp, #0
	flash_erase_sector(SECTOR_0);
20000218:	2000      	movs	r0, #0
2000021a:	f7ff ff63 	bl	200000e4 <flash_erase_sector>
	flash_program_byte((void*)SECTOR_0_BASE_ADDR, rx_dma_buffer, sizeof(rx_dma_buffer));
2000021e:	f241 62bc 	movw	r2, #5820	; 0x16bc
20000222:	4904      	ldr	r1, [pc, #16]	; (20000234 <update_firmware+0x20>)
20000224:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
20000228:	f7ff ff9a 	bl	20000160 <flash_program_byte>
	reset_system();
2000022c:	f7ff ffe0 	bl	200001f0 <reset_system>
}
20000230:	bf00      	nop
20000232:	bd80      	pop	{r7, pc}
20000234:	200002f8 	.word	0x200002f8
