
update-firmware-via-uart-using-hal-lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f20  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020b8  080020b8  000120b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c8  080020c8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020d0  080020d0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d0  080020d0  000120d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080020d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00001784  200001e8  080022c0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000196c  080022c0  0002196c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000854e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001641  00000000  00000000  00028766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00029da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015190  00000000  00000000  0002aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098d4  00000000  00000000  0003fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a1a  00000000  00000000  00049554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdf6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b44  00000000  00000000  000cdfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001e8 	.word	0x200001e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002098 	.word	0x08002098

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ec 	.word	0x200001ec
 80001d4:	08002098 	.word	0x08002098

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 f9be 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f864 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f842 	bl	8000570 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f816 	bl	800051c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  vectortable_move();
 80004f0:	f000 f878 	bl	80005e4 <vectortable_move>
  HAL_UART_Receive_DMA(&huart2, rx_dma_buffer, sizeof(rx_dma_buffer));
 80004f4:	f241 62bc 	movw	r2, #5820	; 0x16bc
 80004f8:	4905      	ldr	r1, [pc, #20]	; (8000510 <main+0x34>)
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <main+0x38>)
 80004fc:	f001 f8a9 	bl	8001652 <HAL_UART_Receive_DMA>
  while (!receive_done);
 8000500:	bf00      	nop
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <main+0x3c>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0fb      	beq.n	8000502 <main+0x26>
  update_firmware();
 800050a:	f001 fdd1 	bl	80020b0 <__update_firmware_veneer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	e7fe      	b.n	800050e <main+0x32>
 8000510:	200002a8 	.word	0x200002a8
 8000514:	20000204 	.word	0x20000204
 8000518:	20001964 	.word	0x20001964

0800051c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <MX_USART2_UART_Init+0x50>)
 8000524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800052c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000554:	f001 f830 	bl	80015b8 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800055e:	f000 f85d 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000204 	.word	0x20000204
 800056c:	40004400 	.word	0x40004400

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_DMA_Init+0x3c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <MX_DMA_Init+0x3c>)
 8000580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_DMA_Init+0x3c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2010      	movs	r0, #16
 8000598:	f000 faaf 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800059c:	2010      	movs	r0, #16
 800059e:	f000 fac8 	bl	8000b32 <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_GPIO_Init+0x30>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <MX_GPIO_Init+0x30>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_GPIO_Init+0x30>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <vectortable_move>:
 *\param[out]
 *\retval
 */
void
vectortable_move()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
	/* size(vector_table) = 0x194 + 0x4 - 0x00 = 0x198 */
	/* move vector table from flash to ram */
	void *volatile ram   = (void *volatile)0x20000000;
 80005ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005ee:	60bb      	str	r3, [r7, #8]
	void *volatile flash = (void *volatile)0x08000000;
 80005f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005f4:	607b      	str	r3, [r7, #4]
	memcpy(ram, flash, 0x198);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fd3c 	bl	800207c <memcpy>

	uint32_t *VTOR = (uint32_t *)(0xE000ED08);
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <vectortable_move+0x34>)
 8000606:	60fb      	str	r3, [r7, #12]
	*VTOR = 0x20000000;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	e000ed08 	.word	0xe000ed08

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_MspInit+0x4c>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <HAL_MspInit+0x4c>)
 8000638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063c:	6453      	str	r3, [r2, #68]	; 0x44
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_MspInit+0x4c>)
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_MspInit+0x4c>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <HAL_MspInit+0x4c>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	6413      	str	r3, [r2, #64]	; 0x40
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_MspInit+0x4c>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a30      	ldr	r2, [pc, #192]	; (8000758 <HAL_UART_MspInit+0xe0>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d159      	bne.n	800074e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b2f      	ldr	r3, [pc, #188]	; (800075c <HAL_UART_MspInit+0xe4>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	4a2e      	ldr	r2, [pc, #184]	; (800075c <HAL_UART_MspInit+0xe4>)
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	6413      	str	r3, [r2, #64]	; 0x40
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <HAL_UART_MspInit+0xe4>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <HAL_UART_MspInit+0xe4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a27      	ldr	r2, [pc, #156]	; (800075c <HAL_UART_MspInit+0xe4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <HAL_UART_MspInit+0xe4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006d2:	230c      	movs	r3, #12
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006e2:	2307      	movs	r3, #7
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481c      	ldr	r0, [pc, #112]	; (8000760 <HAL_UART_MspInit+0xe8>)
 80006ee:	f000 fdab 	bl	8001248 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <HAL_UART_MspInit+0xec>)
 80006f4:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <HAL_UART_MspInit+0xf0>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_UART_MspInit+0xec>)
 80006fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <HAL_UART_MspInit+0xec>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_UART_MspInit+0xec>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_UART_MspInit+0xec>)
 800070e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000712:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_UART_MspInit+0xec>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_UART_MspInit+0xec>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_UART_MspInit+0xec>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_UART_MspInit+0xec>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_UART_MspInit+0xec>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <HAL_UART_MspInit+0xec>)
 8000734:	f000 fa18 	bl	8000b68 <HAL_DMA_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800073e:	f7ff ff6d 	bl	800061c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_UART_MspInit+0xec>)
 8000746:	639a      	str	r2, [r3, #56]	; 0x38
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_UART_MspInit+0xec>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800074e:	bf00      	nop
 8000750:	3728      	adds	r7, #40	; 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40004400 	.word	0x40004400
 800075c:	40023800 	.word	0x40023800
 8000760:	40020000 	.word	0x40020000
 8000764:	20000248 	.word	0x20000248
 8000768:	40026088 	.word	0x40026088

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f8a4 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if (__HAL_DMA_GET_COUNTER(&hdma_usart2_rx) == 0) {
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <DMA1_Stream5_IRQHandler+0x20>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d102      	bne.n	80007d4 <DMA1_Stream5_IRQHandler+0x14>
		receive_done = 1;
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <DMA1_Stream5_IRQHandler+0x24>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <DMA1_Stream5_IRQHandler+0x20>)
 80007d6:	f000 facd 	bl	8000d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000248 	.word	0x20000248
 80007e4:	20001964 	.word	0x20001964

080007e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <SystemInit+0x20>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <SystemInit+0x20>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000844 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000812:	490e      	ldr	r1, [pc, #56]	; (800084c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000828:	4c0b      	ldr	r4, [pc, #44]	; (8000858 <LoopFillZerobss+0x26>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000836:	f7ff ffd7 	bl	80007e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800083a:	f001 fbfb 	bl	8002034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083e:	f7ff fe4d 	bl	80004dc <main>
  bx  lr    
 8000842:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000850:	080020d8 	.word	0x080020d8
  ldr r2, =_sbss
 8000854:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000858:	2000196c 	.word	0x2000196c

0800085c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <HAL_Init+0x40>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_Init+0x40>)
 8000876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800087a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x40>)
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f92b 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fec8 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f943 	bl	8000b4e <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f90b 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20001968 	.word	0x20001968

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20001968 	.word	0x20001968

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <__NVIC_EnableIRQ+0x38>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff8e 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff29 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff3e 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff8e 	bl	8000a38 <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5d 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff31 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff feda 	bl	800092c <HAL_GetTick>
 8000b78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e099      	b.n	8000cb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2202      	movs	r2, #2
 8000b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0201 	bic.w	r2, r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ba4:	e00f      	b.n	8000bc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ba6:	f7ff fec1 	bl	800092c <HAL_GetTick>
 8000baa:	4602      	mov	r2, r0
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	2b05      	cmp	r3, #5
 8000bb2:	d908      	bls.n	8000bc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e078      	b.n	8000cb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1e8      	bne.n	8000ba6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <HAL_DMA_Init+0x158>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d107      	bne.n	8000c30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f023 0307 	bic.w	r3, r3, #7
 8000c46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d117      	bne.n	8000c8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00e      	beq.n	8000c8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 fa6f 	bl	8001150 <DMA_CheckFifoParam>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d008      	beq.n	8000c8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2240      	movs	r2, #64	; 0x40
 8000c7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000c86:	2301      	movs	r3, #1
 8000c88:	e016      	b.n	8000cb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 fa26 	bl	80010e4 <DMA_CalcBaseAndBitshift>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca0:	223f      	movs	r2, #63	; 0x3f
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	f010803f 	.word	0xf010803f

08000cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d101      	bne.n	8000cea <HAL_DMA_Start_IT+0x26>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e040      	b.n	8000d6c <HAL_DMA_Start_IT+0xa8>
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2201      	movs	r2, #1
 8000cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d12f      	bne.n	8000d5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2202      	movs	r2, #2
 8000d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f000 f9b8 	bl	8001088 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d1c:	223f      	movs	r2, #63	; 0x3f
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0216 	orr.w	r2, r2, #22
 8000d32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d007      	beq.n	8000d4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 0208 	orr.w	r2, r2, #8
 8000d4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0201 	orr.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e005      	b.n	8000d6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000d66:	2302      	movs	r3, #2
 8000d68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d80:	4b8e      	ldr	r3, [pc, #568]	; (8000fbc <HAL_DMA_IRQHandler+0x248>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a8e      	ldr	r2, [pc, #568]	; (8000fc0 <HAL_DMA_IRQHandler+0x24c>)
 8000d86:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8a:	0a9b      	lsrs	r3, r3, #10
 8000d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d9e:	2208      	movs	r2, #8
 8000da0:	409a      	lsls	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d01a      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d013      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0204 	bic.w	r2, r2, #4
 8000dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dcc:	2208      	movs	r2, #8
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd8:	f043 0201 	orr.w	r2, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de4:	2201      	movs	r2, #1
 8000de6:	409a      	lsls	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d012      	beq.n	8000e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e02:	2201      	movs	r2, #1
 8000e04:	409a      	lsls	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e0e:	f043 0202 	orr.w	r2, r3, #2
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d012      	beq.n	8000e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00b      	beq.n	8000e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e38:	2204      	movs	r2, #4
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e44:	f043 0204 	orr.w	r2, r3, #4
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e50:	2210      	movs	r2, #16
 8000e52:	409a      	lsls	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d043      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d03c      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6e:	2210      	movs	r2, #16
 8000e70:	409a      	lsls	r2, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d018      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d108      	bne.n	8000ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d024      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	4798      	blx	r3
 8000ea2:	e01f      	b.n	8000ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d01b      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	4798      	blx	r3
 8000eb4:	e016      	b.n	8000ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d107      	bne.n	8000ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0208 	bic.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ee8:	2220      	movs	r2, #32
 8000eea:	409a      	lsls	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 808f 	beq.w	8001014 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 8087 	beq.w	8001014 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b05      	cmp	r3, #5
 8000f1c:	d136      	bne.n	8000f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0216 	bic.w	r2, r2, #22
 8000f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d103      	bne.n	8000f4e <HAL_DMA_IRQHandler+0x1da>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0208 	bic.w	r2, r2, #8
 8000f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f62:	223f      	movs	r2, #63	; 0x3f
 8000f64:	409a      	lsls	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d07e      	beq.n	8001080 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	4798      	blx	r3
        }
        return;
 8000f8a:	e079      	b.n	8001080 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d01d      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10d      	bne.n	8000fc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d031      	beq.n	8001014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	4798      	blx	r3
 8000fb8:	e02c      	b.n	8001014 <HAL_DMA_IRQHandler+0x2a0>
 8000fba:	bf00      	nop
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d023      	beq.n	8001014 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
 8000fd4:	e01e      	b.n	8001014 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10f      	bne.n	8001004 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0210 	bic.w	r2, r2, #16
 8000ff2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001018:	2b00      	cmp	r3, #0
 800101a:	d032      	beq.n	8001082 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d022      	beq.n	800106e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2205      	movs	r2, #5
 800102c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3301      	adds	r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	d307      	bcc.n	800105c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f2      	bne.n	8001040 <HAL_DMA_IRQHandler+0x2cc>
 800105a:	e000      	b.n	800105e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800105c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
 800107e:	e000      	b.n	8001082 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001080:	bf00      	nop
    }
  }
}
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b40      	cmp	r3, #64	; 0x40
 80010b4:	d108      	bne.n	80010c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80010c6:	e007      	b.n	80010d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	60da      	str	r2, [r3, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	3b10      	subs	r3, #16
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <DMA_CalcBaseAndBitshift+0x64>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <DMA_CalcBaseAndBitshift+0x68>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d909      	bls.n	8001126 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	1d1a      	adds	r2, r3, #4
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	659a      	str	r2, [r3, #88]	; 0x58
 8001124:	e007      	b.n	8001136 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800112e:	f023 0303 	bic.w	r3, r3, #3
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	aaaaaaab 	.word	0xaaaaaaab
 800114c:	080020c0 	.word	0x080020c0

08001150 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d11f      	bne.n	80011aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d856      	bhi.n	800121e <DMA_CheckFifoParam+0xce>
 8001170:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <DMA_CheckFifoParam+0x28>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	08001189 	.word	0x08001189
 800117c:	0800119b 	.word	0x0800119b
 8001180:	08001189 	.word	0x08001189
 8001184:	0800121f 	.word	0x0800121f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d046      	beq.n	8001222 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001198:	e043      	b.n	8001222 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80011a2:	d140      	bne.n	8001226 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011a8:	e03d      	b.n	8001226 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b2:	d121      	bne.n	80011f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d837      	bhi.n	800122a <DMA_CheckFifoParam+0xda>
 80011ba:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <DMA_CheckFifoParam+0x70>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011d1 	.word	0x080011d1
 80011c4:	080011d7 	.word	0x080011d7
 80011c8:	080011d1 	.word	0x080011d1
 80011cc:	080011e9 	.word	0x080011e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
      break;
 80011d4:	e030      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d025      	beq.n	800122e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011e6:	e022      	b.n	800122e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80011f0:	d11f      	bne.n	8001232 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80011f6:	e01c      	b.n	8001232 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d903      	bls.n	8001206 <DMA_CheckFifoParam+0xb6>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d003      	beq.n	800120c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001204:	e018      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
      break;
 800120a:	e015      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00e      	beq.n	8001236 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
      break;
 800121c:	e00b      	b.n	8001236 <DMA_CheckFifoParam+0xe6>
      break;
 800121e:	bf00      	nop
 8001220:	e00a      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
      break;
 8001222:	bf00      	nop
 8001224:	e008      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
      break;
 8001226:	bf00      	nop
 8001228:	e006      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
      break;
 800122a:	bf00      	nop
 800122c:	e004      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
      break;
 800122e:	bf00      	nop
 8001230:	e002      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
      break;   
 8001232:	bf00      	nop
 8001234:	e000      	b.n	8001238 <DMA_CheckFifoParam+0xe8>
      break;
 8001236:	bf00      	nop
    }
  } 
  
  return status; 
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e159      	b.n	8001518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8148 	bne.w	8001512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a2 	beq.w	8001512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b57      	ldr	r3, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a56      	ldr	r2, [pc, #344]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b54      	ldr	r3, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_GPIO_Init+0x2f0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x202>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_GPIO_Init+0x2f4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x1fe>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_GPIO_Init+0x2f8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x1fa>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_GPIO_Init+0x2fc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x1f6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_GPIO_Init+0x300>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x1f2>
 8001436:	2304      	movs	r3, #4
 8001438:	e008      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143a:	2307      	movs	r3, #7
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143e:	2303      	movs	r3, #3
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x204>
 800144a:	2300      	movs	r3, #0
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_GPIO_Init+0x304>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148e:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_GPIO_Init+0x304>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_GPIO_Init+0x304>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_GPIO_Init+0x304>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_GPIO_Init+0x304>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_GPIO_Init+0x304>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	f67f aea2 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_RCC_GetHCLKFreq+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000

08001568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800156c:	f7ff fff0 	bl	8001550 <HAL_RCC_GetHCLKFreq>
 8001570:	4602      	mov	r2, r0
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	0a9b      	lsrs	r3, r3, #10
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	4903      	ldr	r1, [pc, #12]	; (800158c <HAL_RCC_GetPCLK1Freq+0x24>)
 800157e:	5ccb      	ldrb	r3, [r1, r3]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	080020b8 	.word	0x080020b8

08001590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001594:	f7ff ffdc 	bl	8001550 <HAL_RCC_GetHCLKFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	0b5b      	lsrs	r3, r3, #13
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	4903      	ldr	r1, [pc, #12]	; (80015b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a6:	5ccb      	ldrb	r3, [r1, r3]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	080020b8 	.word	0x080020b8

080015b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e03f      	b.n	800164a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d106      	bne.n	80015e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff f84a 	bl	8000678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 faa5 	bl	8001b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	4613      	mov	r3, r2
 800165e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d11d      	bne.n	80016a8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_UART_Receive_DMA+0x26>
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e016      	b.n	80016aa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_UART_Receive_DMA+0x38>
 8001686:	2302      	movs	r3, #2
 8001688:	e00f      	b.n	80016aa <HAL_UART_Receive_DMA+0x58>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	461a      	mov	r2, r3
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f92a 	bl	80018f8 <UART_Start_Receive_DMA>
 80016a4:	4603      	mov	r3, r0
 80016a6:	e000      	b.n	80016aa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80016a8:	2302      	movs	r3, #2
  }
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b09c      	sub	sp, #112	; 0x70
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d172      	bne.n	8001808 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8001722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001724:	2200      	movs	r2, #0
 8001726:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	330c      	adds	r3, #12
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001732:	e853 3f00 	ldrex	r3, [r3]
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800173e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	330c      	adds	r3, #12
 8001746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001748:	65ba      	str	r2, [r7, #88]	; 0x58
 800174a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800174c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800174e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001750:	e841 2300 	strex	r3, r2, [r1]
 8001754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e5      	bne.n	8001728 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800175c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3314      	adds	r3, #20
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001766:	e853 3f00 	ldrex	r3, [r3]
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	667b      	str	r3, [r7, #100]	; 0x64
 8001774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3314      	adds	r3, #20
 800177a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800177c:	647a      	str	r2, [r7, #68]	; 0x44
 800177e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001784:	e841 2300 	strex	r3, r2, [r1]
 8001788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800178a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e5      	bne.n	800175c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3314      	adds	r3, #20
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	e853 3f00 	ldrex	r3, [r3]
 800179e:	623b      	str	r3, [r7, #32]
   return(result);
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017a6:	663b      	str	r3, [r7, #96]	; 0x60
 80017a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3314      	adds	r3, #20
 80017ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017b0:	633a      	str	r2, [r7, #48]	; 0x30
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b8:	e841 2300 	strex	r3, r2, [r1]
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80017be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e5      	bne.n	8001790 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80017c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d119      	bne.n	8001808 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	330c      	adds	r3, #12
 80017da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	e853 3f00 	ldrex	r3, [r3]
 80017e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 0310 	bic.w	r3, r3, #16
 80017ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	330c      	adds	r3, #12
 80017f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017f4:	61fa      	str	r2, [r7, #28]
 80017f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017f8:	69b9      	ldr	r1, [r7, #24]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	e841 2300 	strex	r3, r2, [r1]
 8001800:	617b      	str	r3, [r7, #20]
   return(result);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e5      	bne.n	80017d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001812:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001818:	f7ff ff69 	bl	80016ee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800181c:	e002      	b.n	8001824 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800181e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001820:	f7ff ff47 	bl	80016b2 <HAL_UART_RxCpltCallback>
}
 8001824:	bf00      	nop
 8001826:	3770      	adds	r7, #112	; 0x70
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	2b01      	cmp	r3, #1
 8001840:	d108      	bne.n	8001854 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	4619      	mov	r1, r3
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff ff4e 	bl	80016ee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001852:	e002      	b.n	800185a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff ff36 	bl	80016c6 <HAL_UART_RxHalfCpltCallback>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	2b80      	cmp	r3, #128	; 0x80
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b21      	cmp	r3, #33	; 0x21
 8001894:	d108      	bne.n	80018a8 <UART_DMAError+0x46>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2200      	movs	r2, #0
 80018a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80018a2:	68b8      	ldr	r0, [r7, #8]
 80018a4:	f000 f8c6 	bl	8001a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b22      	cmp	r3, #34	; 0x22
 80018c8:	d108      	bne.n	80018dc <UART_DMAError+0x7a>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2200      	movs	r2, #0
 80018d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80018d6:	68b8      	ldr	r0, [r7, #8]
 80018d8:	f000 f8d4 	bl	8001a84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f043 0210 	orr.w	r2, r3, #16
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80018e8:	68b8      	ldr	r0, [r7, #8]
 80018ea:	f7ff fef6 	bl	80016da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b098      	sub	sp, #96	; 0x60
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2222      	movs	r2, #34	; 0x22
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	4a40      	ldr	r2, [pc, #256]	; (8001a28 <UART_Start_Receive_DMA+0x130>)
 8001926:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	4a3f      	ldr	r2, [pc, #252]	; (8001a2c <UART_Start_Receive_DMA+0x134>)
 800192e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001934:	4a3e      	ldr	r2, [pc, #248]	; (8001a30 <UART_Start_Receive_DMA+0x138>)
 8001936:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193c:	2200      	movs	r2, #0
 800193e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3304      	adds	r3, #4
 8001950:	4619      	mov	r1, r3
 8001952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	f7ff f9b4 	bl	8000cc4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d019      	beq.n	80019b6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	330c      	adds	r3, #12
 8001988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800198a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800198c:	e853 3f00 	ldrex	r3, [r3]
 8001990:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001998:	65bb      	str	r3, [r7, #88]	; 0x58
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	330c      	adds	r3, #12
 80019a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019aa:	e841 2300 	strex	r3, r2, [r1]
 80019ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80019b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1e5      	bne.n	8001982 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3314      	adds	r3, #20
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	e853 3f00 	ldrex	r3, [r3]
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	657b      	str	r3, [r7, #84]	; 0x54
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3314      	adds	r3, #20
 80019d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019de:	e841 2300 	strex	r3, r2, [r1]
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80019e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1e5      	bne.n	80019b6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3314      	adds	r3, #20
 80019f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	e853 3f00 	ldrex	r3, [r3]
 80019f8:	617b      	str	r3, [r7, #20]
   return(result);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a00:	653b      	str	r3, [r7, #80]	; 0x50
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3314      	adds	r3, #20
 8001a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8001a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a0e:	6a39      	ldr	r1, [r7, #32]
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	e841 2300 	strex	r3, r2, [r1]
 8001a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1e5      	bne.n	80019ea <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3760      	adds	r7, #96	; 0x60
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	08001707 	.word	0x08001707
 8001a2c:	0800182d 	.word	0x0800182d
 8001a30:	08001863 	.word	0x08001863

08001a34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	330c      	adds	r3, #12
 8001a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	e853 3f00 	ldrex	r3, [r3]
 8001a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	61ba      	str	r2, [r7, #24]
 8001a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a60:	6979      	ldr	r1, [r7, #20]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	e841 2300 	strex	r3, r2, [r1]
 8001a68:	613b      	str	r3, [r7, #16]
   return(result);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1e5      	bne.n	8001a3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8001a78:	bf00      	nop
 8001a7a:	3724      	adds	r7, #36	; 0x24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b095      	sub	sp, #84	; 0x54
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	330c      	adds	r3, #12
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a96:	e853 3f00 	ldrex	r3, [r3]
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aac:	643a      	str	r2, [r7, #64]	; 0x40
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ab4:	e841 2300 	strex	r3, r2, [r1]
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e5      	bne.n	8001a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3314      	adds	r3, #20
 8001ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	e853 3f00 	ldrex	r3, [r3]
 8001ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3314      	adds	r3, #20
 8001ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae8:	e841 2300 	strex	r3, r2, [r1]
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e5      	bne.n	8001ac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d119      	bne.n	8001b30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	330c      	adds	r3, #12
 8001b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	e853 3f00 	ldrex	r3, [r3]
 8001b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f023 0310 	bic.w	r3, r3, #16
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b1c:	61ba      	str	r2, [r7, #24]
 8001b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b20:	6979      	ldr	r1, [r7, #20]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	e841 2300 	strex	r3, r2, [r1]
 8001b28:	613b      	str	r3, [r7, #16]
   return(result);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e5      	bne.n	8001afc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b3e:	bf00      	nop
 8001b40:	3754      	adds	r7, #84	; 0x54
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b50:	b0c0      	sub	sp, #256	; 0x100
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b68:	68d9      	ldr	r1, [r3, #12]
 8001b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	ea40 0301 	orr.w	r3, r0, r1
 8001b74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ba4:	f021 010c 	bic.w	r1, r1, #12
 8001ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc6:	6999      	ldr	r1, [r3, #24]
 8001bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	ea40 0301 	orr.w	r3, r0, r1
 8001bd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <UART_SetConfig+0x2cc>)
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d005      	beq.n	8001bec <UART_SetConfig+0xa0>
 8001be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b8d      	ldr	r3, [pc, #564]	; (8001e1c <UART_SetConfig+0x2d0>)
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d104      	bne.n	8001bf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bec:	f7ff fcd0 	bl	8001590 <HAL_RCC_GetPCLK2Freq>
 8001bf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001bf4:	e003      	b.n	8001bfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bf6:	f7ff fcb7 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 8001bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c08:	f040 810c 	bne.w	8001e24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c1e:	4622      	mov	r2, r4
 8001c20:	462b      	mov	r3, r5
 8001c22:	1891      	adds	r1, r2, r2
 8001c24:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c26:	415b      	adcs	r3, r3
 8001c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c2e:	4621      	mov	r1, r4
 8001c30:	eb12 0801 	adds.w	r8, r2, r1
 8001c34:	4629      	mov	r1, r5
 8001c36:	eb43 0901 	adc.w	r9, r3, r1
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4e:	4690      	mov	r8, r2
 8001c50:	4699      	mov	r9, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	eb18 0303 	adds.w	r3, r8, r3
 8001c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	eb49 0303 	adc.w	r3, r9, r3
 8001c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	18db      	adds	r3, r3, r3
 8001c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8001c80:	4613      	mov	r3, r2
 8001c82:	eb42 0303 	adc.w	r3, r2, r3
 8001c86:	657b      	str	r3, [r7, #84]	; 0x54
 8001c88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c90:	f7fe faa2 	bl	80001d8 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	011c      	lsls	r4, r3, #4
 8001ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	1891      	adds	r1, r2, r2
 8001cba:	64b9      	str	r1, [r7, #72]	; 0x48
 8001cbc:	415b      	adcs	r3, r3
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cc4:	4641      	mov	r1, r8
 8001cc6:	eb12 0a01 	adds.w	sl, r2, r1
 8001cca:	4649      	mov	r1, r9
 8001ccc:	eb43 0b01 	adc.w	fp, r3, r1
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ce4:	4692      	mov	sl, r2
 8001ce6:	469b      	mov	fp, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	eb1a 0303 	adds.w	r3, sl, r3
 8001cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	eb4b 0303 	adc.w	r3, fp, r3
 8001cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d10:	460b      	mov	r3, r1
 8001d12:	18db      	adds	r3, r3, r3
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
 8001d16:	4613      	mov	r3, r2
 8001d18:	eb42 0303 	adc.w	r3, r2, r3
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d26:	f7fe fa57 	bl	80001d8 <__aeabi_uldivmod>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001d32:	fba3 2301 	umull	r2, r3, r3, r1
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2264      	movs	r2, #100	; 0x64
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001d48:	fba3 2302 	umull	r2, r3, r3, r2
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d54:	441c      	add	r4, r3
 8001d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d68:	4642      	mov	r2, r8
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	1891      	adds	r1, r2, r2
 8001d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d70:	415b      	adcs	r3, r3
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d78:	4641      	mov	r1, r8
 8001d7a:	1851      	adds	r1, r2, r1
 8001d7c:	6339      	str	r1, [r7, #48]	; 0x30
 8001d7e:	4649      	mov	r1, r9
 8001d80:	414b      	adcs	r3, r1
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d90:	4659      	mov	r1, fp
 8001d92:	00cb      	lsls	r3, r1, #3
 8001d94:	4651      	mov	r1, sl
 8001d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d9a:	4651      	mov	r1, sl
 8001d9c:	00ca      	lsls	r2, r1, #3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	4603      	mov	r3, r0
 8001da4:	4642      	mov	r2, r8
 8001da6:	189b      	adds	r3, r3, r2
 8001da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001dac:	464b      	mov	r3, r9
 8001dae:	460a      	mov	r2, r1
 8001db0:	eb42 0303 	adc.w	r3, r2, r3
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001dc4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001dcc:	460b      	mov	r3, r1
 8001dce:	18db      	adds	r3, r3, r3
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	eb42 0303 	adc.w	r3, r2, r3
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001de2:	f7fe f9f9 	bl	80001d8 <__aeabi_uldivmod>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001dec:	fba3 1302 	umull	r1, r3, r3, r2
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	2164      	movs	r1, #100	; 0x64
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	3332      	adds	r3, #50	; 0x32
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <UART_SetConfig+0x2d4>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	f003 0207 	and.w	r2, r3, #7
 8001e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4422      	add	r2, r4
 8001e12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e14:	e105      	b.n	8002022 <UART_SetConfig+0x4d6>
 8001e16:	bf00      	nop
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	40011400 	.word	0x40011400
 8001e20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e36:	4642      	mov	r2, r8
 8001e38:	464b      	mov	r3, r9
 8001e3a:	1891      	adds	r1, r2, r2
 8001e3c:	6239      	str	r1, [r7, #32]
 8001e3e:	415b      	adcs	r3, r3
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e46:	4641      	mov	r1, r8
 8001e48:	1854      	adds	r4, r2, r1
 8001e4a:	4649      	mov	r1, r9
 8001e4c:	eb43 0501 	adc.w	r5, r3, r1
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	00eb      	lsls	r3, r5, #3
 8001e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e5e:	00e2      	lsls	r2, r4, #3
 8001e60:	4614      	mov	r4, r2
 8001e62:	461d      	mov	r5, r3
 8001e64:	4643      	mov	r3, r8
 8001e66:	18e3      	adds	r3, r4, r3
 8001e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	eb45 0303 	adc.w	r3, r5, r3
 8001e72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e92:	4629      	mov	r1, r5
 8001e94:	008b      	lsls	r3, r1, #2
 8001e96:	4621      	mov	r1, r4
 8001e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	008a      	lsls	r2, r1, #2
 8001ea0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001ea4:	f7fe f998 	bl	80001d8 <__aeabi_uldivmod>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4b60      	ldr	r3, [pc, #384]	; (8002030 <UART_SetConfig+0x4e4>)
 8001eae:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	011c      	lsls	r4, r3, #4
 8001eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ec0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ec4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001ec8:	4642      	mov	r2, r8
 8001eca:	464b      	mov	r3, r9
 8001ecc:	1891      	adds	r1, r2, r2
 8001ece:	61b9      	str	r1, [r7, #24]
 8001ed0:	415b      	adcs	r3, r3
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed8:	4641      	mov	r1, r8
 8001eda:	1851      	adds	r1, r2, r1
 8001edc:	6139      	str	r1, [r7, #16]
 8001ede:	4649      	mov	r1, r9
 8001ee0:	414b      	adcs	r3, r1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ef0:	4659      	mov	r1, fp
 8001ef2:	00cb      	lsls	r3, r1, #3
 8001ef4:	4651      	mov	r1, sl
 8001ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001efa:	4651      	mov	r1, sl
 8001efc:	00ca      	lsls	r2, r1, #3
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	4642      	mov	r2, r8
 8001f06:	189b      	adds	r3, r3, r2
 8001f08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f0c:	464b      	mov	r3, r9
 8001f0e:	460a      	mov	r2, r1
 8001f10:	eb42 0303 	adc.w	r3, r2, r3
 8001f14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f30:	4649      	mov	r1, r9
 8001f32:	008b      	lsls	r3, r1, #2
 8001f34:	4641      	mov	r1, r8
 8001f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	008a      	lsls	r2, r1, #2
 8001f3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f42:	f7fe f949 	bl	80001d8 <__aeabi_uldivmod>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4b39      	ldr	r3, [pc, #228]	; (8002030 <UART_SetConfig+0x4e4>)
 8001f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	2164      	movs	r1, #100	; 0x64
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	3332      	adds	r3, #50	; 0x32
 8001f5e:	4a34      	ldr	r2, [pc, #208]	; (8002030 <UART_SetConfig+0x4e4>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6a:	441c      	add	r4, r3
 8001f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f70:	2200      	movs	r2, #0
 8001f72:	673b      	str	r3, [r7, #112]	; 0x70
 8001f74:	677a      	str	r2, [r7, #116]	; 0x74
 8001f76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f7a:	4642      	mov	r2, r8
 8001f7c:	464b      	mov	r3, r9
 8001f7e:	1891      	adds	r1, r2, r2
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	415b      	adcs	r3, r3
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f8a:	4641      	mov	r1, r8
 8001f8c:	1851      	adds	r1, r2, r1
 8001f8e:	6039      	str	r1, [r7, #0]
 8001f90:	4649      	mov	r1, r9
 8001f92:	414b      	adcs	r3, r1
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fa2:	4659      	mov	r1, fp
 8001fa4:	00cb      	lsls	r3, r1, #3
 8001fa6:	4651      	mov	r1, sl
 8001fa8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fac:	4651      	mov	r1, sl
 8001fae:	00ca      	lsls	r2, r1, #3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4642      	mov	r2, r8
 8001fb8:	189b      	adds	r3, r3, r2
 8001fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fbc:	464b      	mov	r3, r9
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	eb42 0303 	adc.w	r3, r2, r3
 8001fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd0:	667a      	str	r2, [r7, #100]	; 0x64
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001fde:	4649      	mov	r1, r9
 8001fe0:	008b      	lsls	r3, r1, #2
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fe8:	4641      	mov	r1, r8
 8001fea:	008a      	lsls	r2, r1, #2
 8001fec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ff0:	f7fe f8f2 	bl	80001d8 <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <UART_SetConfig+0x4e4>)
 8001ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2164      	movs	r1, #100	; 0x64
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	3332      	adds	r3, #50	; 0x32
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <UART_SetConfig+0x4e4>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4422      	add	r2, r4
 8002020:	609a      	str	r2, [r3, #8]
}
 8002022:	bf00      	nop
 8002024:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002028:	46bd      	mov	sp, r7
 800202a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800202e:	bf00      	nop
 8002030:	51eb851f 	.word	0x51eb851f

08002034 <__libc_init_array>:
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	4d0d      	ldr	r5, [pc, #52]	; (800206c <__libc_init_array+0x38>)
 8002038:	4c0d      	ldr	r4, [pc, #52]	; (8002070 <__libc_init_array+0x3c>)
 800203a:	1b64      	subs	r4, r4, r5
 800203c:	10a4      	asrs	r4, r4, #2
 800203e:	2600      	movs	r6, #0
 8002040:	42a6      	cmp	r6, r4
 8002042:	d109      	bne.n	8002058 <__libc_init_array+0x24>
 8002044:	4d0b      	ldr	r5, [pc, #44]	; (8002074 <__libc_init_array+0x40>)
 8002046:	4c0c      	ldr	r4, [pc, #48]	; (8002078 <__libc_init_array+0x44>)
 8002048:	f000 f826 	bl	8002098 <_init>
 800204c:	1b64      	subs	r4, r4, r5
 800204e:	10a4      	asrs	r4, r4, #2
 8002050:	2600      	movs	r6, #0
 8002052:	42a6      	cmp	r6, r4
 8002054:	d105      	bne.n	8002062 <__libc_init_array+0x2e>
 8002056:	bd70      	pop	{r4, r5, r6, pc}
 8002058:	f855 3b04 	ldr.w	r3, [r5], #4
 800205c:	4798      	blx	r3
 800205e:	3601      	adds	r6, #1
 8002060:	e7ee      	b.n	8002040 <__libc_init_array+0xc>
 8002062:	f855 3b04 	ldr.w	r3, [r5], #4
 8002066:	4798      	blx	r3
 8002068:	3601      	adds	r6, #1
 800206a:	e7f2      	b.n	8002052 <__libc_init_array+0x1e>
 800206c:	080020d0 	.word	0x080020d0
 8002070:	080020d0 	.word	0x080020d0
 8002074:	080020d0 	.word	0x080020d0
 8002078:	080020d4 	.word	0x080020d4

0800207c <memcpy>:
 800207c:	440a      	add	r2, r1
 800207e:	4291      	cmp	r1, r2
 8002080:	f100 33ff 	add.w	r3, r0, #4294967295
 8002084:	d100      	bne.n	8002088 <memcpy+0xc>
 8002086:	4770      	bx	lr
 8002088:	b510      	push	{r4, lr}
 800208a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800208e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002092:	4291      	cmp	r1, r2
 8002094:	d1f9      	bne.n	800208a <memcpy+0xe>
 8002096:	bd10      	pop	{r4, pc}

08002098 <_init>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	bf00      	nop
 800209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209e:	bc08      	pop	{r3}
 80020a0:	469e      	mov	lr, r3
 80020a2:	4770      	bx	lr

080020a4 <_fini>:
 80020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a6:	bf00      	nop
 80020a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020aa:	bc08      	pop	{r3}
 80020ac:	469e      	mov	lr, r3
 80020ae:	4770      	bx	lr

080020b0 <__update_firmware_veneer>:
 80020b0:	f85f f000 	ldr.w	pc, [pc]	; 80020b4 <__update_firmware_veneer+0x4>
 80020b4:	200001c5 	.word	0x200001c5

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000010                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <flash_lock>:
flash_lock() {
2000000c:	b480      	push	{r7}
2000000e:	b083      	sub	sp, #12
20000010:	af00      	add	r7, sp, #0
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
20000012:	4b0a      	ldr	r3, [pc, #40]	; (2000003c <flash_lock+0x30>)
20000014:	607b      	str	r3, [r7, #4]
	if (((*FLASH_CR >> 31) & 1) == 0) {
20000016:	687b      	ldr	r3, [r7, #4]
20000018:	681b      	ldr	r3, [r3, #0]
2000001a:	0fdb      	lsrs	r3, r3, #31
2000001c:	f003 0301 	and.w	r3, r3, #1
20000020:	2b00      	cmp	r3, #0
20000022:	d105      	bne.n	20000030 <flash_lock+0x24>
		*FLASH_CR |= (1 << 31);
20000024:	687b      	ldr	r3, [r7, #4]
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
2000002c:	687b      	ldr	r3, [r7, #4]
2000002e:	601a      	str	r2, [r3, #0]
}
20000030:	bf00      	nop
20000032:	370c      	adds	r7, #12
20000034:	46bd      	mov	sp, r7
20000036:	f85d 7b04 	ldr.w	r7, [sp], #4
2000003a:	4770      	bx	lr
2000003c:	40023c10 	.word	0x40023c10

20000040 <flash_unlock>:
flash_unlock() {
20000040:	b480      	push	{r7}
20000042:	b083      	sub	sp, #12
20000044:	af00      	add	r7, sp, #0
	uint32_t volatile* const FLASH_KEYR = (uint32_t*)(0x40023c00 + 0x04);
20000046:	4b0b      	ldr	r3, [pc, #44]	; (20000074 <flash_unlock+0x34>)
20000048:	607b      	str	r3, [r7, #4]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
2000004a:	4b0b      	ldr	r3, [pc, #44]	; (20000078 <flash_unlock+0x38>)
2000004c:	603b      	str	r3, [r7, #0]
	if (((*FLASH_CR >> 31) & 1) == 1) {
2000004e:	683b      	ldr	r3, [r7, #0]
20000050:	681b      	ldr	r3, [r3, #0]
20000052:	0fdb      	lsrs	r3, r3, #31
20000054:	f003 0301 	and.w	r3, r3, #1
20000058:	2b01      	cmp	r3, #1
2000005a:	d105      	bne.n	20000068 <flash_unlock+0x28>
		*FLASH_KEYR = 0x45670123;
2000005c:	687b      	ldr	r3, [r7, #4]
2000005e:	4a07      	ldr	r2, [pc, #28]	; (2000007c <flash_unlock+0x3c>)
20000060:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
20000062:	687b      	ldr	r3, [r7, #4]
20000064:	4a06      	ldr	r2, [pc, #24]	; (20000080 <flash_unlock+0x40>)
20000066:	601a      	str	r2, [r3, #0]
}
20000068:	bf00      	nop
2000006a:	370c      	adds	r7, #12
2000006c:	46bd      	mov	sp, r7
2000006e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000072:	4770      	bx	lr
20000074:	40023c04 	.word	0x40023c04
20000078:	40023c10 	.word	0x40023c10
2000007c:	45670123 	.word	0x45670123
20000080:	cdef89ab 	.word	0xcdef89ab

20000084 <flash_erase_sector>:
flash_erase_sector(eSERTOR_t sector) {
20000084:	b580      	push	{r7, lr}
20000086:	b084      	sub	sp, #16
20000088:	af00      	add	r7, sp, #0
2000008a:	4603      	mov	r3, r0
2000008c:	71fb      	strb	r3, [r7, #7]
	uint32_t volatile* const FLASH_SR   = (uint32_t*)(0x40023c00 + 0x0C);
2000008e:	4b1a      	ldr	r3, [pc, #104]	; (200000f8 <flash_erase_sector+0x74>)
20000090:	60fb      	str	r3, [r7, #12]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
20000092:	4b1a      	ldr	r3, [pc, #104]	; (200000fc <flash_erase_sector+0x78>)
20000094:	60bb      	str	r3, [r7, #8]
	flash_unlock();
20000096:	f7ff ffd3 	bl	20000040 <flash_unlock>
	while (((*FLASH_SR >> 16) & 1) == 1) {}
2000009a:	bf00      	nop
2000009c:	68fb      	ldr	r3, [r7, #12]
2000009e:	681b      	ldr	r3, [r3, #0]
200000a0:	0c1b      	lsrs	r3, r3, #16
200000a2:	f003 0301 	and.w	r3, r3, #1
200000a6:	2b01      	cmp	r3, #1
200000a8:	d0f8      	beq.n	2000009c <flash_erase_sector+0x18>
	*FLASH_CR |= (1 << 1);
200000aa:	68bb      	ldr	r3, [r7, #8]
200000ac:	681b      	ldr	r3, [r3, #0]
200000ae:	f043 0202 	orr.w	r2, r3, #2
200000b2:	68bb      	ldr	r3, [r7, #8]
200000b4:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (sector << 3);
200000b6:	68bb      	ldr	r3, [r7, #8]
200000b8:	681b      	ldr	r3, [r3, #0]
200000ba:	79fa      	ldrb	r2, [r7, #7]
200000bc:	00d2      	lsls	r2, r2, #3
200000be:	431a      	orrs	r2, r3
200000c0:	68bb      	ldr	r3, [r7, #8]
200000c2:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= (1 << 16);
200000c4:	68bb      	ldr	r3, [r7, #8]
200000c6:	681b      	ldr	r3, [r3, #0]
200000c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
200000cc:	68bb      	ldr	r3, [r7, #8]
200000ce:	601a      	str	r2, [r3, #0]
	while (((*FLASH_SR >> 16) & 1) == 1) {}
200000d0:	bf00      	nop
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	681b      	ldr	r3, [r3, #0]
200000d6:	0c1b      	lsrs	r3, r3, #16
200000d8:	f003 0301 	and.w	r3, r3, #1
200000dc:	2b01      	cmp	r3, #1
200000de:	d0f8      	beq.n	200000d2 <flash_erase_sector+0x4e>
	*FLASH_CR &= ~(1 << 1);
200000e0:	68bb      	ldr	r3, [r7, #8]
200000e2:	681b      	ldr	r3, [r3, #0]
200000e4:	f023 0202 	bic.w	r2, r3, #2
200000e8:	68bb      	ldr	r3, [r7, #8]
200000ea:	601a      	str	r2, [r3, #0]
	flash_lock();
200000ec:	f7ff ff8e 	bl	2000000c <flash_lock>
}
200000f0:	bf00      	nop
200000f2:	3710      	adds	r7, #16
200000f4:	46bd      	mov	sp, r7
200000f6:	bd80      	pop	{r7, pc}
200000f8:	40023c0c 	.word	0x40023c0c
200000fc:	40023c10 	.word	0x40023c10

20000100 <flash_program_byte>:
flash_program_byte(void* address, uint8_t* buffer, uint8_t size) {
20000100:	b580      	push	{r7, lr}
20000102:	b088      	sub	sp, #32
20000104:	af00      	add	r7, sp, #0
20000106:	60f8      	str	r0, [r7, #12]
20000108:	60b9      	str	r1, [r7, #8]
2000010a:	4613      	mov	r3, r2
2000010c:	71fb      	strb	r3, [r7, #7]
	uint32_t volatile* const FLASH_SR   = (uint32_t*)(0x40023c00 + 0x0C);
2000010e:	4b1d      	ldr	r3, [pc, #116]	; (20000184 <flash_program_byte+0x84>)
20000110:	61bb      	str	r3, [r7, #24]
	uint32_t volatile* const FLASH_CR   = (uint32_t*)(0x40023c00 + 0x10);
20000112:	4b1d      	ldr	r3, [pc, #116]	; (20000188 <flash_program_byte+0x88>)
20000114:	617b      	str	r3, [r7, #20]
	flash_unlock();
20000116:	f7ff ff93 	bl	20000040 <flash_unlock>
	while (((*FLASH_SR >> 16) & 1) == 1) {}
2000011a:	bf00      	nop
2000011c:	69bb      	ldr	r3, [r7, #24]
2000011e:	681b      	ldr	r3, [r3, #0]
20000120:	0c1b      	lsrs	r3, r3, #16
20000122:	f003 0301 	and.w	r3, r3, #1
20000126:	2b01      	cmp	r3, #1
20000128:	d0f8      	beq.n	2000011c <flash_program_byte+0x1c>
	*FLASH_CR |= (1 << 0);
2000012a:	697b      	ldr	r3, [r7, #20]
2000012c:	681b      	ldr	r3, [r3, #0]
2000012e:	f043 0201 	orr.w	r2, r3, #1
20000132:	697b      	ldr	r3, [r7, #20]
20000134:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
20000136:	2300      	movs	r3, #0
20000138:	77fb      	strb	r3, [r7, #31]
2000013a:	e00a      	b.n	20000152 <flash_program_byte+0x52>
		*((uint8_t*)(address)++) = buffer[i];
2000013c:	7ffb      	ldrb	r3, [r7, #31]
2000013e:	68ba      	ldr	r2, [r7, #8]
20000140:	441a      	add	r2, r3
20000142:	68fb      	ldr	r3, [r7, #12]
20000144:	1c59      	adds	r1, r3, #1
20000146:	60f9      	str	r1, [r7, #12]
20000148:	7812      	ldrb	r2, [r2, #0]
2000014a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
2000014c:	7ffb      	ldrb	r3, [r7, #31]
2000014e:	3301      	adds	r3, #1
20000150:	77fb      	strb	r3, [r7, #31]
20000152:	7ffa      	ldrb	r2, [r7, #31]
20000154:	79fb      	ldrb	r3, [r7, #7]
20000156:	429a      	cmp	r2, r3
20000158:	d3f0      	bcc.n	2000013c <flash_program_byte+0x3c>
	*FLASH_CR &= ~(1 << 0);
2000015a:	697b      	ldr	r3, [r7, #20]
2000015c:	681b      	ldr	r3, [r3, #0]
2000015e:	f023 0201 	bic.w	r2, r3, #1
20000162:	697b      	ldr	r3, [r7, #20]
20000164:	601a      	str	r2, [r3, #0]
	while (((*FLASH_SR >> 16) & 1) == 1) {}
20000166:	bf00      	nop
20000168:	69bb      	ldr	r3, [r7, #24]
2000016a:	681b      	ldr	r3, [r3, #0]
2000016c:	0c1b      	lsrs	r3, r3, #16
2000016e:	f003 0301 	and.w	r3, r3, #1
20000172:	2b01      	cmp	r3, #1
20000174:	d0f8      	beq.n	20000168 <flash_program_byte+0x68>
	flash_lock();
20000176:	f7ff ff49 	bl	2000000c <flash_lock>
}
2000017a:	bf00      	nop
2000017c:	3720      	adds	r7, #32
2000017e:	46bd      	mov	sp, r7
20000180:	bd80      	pop	{r7, pc}
20000182:	bf00      	nop
20000184:	40023c0c 	.word	0x40023c0c
20000188:	40023c10 	.word	0x40023c10

2000018c <reset_system>:
reset_system() {
2000018c:	b480      	push	{r7}
2000018e:	b083      	sub	sp, #12
20000190:	af00      	add	r7, sp, #0
	uint32_t volatile* const AIRCR   = (uint32_t*)0xE000ED0C;
20000192:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <reset_system+0x34>)
20000194:	607b      	str	r3, [r7, #4]
	*AIRCR |= (0x5FA << 16);		// register key
20000196:	687b      	ldr	r3, [r7, #4]
20000198:	681b      	ldr	r3, [r3, #0]
2000019a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000019e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
200001a2:	687a      	ldr	r2, [r7, #4]
200001a4:	6013      	str	r3, [r2, #0]
	*AIRCR |= (1 << 2);				// request a reset
200001a6:	687b      	ldr	r3, [r7, #4]
200001a8:	681b      	ldr	r3, [r3, #0]
200001aa:	f043 0204 	orr.w	r2, r3, #4
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	601a      	str	r2, [r3, #0]
}
200001b2:	bf00      	nop
200001b4:	370c      	adds	r7, #12
200001b6:	46bd      	mov	sp, r7
200001b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200001bc:	4770      	bx	lr
200001be:	bf00      	nop
200001c0:	e000ed0c 	.word	0xe000ed0c

200001c4 <update_firmware>:
update_firmware() {
200001c4:	b580      	push	{r7, lr}
200001c6:	af00      	add	r7, sp, #0
	flash_erase_sector(SECTOR_0);
200001c8:	2000      	movs	r0, #0
200001ca:	f7ff ff5b 	bl	20000084 <flash_erase_sector>
	flash_program_byte((void*)SECTOR_0_BASE_ADDR, rx_dma_buffer, sizeof(rx_dma_buffer));
200001ce:	22bc      	movs	r2, #188	; 0xbc
200001d0:	4904      	ldr	r1, [pc, #16]	; (200001e4 <update_firmware+0x20>)
200001d2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
200001d6:	f7ff ff93 	bl	20000100 <flash_program_byte>
	reset_system();
200001da:	f7ff ffd7 	bl	2000018c <reset_system>
}
200001de:	bf00      	nop
200001e0:	bd80      	pop	{r7, pc}
200001e2:	bf00      	nop
200001e4:	200002a8 	.word	0x200002a8
